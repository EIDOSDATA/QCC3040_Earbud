{
    "rules_tables": [
        {
            "name": "tws_topology_common_primary",

            "doc": "TWS Topology common rules deciding behaviour in a Primary role.",

            "include_headers": [
                "tws_topology_common_primary_rule_functions.h",
                "tws_topology_rule_events.h",
                "tws_topology_primary_ruleset.h",
                "tws_topology_goals.h"
            ],

            "rules": [
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_SHUTDOWN",
                    "rule_function": "ruleTwsTopPriShutDown",
                    "output_message_id": "tws_topology_goal_system_stop",
                    "doc": "When we are shutting down, disconnect everything."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_NO_PEER",
                    "rule_function": "ruleTwsTopPriPairPeer",
                    "output_message_id": "tws_topology_goal_pair_peer",
                    "doc": "Decide if peer pairing should run."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_PEER_PAIRED",
                    "rule_function": "ruleTwsTopPriPeerPairedInCase",
                    "output_message_id": "tws_topology_goal_set_address",
                    "doc": "Decide if Primary address should be set, when peer pairing completes whilst in the case."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_PEER_PAIRED",
                    "rule_function": "ruleTwsTopPriPeerPairedOutCase",
                    "output_message_id": "tws_topology_goal_set_primary_address_and_find_role",
                    "doc": "Decide if Primary address should be set and role selection started, when peer pairing completes out of the case."
                },

                { 
                    "event_mask": "TWSTOP_RULE_EVENT_ROLE_SELECTED_PRIMARY",
                    "rule_function": "ruleTwsTopPriSelectedPrimary",
                    "output_message_id": "tws_topology_goal_become_primary",
                    "doc": "When Primary role has been selected, decide if switch to become Primary role should be executed."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_ROLE_SELECTED_SECONDARY",
                    "rule_function": "ruleTwsTopPriNoRoleSelectedSecondary",
                    "output_message_id": "tws_topology_goal_become_secondary",
                    "doc": "When Secondary role has been selected, decide if switch to become Secondary role should be executed."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_ROLE_SELECTED_ACTING_PRIMARY",
                    "rule_function": "ruleTwsTopPriSelectedActingPrimary",
                    "output_message_id": "tws_topology_goal_become_acting_primary",
                    "doc": " When Acting Primary role has been selected, decide if switch to become Acting Primary role should be executed."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_ROLE_SELECTED_SECONDARY",
                    "rule_function": "ruleTwsTopPriPrimarySelectedSecondary",
                    "output_message_id": "tws_topology_goal_role_switch_to_secondary",
                    "doc": "When an Earbud in an acting primary role has received decision to be secondary, decide if the switch to secondary role should be executed."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_ROLE_SWITCH",
                    "rule_function": "ruleTwsTopPriEnableConnectablePeer",
                    "output_message_id": "tws_topology_goal_primary_connectable_peer",
                    "doc": "After switching to primary role, decide if Primary should enable page scan for Secondary to connect."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_PEER_CONNECTED_BREDR",
                    "rule_function": "ruleTwsTopPriDisableConnectablePeer",
                    "output_message_id": "tws_topology_goal_primary_connectable_peer",
                    "doc": "After peer BREDR connection established, decide if Primary should disable page scan for Secondary."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_PEER_CONNECTED_BREDR",
                    "rule_function": "ruleTwsTopPriConnectPeerProfiles",
                    "output_message_id": "tws_topology_goal_primary_connect_peer_profiles",
                    "doc": "When peer BREDR link established by Secondary, decide which profiles to connect."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_PEER_CONNECTED_BREDR",
                    "rule_function": "ruleTwsTopPriReleasePeer",
                    "output_message_id": "tws_topology_goal_release_peer",
                    "doc": "When peer BREDR link established by Secondary, but we have since entered case, release the peer link (dont wait for disconnect as other rules handle)."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_PEER_DISCONNECTED_BREDR",
                    "rule_function": "ruleTwsTopPriDisconnectPeerProfiles",
                    "output_message_id": "tws_topology_goal_primary_disconnect_peer_profiles",
                    "doc": "When the peer BREDR link is disconnected, ensure the peer profiles are inactive by disconnecting them."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_HANDSET_LINKLOSS",
                    "rule_function": "ruleTwsTopPriHandsetLinkLossReconnect",
                    "output_message_id": "tws_topology_goal_connect_handset",
                    "doc": "When handset BREDR link is lost, decide if Primary Earbud should attempt to reconnect."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_ROLE_SWITCH",
                    "rule_function": "ruleTwsTopPriAllowHandsetConnect",
                    "output_message_id": "tws_topology_goal_allow_handset_connect",
                    "doc": "When role switch complete, decide if connection manager should accept handset connections."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_ROLE_SWITCH",
                    "rule_function": "ruleTwsTopPriEnableLeConnectableHandset",
                    "output_message_id": "tws_topology_goal_le_connectable_handset",
                    "doc": "When role switch completed, decide if LE advertisement should be enabled for handset connections."
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_ROLE_SWITCH",
                    "rule_function": "ruleTwsTopPriRoleSwitchConnectHandset",
                    "output_message_id": "tws_topology_goal_connect_handset",
                    "doc": "Connect handset after role switch to Primary"
                },
                { 
                    "event_mask": "TWSTOP_RULE_EVENT_PROHIBIT_CONNECT_TO_HANDSET",
                    "rule_function": "ruleTwsTopPriDisconnectHandset",
                    "output_message_id": "tws_topology_goal_disconnect_handset",
                    "doc": "Decide what to do after handset connection has been prohibited"
                },
                {
                    "event_mask": "TWSTOP_RULE_EVENT_USER_REQUEST_CONNECT_HANDSET",
                    "rule_function": "ruleTwsTopPriUserRequestConnectHandset",
                    "output_message_id": "tws_topology_goal_connect_handset",
                    "doc": "Connect handset requested by topology user"
                },
                {
                    "event_mask": "TWSTOP_RULE_EVENT_USER_REQUEST_DISCONNECT_ALL_HANDSETS",
                    "rule_function": "ruleTwsTopPriDisconnectHandset",
                    "output_message_id": "tws_topology_goal_disconnect_handset",
                    "doc": "Disconnect all handsets requested by topology user"
                },
                {
                    "event_mask": "TWSTOP_RULE_EVENT_IN_CASE",
                    "rule_function": "ruleTwsTopPriInCaseWatchdogStart",
                    "output_message_id": "tws_topology_goal_start_watchdog",
                    "doc": "Start watchdog timer"
                },
                {
                    "event_mask": "TWSTOP_RULE_EVENT_CASE_LID_CLOSED",
                    "rule_function": "ruleTwsTopPriInCaseWatchdogStart",
                    "output_message_id": "tws_topology_goal_start_watchdog",
                    "doc": "Start watchdog timer"
                },
                {
                    "event_mask": "TWSTOP_RULE_EVENT_OUT_CASE",
                    "rule_function": "ruleTwsTopPriOutOfCaseWatchdogStop",
                    "output_message_id": "tws_topology_goal_stop_watchdog",
                    "doc": "Stop watchdog timer"
                },
                {
                    "event_mask": "TWSTOP_RULE_EVENT_CASE_LID_OPEN",
                    "rule_function": "ruleTwsTopPriOutOfCaseWatchdogStop",
                    "output_message_id": "tws_topology_goal_stop_watchdog",
                    "doc": "Stop watchdog timer"
                },
                {
                    "event_mask": "TWSTOP_RULE_EVENT_USER_REQUEST_DISCONNECT_LRU_HANDSET",
                    "rule_function": "ruleTwsTopPriDisconnectLruHandset",
                    "output_message_id": "tws_topology_goal_disconnect_lru_handset",
                    "doc": "Disconnect LRU handset requested by topology user"

                }
            ]
        }
    ]
}
