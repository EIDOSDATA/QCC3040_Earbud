
/home/svc-audio-dspsw/kymera_builds/builds/2021/kymera_2108031215/kalimba/kymera/tools/KCSMaker/out/7120/streplus_rom_release/download/debugbin/download_aanc.elf:     file format elf32-littlekalimba

Disassembly of section .text_minim:

8420066c <$_aanc_create>:
Capability API Handlers
*/

bool aanc_create(OPERATOR_DATA *op_data, void *message_data,
                 unsigned *response_id, void **resp_data)
{
8420066c:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
8420066e:	10 09       	r6 = r0 + Null;
84200670:	19 09       	r7 = r1 + Null;
84200672:	27 00       	r5 = r2 + Null;
84200674:	2a 09       	r8 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200676:	ef fd ff ff 	call (m) 0x4e6;
8420067a:	31 e3 
8420067c:	16 00       	r4 = r0 + Null;
     * explicitly initialized are 0.
     */

    L5_DBG_MSG1("AANC Create: p_ext_data at %p", p_ext_data);

    if (!base_op_create(op_data, message_data, response_id, resp_data))
8420067e:	55 08       	r3 = r8 + Null;
84200680:	3c 00       	r2 = r5 + Null;
84200682:	4b 08       	r1 = r7 + Null;
84200684:	42 08       	r0 = r6 + Null;
84200686:	ef fd fe ff 	call (m) 0x35a;
8420068a:	35 e6 
8420068c:	10 04       	Null = r0 - Null;
8420068e:	03 62       	if NE jump (m) Lc_aanc_create_3;

84200690 <Lc_aanc_create_2>:
    {
        return FALSE;
84200690:	02 00       	r0 = Null + Null;
84200692:	66 6e       	jump (m) Lc_aanc_create_13;

84200694 <Lc_aanc_create_3>:
 * \param  response_data Pointer to the pointer to message that is allocated in the function.
 * \param  new_status  A status ID that is to be sent in the message.
 */
inline static void base_op_change_response_status(void **response_data, STATUS_KYMERA new_status)
{
    (((OP_STD_RSP *)(*response_data))->status = new_status);
84200694:	01 f0 00 60 	rMAC = Null + 4096;
84200698:	a2 f0 00 e8 	r0 = M[r8 + Null];
8420069c:	51 8e       	M[r0 + 4] = rMAC;
8420069e:	31 00       	rMAC = r4 + Null;
     * termination point in create then change it to STATUS_OK.
     */
    base_op_change_response_status(resp_data, STATUS_CMD_FAILED);

    /* Initialize buffers */
    for (i = 0; i < AANC_MAX_SINKS; i++)
842006a0:	24 71       	r10 = Null + 4;
842006a2:	03 4c       	do (m) Lc__loop0;

842006a4 <Lc_aanc_create_4>:
    {
        p_ext_data->inputs[i] = NULL;
842006a4:	08 ee       	M[rMAC + Null] = Null;
842006a6:	09 21       	rMAC = rMAC + 4;

842006a8 <Lc__loop0>:
     * termination point in create then change it to STATUS_OK.
     */
    base_op_change_response_status(resp_data, STATUS_CMD_FAILED);

    /* Initialize buffers */
    for (i = 0; i < AANC_MAX_SINKS; i++)
842006a8:	31 28       	rMAC = r4 + 16;
    {
        p_ext_data->inputs[i] = NULL;
    }
    for (i = 0; i < AANC_MAX_SOURCES; i++)
842006aa:	24 71       	r10 = Null + 4;
842006ac:	03 4c       	do (m) Lc__loop1;

842006ae <Lc_aanc_create_6>:
    {
        p_ext_data->outputs[i] = NULL;
842006ae:	08 ee       	M[rMAC + Null] = Null;
842006b0:	09 21       	rMAC = rMAC + 4;

842006b2 <Lc__loop1>:
    /* Initialize buffers */
    for (i = 0; i < AANC_MAX_SINKS; i++)
    {
        p_ext_data->inputs[i] = NULL;
    }
    for (i = 0; i < AANC_MAX_SOURCES; i++)
842006b2:	31 30       	rMAC = r4 + 32;
    {
        p_ext_data->outputs[i] = NULL;
    }

    for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
842006b4:	14 71       	r10 = Null + 2;
842006b6:	04 4c       	do (m) Lc__loop2;

842006b8 <Lc_aanc_create_8>:
    {
        p_ext_data->metadata_ip[i] = NULL;
842006b8:	08 ee       	M[rMAC + Null] = Null;
        p_ext_data->metadata_op[i] = NULL;
842006ba:	88 8e       	M[rMAC + 8] = Null;
842006bc:	09 21       	rMAC = rMAC + 4;

842006be <Lc__loop2>:
    for (i = 0; i < AANC_MAX_SOURCES; i++)
    {
        p_ext_data->outputs[i] = NULL;
    }

    for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
842006be:	21 f0 9f 40 	rMAC = Null + 16543;
842006c2:	b1 9f       	M[r4 + 56] = rMAC;
        p_ext_data->metadata_op[i] = NULL;
    }

    /* Initialize capid and sample rate fields */
    p_ext_data->cap_id = AANC_MONO_16K_CAP_ID;
    p_ext_data->sample_rate = 16000;
842006c4:	11 f0 80 7a 	rMAC = Null + 16000;
842006c8:	71 9f       	M[r4 + 52] = rMAC;

    /* Initialize parameters */
    p_default_params = (unsigned*) AANC_GetDefaults(p_ext_data->cap_id);
842006ca:	22 f0 9f 40 	r0 = Null + 16543;
842006ce:	0a f0 3d e6 	call (m) $_AANC_GetDefaults;
842006d2:	13 00       	r1 = r0 + Null;
    p_cap_params = (unsigned*) &p_ext_data->aanc_cap_params;
842006d4:	34 3b       	r2 = r4 + 60;
    if(!cpsInitParameters(&p_ext_data->params_def, p_default_params,
                          p_cap_params, sizeof(AANC_PARAMETERS)))
842006d6:	05 f0 68 41 	r3 = Null + 360;
842006da:	62 f0 00 22 	r0 = r4 + 512;
842006de:	ff fd 00 f0 	call (m) 0x742;
842006e2:	25 e3 
842006e4:	10 04       	Null = r0 - Null;
842006e6:	3b 60       	if EQ jump (m) Lc_aanc_create_12;

842006e8 <Lc_aanc_create_10>:
    {
       return TRUE;
    }

    /* Initialize system mode */
    p_ext_data->cur_mode = AANC_SYSMODE_FULL;
842006e8:	81 20       	rMAC = Null + 2;
842006ea:	61 f0 69 8e 	M[r4 + 420] = rMAC;
    p_ext_data->host_mode = AANC_SYSMODE_FULL;
842006ee:	61 f0 6a 8e 	M[r4 + 424] = rMAC;
    p_ext_data->qact_mode = AANC_SYSMODE_FULL;
842006f2:	61 f0 6b 8e 	M[r4 + 428] = rMAC;

    /* Trigger re-initialization at start */
    p_ext_data->re_init_flag = TRUE;
842006f6:	41 20       	rMAC = Null + 1;
842006f8:	61 f0 f6 8b 	MB[r4 + 502] = rMAC;
    p_ext_data->re_init_hard = TRUE;
842006fc:	61 f0 f7 8b 	MB[r4 + 503] = rMAC;

    if (!aanc_proc_create(&p_ext_data->ag, p_ext_data->sample_rate))
84200700:	73 99       	r1 = M[r4 + 52];
84200702:	62 f0 c8 21 	r0 = r4 + 456;
84200706:	0a f0 3f e5 	call (m) $_aanc_proc_create;
8420070a:	10 04       	Null = r0 - Null;
8420070c:	28 60       	if EQ jump (m) Lc_aanc_create_12;

8420070e <Lc_aanc_create_11>:
    {
        L4_DBG_MSG("Failed to create AG data");
        return TRUE;
    }

    p_ext_data->filter_config = AANC_FILTER_CONFIG_SINGLE;
8420070e:	60 f0 e2 8c 	MH[r4 + 452] = Null;
    p_ext_data->anc_channel = AANC_ANC_INSTANCE_ANC0_ID;
84200712:	42 20       	r0 = Null + 1;
84200714:	62 f0 f0 8b 	MB[r4 + 496] = r0;
    /* Default to hybrid: ff path is FFB, fb path is FFA */
    p_ext_data->anc_ff_path = AANC_ANC_PATH_FFB_ID;
84200718:	81 20       	rMAC = Null + 2;
8420071a:	61 f0 f1 8b 	MB[r4 + 497] = rMAC;
    p_ext_data->anc_fb_path = AANC_ANC_PATH_FFA_ID;
8420071e:	62 f0 f2 8b 	MB[r4 + 498] = r0;
    p_ext_data->anc_clock_check_value = AANC_HYBRID_ENABLE;
84200722:	c2 23       	r0 = Null + 15;
84200724:	62 f0 fa 8c 	MH[r4 + 500] = r0;

#ifdef USE_AANC_LICENSING
    p_ext_data->license_status = AANC_LICENSE_STATUS_LICENSING_BUILD_STATUS;
84200728:	00 f1 02 f0 	r0 = Null + 268435456;
8420072c:	00 40 
8420072e:	62 f0 7f 8e 	M[r4 + 508] = r0;
#endif

    p_ext_data->ff_ramp.p_gain = &p_ext_data->ff_gain.fine;
84200732:	62 f0 ce 21 	r0 = r4 + 462;
84200736:	62 f0 a4 8e 	M[r4 + 656] = r0;
    p_ext_data->ff_ramp.p_static = &p_ext_data->ff_static_gain.fine;
8420073a:	62 f0 e6 21 	r0 = r4 + 486;
8420073e:	62 f0 a5 8e 	M[r4 + 660] = r0;
    p_ext_data->fb_ramp.p_gain = &p_ext_data->fb_gain.fine;
84200742:	62 f0 d2 21 	r0 = r4 + 466;
84200746:	62 f0 ab 8e 	M[r4 + 684] = r0;
    p_ext_data->fb_ramp.p_static = &p_ext_data->fb_static_gain.fine;
8420074a:	62 f0 ea 21 	r0 = r4 + 490;
8420074e:	62 f0 ac 8e 	M[r4 + 688] = r0;

    p_ext_data->freeze_mode_state = AANC_FFGAIN_EXIT_FREEZE;
84200752:	61 f0 bc 9a 	MB[r4 + 700] = rMAC;
84200756:	a1 f0 00 e8 	rMAC = M[r8 + Null];
8420075a:	48 8e       	M[rMAC + 4] = Null;

8420075c <Lc_aanc_create_12>:
    p_default_params = (unsigned*) AANC_GetDefaults(p_ext_data->cap_id);
    p_cap_params = (unsigned*) &p_ext_data->aanc_cap_params;
    if(!cpsInitParameters(&p_ext_data->params_def, p_default_params,
                          p_cap_params, sizeof(AANC_PARAMETERS)))
    {
       return TRUE;
8420075c:	42 20       	r0 = Null + 1;

8420075e <Lc_aanc_create_13>:
    /* Operator creation was succesful, change respone to STATUS_OK*/
    base_op_change_response_status(resp_data, STATUS_OK);

    L4_DBG_MSG("AANC: Created");
    return TRUE;
}
8420075e:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84200760:	d8 4c       	rts;

84200762 <$_aanc_destroy>:

bool aanc_destroy(OPERATOR_DATA *op_data, void *message_data,
                  unsigned *response_id, void **resp_data)
{
84200762:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84200764:	10 09       	r6 = r0 + Null;
84200766:	1a 09       	r8 = r1 + Null;
84200768:	27 00       	r5 = r2 + Null;
8420076a:	29 09       	r7 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
8420076c:	ef fd fe ff 	call (m) 0x4e6;
84200770:	3b eb 
84200772:	16 00       	r4 = r0 + Null;
                  unsigned *response_id, void **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    /* call base_op destroy that creates and fills response message, too */
    if (!base_op_destroy(op_data, message_data, response_id, resp_data))
84200774:	4d 08       	r3 = r7 + Null;
84200776:	3c 00       	r2 = r5 + Null;
84200778:	53 08       	r1 = r8 + Null;
8420077a:	42 08       	r0 = r6 + Null;
8420077c:	ef fd fd ff 	call (m) 0x370;
84200780:	35 ef 
84200782:	10 04       	Null = r0 - Null;
84200784:	03 62       	if NE jump (m) Lc_aanc_destroy_3;

84200786 <Lc_aanc_destroy_2>:
    {
        return FALSE;
84200786:	02 00       	r0 = Null + Null;
84200788:	08 6e       	jump (m) Lc_aanc_destroy_6;

8420078a <Lc_aanc_destroy_3>:
    }

    /* patch_fn_shared(aanc_capability); TODO: patch functions */

    if (p_ext_data != NULL)
8420078a:	30 04       	Null = r4 - Null;
8420078c:	05 60       	if EQ jump (m) Lc_aanc_destroy_5;

8420078e <Lc_aanc_destroy_4>:
    {
        aanc_proc_destroy(&p_ext_data->ag);
8420078e:	62 f0 c8 21 	r0 = r4 + 456;
84200792:	0b f0 2f ee 	call (m) $_aanc_proc_destroy;

84200796 <Lc_aanc_destroy_5>:

        L4_DBG_MSG("AANC: Cleanup complete.");
    }

    L4_DBG_MSG("AANC: Destroyed");
    return TRUE;
84200796:	42 20       	r0 = Null + 1;

84200798 <Lc_aanc_destroy_6>:
}
84200798:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
8420079a:	d8 4c       	rts;

8420079c <$_aanc_start>:

bool aanc_start(OPERATOR_DATA *op_data, void *message_data,
                unsigned *response_id, void **resp_data)
{
8420079c:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
8420079e:	11 09       	r7 = r0 + Null;
842007a0:	2a 09       	r8 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
842007a2:	ef fd fe ff 	call (m) 0x4e6;
842007a6:	25 ea 
842007a8:	16 00       	r4 = r0 + Null;
    /* FF, FB fine gain ramp variables: duration, delay, target */
    unsigned ff_dur, fb_dur, fb_dly;
    uint16 ff_tgt, fb_tgt;

    /* Start with the assumption that we fail and change later if we succeed */
    if (!base_op_build_std_response_ex(op_data, STATUS_CMD_FAILED, resp_data))
842007aa:	03 f0 00 60 	r1 = Null + 4096;
842007ae:	54 08       	r2 = r8 + Null;
842007b0:	4a 08       	r0 = r7 + Null;
842007b2:	ef fd fe ff 	call (m) 0x4bc;
842007b6:	2b e8 
842007b8:	10 04       	Null = r0 - Null;
842007ba:	03 62       	if NE jump (m) Lc_aanc_start_3;

842007bc <Lc_aanc_start_2>:
    {
        return FALSE;
842007bc:	02 00       	r0 = Null + Null;
842007be:	47 6e       	jump (m) Lc_aanc_start_12;

842007c0 <Lc_aanc_start_3>:
    }

    /* Initialize coarse gains to static values */
    p_ext_data->ec_gain.coarse = p_ext_data->ec_static_gain.coarse;
842007c0:	61 f0 f6 86 	rMAC = MHU[r4 + 492];
842007c4:	61 f0 ea 8c 	MH[r4 + 468] = rMAC;
    p_ext_data->fb_gain.coarse = p_ext_data->fb_static_gain.coarse;
842007c8:	61 f0 f4 86 	rMAC = MHU[r4 + 488];
842007cc:	61 f0 e8 8c 	MH[r4 + 464] = rMAC;
    p_ext_data->ff_gain.coarse = p_ext_data->ff_static_gain.coarse;
842007d0:	61 f0 f2 86 	rMAC = MHU[r4 + 484];
842007d4:	61 f0 e6 8c 	MH[r4 + 460] = rMAC;

    /* EC fine gain is not mode depedent */
    p_ext_data->ec_gain.fine = p_ext_data->ec_static_gain.fine;
842007d8:	61 f0 f7 86 	rMAC = MHU[r4 + 494];
842007dc:	61 f0 eb 8c 	MH[r4 + 470] = rMAC;

    /* FF and FB fine gains are updated in the first process frame */
    p_ext_data->fb_gain.fine = 0;
842007e0:	60 f0 e9 8c 	MH[r4 + 466] = Null;
    p_ext_data->ff_gain.fine = 0;
842007e4:	60 f0 e7 8c 	MH[r4 + 462] = Null;

    ff_dur = p_ext_data->aanc_cap_params.OFFSET_FF_FINE_RAMP_UP_TIMER;
842007e8:	64 f0 63 88 	r2 = M[r4 + 396];
    fb_dur = p_ext_data->aanc_cap_params.OFFSET_FB_FINE_RAMP_UP_TIMER;
842007ec:	68 f0 64 88 	r6 = M[r4 + 400];
    fb_dly = p_ext_data->aanc_cap_params.OFFSET_FB_FINE_RAMP_DELAY_TIMER;
842007f0:	67 f0 65 88 	r5 = M[r4 + 404];

    switch (p_ext_data->cur_mode)
842007f4:	61 f0 69 88 	rMAC = M[r4 + 420];
842007f8:	88 24       	Null = rMAC - 2;
842007fa:	0c 60       	if EQ jump (m) Lc_aanc_start_8;

842007fc <Lc_aanc_start_4>:
842007fc:	c8 24       	Null = rMAC - 3;
842007fe:	07 60       	if EQ jump (m) Lc_aanc_start_7;

84200800 <Lc_aanc_start_5>:
84200800:	88 25       	Null = rMAC - 6;
84200802:	18 62       	if NE jump (m) Lc_aanc_start_11;

84200804 <Lc_aanc_start_6>:
            fb_tgt = p_ext_data->fb_static_gain.fine;
            aanc_initialize_ramp(&p_ext_data->fb_ramp, fb_tgt, fb_dur, fb_dly);
            break;
        /* Quiet ramps FB fine gain to static/2 */
        case AANC_SYSMODE_QUIET:
            fb_tgt = (uint16)(p_ext_data->fb_static_gain.fine >> 1);
84200804:	62 f0 f5 86 	r0 = MHU[r4 + 490];
84200808:	13 58       	r1 = r0 ASHIFT -1;
8420080a:	0e 6e       	jump (m) Lc_aanc_start_10;

8420080c <Lc_aanc_start_7>:

    switch (p_ext_data->cur_mode)
    {
        /* Static ramps FF and FB fine gains */
        case AANC_SYSMODE_STATIC:
            ff_tgt = p_ext_data->ff_static_gain.fine;
8420080c:	63 f0 f3 86 	r1 = MHU[r4 + 486];
84200810:	04 6e       	jump (m) Lc_aanc_start_9;

84200812 <Lc_aanc_start_8>:
            fb_tgt = p_ext_data->fb_static_gain.fine;
            aanc_initialize_ramp(&p_ext_data->fb_ramp, fb_tgt, fb_dur, fb_dly);
            break;
        /* Full ramps FF and FB fine gains */
        case AANC_SYSMODE_FULL:
            ff_tgt = (uint16)p_ext_data->aanc_cap_params.OFFSET_FXLMS_INITIAL_VALUE;
84200812:	61 f0 55 88 	rMAC = M[r4 + 340];
84200816:	8b c6       	r1 = rMAC AND 0xffff;

84200818 <Lc_aanc_start_9>:
    switch (p_ext_data->cur_mode)
    {
        /* Static ramps FF and FB fine gains */
        case AANC_SYSMODE_STATIC:
            ff_tgt = p_ext_data->ff_static_gain.fine;
            aanc_initialize_ramp(&p_ext_data->ff_ramp, ff_tgt, ff_dur, 0);
84200818:	62 f0 80 22 	r0 = r4 + 640;
8420081c:	05 00       	r3 = Null + Null;
8420081e:	09 f0 35 e7 	call (m) Lc_aanc_initialize_ramp_1;

            fb_tgt = p_ext_data->fb_static_gain.fine;
84200822:	63 f0 f5 86 	r1 = MHU[r4 + 490];

84200826 <Lc_aanc_start_10>:
            aanc_initialize_ramp(&p_ext_data->fb_ramp, fb_tgt, fb_dur, fb_dly);
84200826:	62 f0 9c 22 	r0 = r4 + 668;
8420082a:	3d 00       	r3 = r5 + Null;
8420082c:	44 08       	r2 = r6 + Null;
8420082e:	09 f0 25 e7 	call (m) Lc_aanc_initialize_ramp_1;

84200832 <Lc_aanc_start_11>:
            break;
        default:
            break;
    }

    aanc_update_gain(op_data, p_ext_data);
84200832:	33 00       	r1 = r4 + Null;
84200834:	4a 08       	r0 = r7 + Null;
84200836:	06 f0 3d e8 	call (m) Lc_aanc_update_gain_1;

    /* Set reinitialization flags to ensure first run behavior */
    p_ext_data->re_init_flag = TRUE;
8420083a:	41 20       	rMAC = Null + 1;
8420083c:	61 f0 f6 8b 	MB[r4 + 502] = rMAC;
    p_ext_data->re_init_hard = TRUE;
84200840:	61 f0 f7 8b 	MB[r4 + 503] = rMAC;
84200844:	a1 f0 00 e8 	rMAC = M[r8 + Null];
84200848:	48 8e       	M[rMAC + 4] = Null;

    /* All good */
    base_op_change_response_status(resp_data, STATUS_OK);

    L4_DBG_MSG("AANC Started");
    return TRUE;
8420084a:	42 20       	r0 = Null + 1;

8420084c <Lc_aanc_start_12>:
}
8420084c:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
8420084e:	d8 4c       	rts;

84200850 <$_aanc_reset>:

bool aanc_reset(OPERATOR_DATA *op_data, void *message_data,
                unsigned *response_id, void **resp_data)
{
84200850:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84200852:	10 09       	r6 = r0 + Null;
84200854:	1a 09       	r8 = r1 + Null;
84200856:	27 00       	r5 = r2 + Null;
84200858:	29 09       	r7 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
8420085a:	ef fd fe ff 	call (m) 0x4e6;
8420085e:	2d e4 
84200860:	16 00       	r4 = r0 + Null;
bool aanc_reset(OPERATOR_DATA *op_data, void *message_data,
                unsigned *response_id, void **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    if (!base_op_reset(op_data, message_data, response_id, resp_data))
84200862:	4d 08       	r3 = r7 + Null;
84200864:	3c 00       	r2 = r5 + Null;
84200866:	53 08       	r1 = r8 + Null;
84200868:	42 08       	r0 = r6 + Null;
8420086a:	ef fd fd ff 	call (m) 0x32c;
8420086e:	23 e6 
84200870:	10 04       	Null = r0 - Null;
84200872:	03 62       	if NE jump (m) Lc_aanc_reset_3;

84200874 <Lc_aanc_reset_2>:
    {
        return FALSE;
84200874:	02 00       	r0 = Null + Null;
84200876:	07 6e       	jump (m) Lc_aanc_reset_4;

84200878 <Lc_aanc_reset_3>:
    }

    p_ext_data->re_init_flag = TRUE;
84200878:	41 20       	rMAC = Null + 1;
8420087a:	61 f0 f6 8b 	MB[r4 + 502] = rMAC;
    p_ext_data->re_init_hard = TRUE;
8420087e:	61 f0 f7 8b 	MB[r4 + 503] = rMAC;

    L4_DBG_MSG("AANC: Reset");
    return TRUE;
84200882:	0a 00       	r0 = rMAC + Null;

84200884 <Lc_aanc_reset_4>:
}
84200884:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84200886:	d8 4c       	rts;

84200888 <$_aanc_connect>:

bool aanc_connect(OPERATOR_DATA *op_data, void *message_data,
                  unsigned *response_id, void **resp_data)
{
84200888:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
8420088a:	17 00       	r5 = r0 + Null;
8420088c:	19 09       	r7 = r1 + Null;
8420088e:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200890:	ef fd fe ff 	call (m) 0x4e6;
84200894:	37 e2 
84200896:	16 00       	r4 = r0 + Null;
    tCbuffer** selected_buffer;
    tCbuffer** selected_metadata;

    /* Create the response. If there aren't sufficient resources for this fail
     * early. */
    if (!base_op_build_std_response_ex(op_data, STATUS_OK, resp_data))
84200898:	03 00       	r1 = Null + Null;
8420089a:	44 08       	r2 = r6 + Null;
8420089c:	3a 00       	r0 = r5 + Null;
8420089e:	ef fd fe ff 	call (m) 0x4bc;
842008a2:	3f e0 
842008a4:	10 04       	Null = r0 - Null;
842008a6:	03 62       	if NE jump (m) Lc_aanc_connect_3;

842008a8 <Lc_aanc_connect_2>:
    {
        return FALSE;
842008a8:	02 00       	r0 = Null + Null;
842008aa:	3c 6e       	jump (m) Lc_aanc_connect_21;

842008ac <Lc_aanc_connect_3>:
    }

    /* can't connect while running if adaptive gain is not disabled */
    if (opmgr_op_is_running(op_data))
842008ac:	3a 00       	r0 = r5 + Null;
842008ae:	ff fd 27 f0 	call (m) 0x5700;
842008b2:	33 e2 
842008b4:	10 04       	Null = r0 - Null;
842008b6:	09 60       	if EQ jump (m) Lc_aanc_connect_6;

842008b8 <Lc_aanc_connect_4>:
    {
        if (p_ext_data->aanc_cap_params.OFFSET_DISABLE_AG_CALC == 0)
842008b8:	30 a8       	Null = M[r4 + 64];
842008ba:	07 62       	if NE jump (m) Lc_aanc_connect_6;

842008bc <Lc_aanc_connect_5>:
842008bc:	01 f0 00 60 	rMAC = Null + 4096;
842008c0:	82 f0 00 e8 	r0 = M[r6 + Null];
842008c4:	51 8e       	M[r0 + 4] = rMAC;
842008c6:	26 6e       	jump (m) Lc_aanc_connect_17;

842008c8 <Lc_aanc_connect_6>:
            return TRUE;
        }
    }

    /* Determine whether sink or source terminal being connected */
    terminal_id = OPMGR_GET_OP_CONNECT_TERMINAL_ID(message_data);
842008c8:	91 f0 00 e8 	rMAC = M[r7 + Null];
    terminal_num = terminal_id & TERMINAL_NUM_MASK;
842008cc:	8a c2       	r0 = rMAC AND 0x3f;

    if (terminal_id & TERMINAL_SINK_MASK)
842008ce:	40 f0 11 f0 	rMAC = rMAC AND 0x800000;
842008d2:	00 00 
842008d4:	04 60       	if EQ jump (m) Lc_aanc_connect_8;

842008d6 <Lc_aanc_connect_7>:
    {
        L4_DBG_MSG1("AANC connect: sink terminal %u", terminal_num);
        max_value = AANC_MAX_SINKS;
        selected_buffer = p_ext_data->inputs;
842008d6:	34 00       	r2 = r4 + Null;
        selected_metadata = p_ext_data->metadata_ip;
842008d8:	33 30       	r1 = r4 + 32;
842008da:	03 6e       	jump (m) Lc_aanc_connect_9;

842008dc <Lc_aanc_connect_8>:
    }
    else
    {
        L4_DBG_MSG1("AANC connect: source terminal %u", terminal_num);
        max_value = AANC_MAX_SOURCES;
        selected_buffer = p_ext_data->outputs;
842008dc:	34 28       	r2 = r4 + 16;
        selected_metadata = p_ext_data->metadata_op;
842008de:	33 32       	r1 = r4 + 40;

842008e0 <Lc_aanc_connect_9>:
    }

    /* Can't use invalid ID */
    if (terminal_num >= max_value)
842008e0:	10 25       	Null = r0 - 4;
842008e2:	07 64       	if NC jump (m) Lc_aanc_connect_11;

842008e4 <Lc_aanc_connect_10>:
842008e4:	01 f0 03 60 	rMAC = Null + 4099;
842008e8:	82 f0 00 e8 	r0 = M[r6 + Null];
842008ec:	51 8e       	M[r0 + 4] = rMAC;
842008ee:	12 6e       	jump (m) Lc_aanc_connect_17;

842008f0 <Lc_aanc_connect_11>:
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
    }

    /* Can't connect if already connected */
    if (selected_buffer[terminal_num] != NULL)
842008f0:	55 54       	r3 = r0 LSHIFT 2;
842008f2:	2c 01       	r2 = r3 + r2;
842008f4:	21 e8       	rMAC = M[r2 + Null];
842008f6:	e3 63       	if NE jump (m) Lc_aanc_connect_5;

842008f8 <Lc_aanc_connect_12>:
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
        return TRUE;
    }

    pterminal_buf = OPMGR_GET_OP_CONNECT_BUFFER(message_data);
842008f8:	91 f0 01 88 	rMAC = M[r7 + 4];
    selected_buffer[terminal_num] = pterminal_buf;
842008fc:	21 ee       	M[r2 + Null] = rMAC;

    if (terminal_num == AANC_PLAYBACK_TERMINAL_ID)
842008fe:	10 04       	Null = r0 - Null;
84200900:	0b 62       	if NE jump (m) Lc_aanc_connect_18;

84200902 <Lc_aanc_connect_13>:
    {
        /* playback metadata has its own metadata channel */
        if (selected_metadata[AANC_METADATA_PLAYBACK_ID] == NULL &&
            buff_has_metadata(pterminal_buf))
84200902:	1a e8       	r0 = M[r1 + Null];
84200904:	04 62       	if NE jump (m) Lc_aanc_connect_16;

84200906 <Lc_aanc_connect_14>:
 *
 * \return TRUE if the buffer supports metadata. FALSE if it doesn't.
 */
static inline bool buff_has_metadata(tCbuffer *buff)
{
    if (buff->metadata != NULL)
84200906:	8a 89       	r0 = M[rMAC + 24];
84200908:	02 60       	if EQ jump (m) Lc_aanc_connect_16;

8420090a <Lc_aanc_connect_15>:
        {
            selected_metadata[AANC_METADATA_PLAYBACK_ID] = pterminal_buf;
8420090a:	19 ee       	M[r1 + Null] = rMAC;

8420090c <Lc_aanc_connect_16>:
        {
            selected_metadata[AANC_METADATA_MIC_ID] = pterminal_buf;
        }
    }

    update_touched_sink_sources(p_ext_data);
8420090c:	32 00       	r0 = r4 + Null;
8420090e:	06 f0 37 ee 	call (m) Lc_update_touched_sink_sources_1;

84200912 <Lc_aanc_connect_17>:
    if (opmgr_op_is_running(op_data))
    {
        if (p_ext_data->aanc_cap_params.OFFSET_DISABLE_AG_CALC == 0)
        {
            base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
            return TRUE;
84200912:	42 20       	r0 = Null + 1;
84200914:	07 6e       	jump (m) Lc_aanc_connect_21;

84200916 <Lc_aanc_connect_18>:
    {
        /* mic int/ext and fb mon metadata all muxed onto the same metadata
         * channel
         */
        if (selected_metadata[AANC_METADATA_MIC_ID] == NULL &&
            buff_has_metadata(pterminal_buf))
84200916:	5a 88       	r0 = M[r1 + 4];
84200918:	fa 63       	if NE jump (m) Lc_aanc_connect_16;

8420091a <Lc_aanc_connect_19>:
8420091a:	8a 89       	r0 = M[rMAC + 24];
8420091c:	f8 61       	if EQ jump (m) Lc_aanc_connect_16;

8420091e <Lc_aanc_connect_20>:
        {
            selected_metadata[AANC_METADATA_MIC_ID] = pterminal_buf;
8420091e:	59 8e       	M[r1 + 4] = rMAC;
84200920:	f6 6f       	jump (m) Lc_aanc_connect_16;

84200922 <Lc_aanc_connect_21>:
    }

    update_touched_sink_sources(p_ext_data);

    return TRUE;
}
84200922:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
84200924:	d8 4c       	rts;

84200926 <$_aanc_disconnect>:

bool aanc_disconnect(OPERATOR_DATA *op_data, void *message_data,
                     unsigned *response_id, void **resp_data)
{
84200926:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
84200928:	17 00       	r5 = r0 + Null;
8420092a:	19 09       	r7 = r1 + Null;
8420092c:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
8420092e:	ef fd fd ff 	call (m) 0x4e6;
84200932:	39 ed 
84200934:	16 00       	r4 = r0 + Null;
    unsigned i;
    bool found_alternative;

    /* Create the response. If there aren't sufficient resources for this fail
     * early. */
    if (!base_op_build_std_response_ex(op_data, STATUS_OK, resp_data))
84200936:	03 00       	r1 = Null + Null;
84200938:	44 08       	r2 = r6 + Null;
8420093a:	3a 00       	r0 = r5 + Null;
8420093c:	ef fd fd ff 	call (m) 0x4bc;
84200940:	21 ec 
84200942:	10 04       	Null = r0 - Null;
84200944:	03 62       	if NE jump (m) Lc_aanc_disconnect_3;

84200946 <Lc_aanc_disconnect_2>:
    {
        return FALSE;
84200946:	02 00       	r0 = Null + Null;
84200948:	4b 6e       	jump (m) Lc_aanc_disconnect_25;

8420094a <Lc_aanc_disconnect_3>:
    }

    /* can't disconnect while running if adaptive gain is not disabled */
    if (opmgr_op_is_running(op_data))
8420094a:	3a 00       	r0 = r5 + Null;
8420094c:	ff fd 26 f0 	call (m) 0x5700;
84200950:	35 ed 
84200952:	10 04       	Null = r0 - Null;
84200954:	09 60       	if EQ jump (m) Lc_aanc_disconnect_6;

84200956 <Lc_aanc_disconnect_4>:
    {
        if (p_ext_data->aanc_cap_params.OFFSET_DISABLE_AG_CALC == 0)
84200956:	30 a8       	Null = M[r4 + 64];
84200958:	07 62       	if NE jump (m) Lc_aanc_disconnect_6;

8420095a <Lc_aanc_disconnect_5>:
8420095a:	01 f0 00 60 	rMAC = Null + 4096;
8420095e:	82 f0 00 e8 	r0 = M[r6 + Null];
84200962:	51 8e       	M[r0 + 4] = rMAC;
84200964:	37 6e       	jump (m) Lc_aanc_disconnect_23;

84200966 <Lc_aanc_disconnect_6>:
            return TRUE;
        }
    }

    /* Determine whether sink or source terminal being disconnected */
    terminal_id = OPMGR_GET_OP_CONNECT_TERMINAL_ID(message_data);
84200966:	91 f0 00 e8 	rMAC = M[r7 + Null];
    terminal_num = terminal_id & TERMINAL_NUM_MASK;
8420096a:	8a c2       	r0 = rMAC AND 0x3f;

    if (terminal_id & TERMINAL_SINK_MASK)
8420096c:	40 f0 11 f0 	rMAC = rMAC AND 0x800000;
84200970:	00 00 
84200972:	04 60       	if EQ jump (m) Lc_aanc_disconnect_8;

84200974 <Lc_aanc_disconnect_7>:
    {
        L4_DBG_MSG1("AANC disconnect: sink terminal %u", terminal_num);
        max_value = AANC_MAX_SINKS;
        selected_buffer = p_ext_data->inputs;
84200974:	31 00       	rMAC = r4 + Null;
        selected_metadata = p_ext_data->metadata_ip;
84200976:	33 30       	r1 = r4 + 32;
84200978:	03 6e       	jump (m) Lc_aanc_disconnect_9;

8420097a <Lc_aanc_disconnect_8>:
    }
    else
    {
        L4_DBG_MSG1("AANC disconnect: source terminal %u", terminal_num);
        max_value = AANC_MAX_SOURCES;
        selected_buffer = p_ext_data->outputs;
8420097a:	31 28       	rMAC = r4 + 16;
        selected_metadata = p_ext_data->metadata_op;
8420097c:	33 32       	r1 = r4 + 40;

8420097e <Lc_aanc_disconnect_9>:
    }

    /* Can't use invalid ID */
    if (terminal_num >= max_value)
8420097e:	10 25       	Null = r0 - 4;
84200980:	07 64       	if NC jump (m) Lc_aanc_disconnect_11;

84200982 <Lc_aanc_disconnect_10>:
84200982:	01 f0 03 60 	rMAC = Null + 4099;
84200986:	82 f0 00 e8 	r0 = M[r6 + Null];
8420098a:	51 8e       	M[r0 + 4] = rMAC;
8420098c:	23 6e       	jump (m) Lc_aanc_disconnect_23;

8420098e <Lc_aanc_disconnect_11>:
        return TRUE;
    }

    found_alternative = FALSE;
    /* Can't disconnect if not connected */
    if (selected_buffer[terminal_num] == NULL)
8420098e:	55 54       	r3 = r0 LSHIFT 2;
84200990:	0c 00       	r2 = rMAC + Null;
84200992:	2c 01       	r2 = r3 + r2;
84200994:	27 00       	r5 = r2 + Null;
84200996:	3c e8       	r2 = M[r5 + Null];
84200998:	e1 61       	if EQ jump (m) Lc_aanc_disconnect_5;

8420099a <Lc_aanc_disconnect_12>:
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
        return TRUE;
    }

    if (terminal_num == AANC_PLAYBACK_TERMINAL_ID)
8420099a:	10 04       	Null = r0 - Null;
8420099c:	05 62       	if NE jump (m) Lc_aanc_disconnect_15;

8420099e <Lc_aanc_disconnect_13>:
    {
        /* playback metadata has its own metadata channel */
        if (selected_metadata[AANC_METADATA_PLAYBACK_ID] != NULL)
8420099e:	19 e8       	rMAC = M[r1 + Null];
842009a0:	15 60       	if EQ jump (m) Lc_aanc_disconnect_22;

842009a2 <Lc_aanc_disconnect_14>:
        {
            selected_metadata[AANC_METADATA_PLAYBACK_ID] = NULL;
842009a2:	18 ee       	M[r1 + Null] = Null;
842009a4:	13 6e       	jump (m) Lc_aanc_disconnect_22;

842009a6 <Lc_aanc_disconnect_15>:
    {
        /* Mic int/ext and fb mon metadata all muxed onto the same metadata
         * channel. Try to find an alternative channel to set the metadata to if
         * we're disconnecting the existing metadata channel. */
        if (selected_metadata[AANC_METADATA_MIC_ID] ==
            selected_buffer[terminal_num])
842009a6:	5d 88       	r3 = M[r1 + 4];
842009a8:	28 05       	Null = r3 - r2;
842009aa:	10 62       	if NE jump (m) Lc_aanc_disconnect_22;

842009ac <Lc_aanc_disconnect_16>:
        {
            for (i = 1; i < max_value; i++)
842009ac:	44 20       	r2 = Null + 1;
842009ae:	0d 21       	r3 = rMAC + 4;

842009b0 <Lc_aanc_disconnect_17>:
            {
                if (i == terminal_num)
842009b0:	a0 04       	Null = r2 - r0;
842009b2:	07 60       	if EQ jump (m) Lc_aanc_disconnect_20;

842009b4 <Lc_aanc_disconnect_18>:
                {
                    continue;
                }
                if (selected_buffer[i] != NULL &&
                    buff_has_metadata(selected_buffer[i]))
842009b4:	58 f0 00 e8 	r6 = M[r3 + Null];
842009b8:	04 60       	if EQ jump (m) Lc_aanc_disconnect_20;

842009ba <Lc_aanc_disconnect_19>:
842009ba:	88 f0 06 88 	r6 = M[r6 + 24];
842009be:	0c 62       	if NE jump (m) Lc_aanc_disconnect_24;

842009c0 <Lc_aanc_disconnect_20>:
         * channel. Try to find an alternative channel to set the metadata to if
         * we're disconnecting the existing metadata channel. */
        if (selected_metadata[AANC_METADATA_MIC_ID] ==
            selected_buffer[terminal_num])
        {
            for (i = 1; i < max_value; i++)
842009c0:	64 20       	r2 = r2 + 1;
842009c2:	2d 21       	r3 = r3 + 4;
842009c4:	20 25       	Null = r2 - 4;
842009c6:	f5 65       	if NC jump (m) Lc_aanc_disconnect_17;

842009c8 <Lc_aanc_disconnect_21>:
                    break;
                }
            }
            if (!found_alternative)
            {
                selected_metadata[AANC_METADATA_MIC_ID] = NULL;
842009c8:	58 8e       	M[r1 + 4] = Null;

842009ca <Lc_aanc_disconnect_22>:
            }
        }
    }

    selected_buffer[terminal_num] = NULL;
842009ca:	38 ee       	M[r5 + Null] = Null;

    update_touched_sink_sources(p_ext_data);
842009cc:	32 00       	r0 = r4 + Null;
842009ce:	06 f0 37 e8 	call (m) Lc_update_touched_sink_sources_1;

842009d2 <Lc_aanc_disconnect_23>:
    if (opmgr_op_is_running(op_data))
    {
        if (p_ext_data->aanc_cap_params.OFFSET_DISABLE_AG_CALC == 0)
        {
            base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
            return TRUE;
842009d2:	42 20       	r0 = Null + 1;
842009d4:	05 6e       	jump (m) Lc_aanc_disconnect_25;

842009d6 <Lc_aanc_disconnect_24>:
                    continue;
                }
                if (selected_buffer[i] != NULL &&
                    buff_has_metadata(selected_buffer[i]))
                {
                    selected_metadata[AANC_METADATA_MIC_ID] = selected_buffer[i];
842009d6:	62 54       	r0 = r2 LSHIFT 2;
842009d8:	89 e8       	rMAC = M[rMAC + r0];
842009da:	59 8e       	M[r1 + 4] = rMAC;
                    found_alternative = TRUE;
                    break;
842009dc:	f7 6f       	jump (m) Lc_aanc_disconnect_22;

842009de <Lc_aanc_disconnect_25>:
    selected_buffer[terminal_num] = NULL;

    update_touched_sink_sources(p_ext_data);

    return TRUE;
}
842009de:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
842009e0:	d8 4c       	rts;

842009e2 <$_aanc_buffer_details>:

bool aanc_buffer_details(OPERATOR_DATA *op_data, void *message_data,
                         unsigned *response_id, void **resp_data)
{
842009e2:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
842009e4:	10 09       	r6 = r0 + Null;
842009e6:	1a 09       	r8 = r1 + Null;
842009e8:	21 09       	r7 = r2 + Null;
842009ea:	2f 00       	r5 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
842009ec:	ef fd fd ff 	call (m) 0x4e6;
842009f0:	3b e7 
842009f2:	16 00       	r4 = r0 + Null;
    /* Variables used for distinguishing source/sink */
    unsigned max_value;
    tCbuffer** opposite_buffer;
    tCbuffer** selected_metadata;

    if (!base_op_buffer_details(op_data, message_data, response_id, resp_data))
842009f4:	3d 00       	r3 = r5 + Null;
842009f6:	4c 08       	r2 = r7 + Null;
842009f8:	53 08       	r1 = r8 + Null;
842009fa:	42 08       	r0 = r6 + Null;
842009fc:	ef fd fc ff 	call (m) 0x37c;
84200a00:	21 ec 
84200a02:	10 04       	Null = r0 - Null;
84200a04:	03 62       	if NE jump (m) Lc_aanc_buffer_details_3;

84200a06 <Lc_aanc_buffer_details_2>:
    {
        return FALSE;
84200a06:	02 00       	r0 = Null + Null;
84200a08:	30 6e       	jump (m) Lc_aanc_buffer_details_12;

84200a0a <Lc_aanc_buffer_details_3>:
    }

    /* Response pointer */
    OP_BUF_DETAILS_RSP *p_resp = (OP_BUF_DETAILS_RSP*) *resp_data;
84200a0a:	3f e8       	r5 = M[r5 + Null];
    p_resp->runs_in_place = FALSE;
    p_resp->b.buffer_size = AANC_DEFAULT_BUFFER_SIZE;
#else

    /* Determine whether sink or source terminal being disconnected */
    terminal_id = OPMGR_GET_OP_CONNECT_TERMINAL_ID(message_data);
84200a0c:	a1 f0 00 e8 	rMAC = M[r8 + Null];
    terminal_num = terminal_id & TERMINAL_NUM_MASK;
84200a10:	8a c2       	r0 = rMAC AND 0x3f;

    if (terminal_id & TERMINAL_SINK_MASK)
84200a12:	40 f0 13 f0 	r1 = rMAC AND 0x800000;
84200a16:	00 00 
84200a18:	04 60       	if EQ jump (m) Lc_aanc_buffer_details_5;

84200a1a <Lc_aanc_buffer_details_4>:
    {
        L4_DBG_MSG1("AANC buffer details: sink buffer %u", terminal_num);
        max_value = AANC_MAX_SINKS;
        opposite_buffer = p_ext_data->outputs;
84200a1a:	33 28       	r1 = r4 + 16;
        selected_metadata = p_ext_data->metadata_ip;
84200a1c:	34 30       	r2 = r4 + 32;
84200a1e:	03 6e       	jump (m) Lc_aanc_buffer_details_6;

84200a20 <Lc_aanc_buffer_details_5>:
    }
    else
    {
        L4_DBG_MSG1("AANC buffer details: source buffer %u", terminal_num);
        max_value = AANC_MAX_SOURCES;
        opposite_buffer = p_ext_data->inputs;
84200a20:	33 00       	r1 = r4 + Null;
        selected_metadata = p_ext_data->metadata_op;
84200a22:	34 32       	r2 = r4 + 40;

84200a24 <Lc_aanc_buffer_details_6>:
    }

    /* Can't use invalid ID */
    if (terminal_num >= max_value)
84200a24:	10 25       	Null = r0 - 4;
84200a26:	05 64       	if NC jump (m) Lc_aanc_buffer_details_8;

84200a28 <Lc_aanc_buffer_details_7>:
84200a28:	01 f0 03 60 	rMAC = Null + 4099;
84200a2c:	79 8e       	M[r5 + 4] = rMAC;
84200a2e:	1c 6e       	jump (m) Lc_aanc_buffer_details_11;

84200a30 <Lc_aanc_buffer_details_8>:
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
    }

    p_resp->runs_in_place = TRUE;
84200a30:	3d 92       	r3 = MBU[r5 + 8];
84200a32:	55 ff f7 1f 	r3 = r3 AND 0xfffffff7;
84200a36:	6d c9       	r3 = r3 OR 0x8;
84200a38:	3d 9a       	MB[r5 + 8] = r3;
    p_resp->b.in_place_buff_params.in_place_terminal = \
        terminal_id ^ TERMINAL_SINK_MASK;
84200a3a:	08 f0 00 f0 	rMAC = rMAC XOR 0x800000;
84200a3e:	00 f1 91 c8 
84200a42:	39 8f       	M[r5 + 16] = rMAC;
    p_resp->b.in_place_buff_params.size = AANC_DEFAULT_BUFFER_SIZE;
84200a44:	01 f0 80 40 	rMAC = Null + 128;
84200a48:	79 8f       	M[r5 + 20] = rMAC;
    p_resp->b.in_place_buff_params.buffer = opposite_buffer[terminal_num];
84200a4a:	56 54       	r4 = r0 LSHIFT 2;
84200a4c:	99 e9       	rMAC = M[r1 + r4];
84200a4e:	b9 8f       	M[r5 + 24] = rMAC;
    L4_DBG_MSG1("aanc_playback_buffer_details: %u",
                p_resp->b.buffer_size);

    p_resp->supports_metadata = TRUE;
84200a50:	51 ff ef 1f 	rMAC = r3 AND 0xffffffef;
84200a54:	c9 c9       	rMAC = rMAC OR 0x10;
84200a56:	39 9a       	MB[r5 + 8] = rMAC;

    if (terminal_num == AANC_PLAYBACK_TERMINAL_ID)
84200a58:	10 04       	Null = r0 - Null;
84200a5a:	04 62       	if NE jump (m) Lc_aanc_buffer_details_10;

84200a5c <Lc_aanc_buffer_details_9>:
    {
        p_resp->metadata_buffer = selected_metadata[AANC_METADATA_PLAYBACK_ID];
84200a5c:	21 e8       	rMAC = M[r2 + Null];
84200a5e:	f9 8e       	M[r5 + 12] = rMAC;
84200a60:	03 6e       	jump (m) Lc_aanc_buffer_details_11;

84200a62 <Lc_aanc_buffer_details_10>:
    }
    else
    {
        p_resp->metadata_buffer = selected_metadata[AANC_METADATA_MIC_ID];
84200a62:	61 88       	rMAC = M[r2 + 4];
84200a64:	f9 8e       	M[r5 + 12] = rMAC;

84200a66 <Lc_aanc_buffer_details_11>:
    {
        /* invalid terminal id */
        L4_DBG_MSG1("AANC buffer details failed: invalid terminal %u",
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
84200a66:	42 20       	r0 = Null + 1;

84200a68 <Lc_aanc_buffer_details_12>:
        p_resp->metadata_buffer = selected_metadata[AANC_METADATA_MIC_ID];
    }

#endif /* DISABLE_IN_PLACE */
    return TRUE;
}
84200a68:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84200a6a:	d8 4c       	rts;

84200a6c <$_aanc_get_sched_info>:

bool aanc_get_sched_info(OPERATOR_DATA *op_data, void *message_data,
                         unsigned *response_id, void **resp_data)
{
84200a6c:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84200a6e:	17 00       	r5 = r0 + Null;
84200a70:	2e 00       	r4 = r3 + Null;
    OP_SCHED_INFO_RSP* resp;

    resp = base_op_get_sched_info_ex(op_data, message_data, response_id);
84200a72:	ef fd fc ff 	call (m) 0x41c;
84200a76:	2b ed 
    if (resp == NULL)
84200a78:	10 04       	Null = r0 - Null;
84200a7a:	09 62       	if NE jump (m) Lc_aanc_get_sched_info_3;

84200a7c <Lc_aanc_get_sched_info_2>:
    {
        return base_op_build_std_response_ex(op_data, STATUS_CMD_FAILED,
                                             resp_data);
84200a7c:	03 f0 00 60 	r1 = Null + 4096;
84200a80:	34 00       	r2 = r4 + Null;
84200a82:	3a 00       	r0 = r5 + Null;
84200a84:	ef fd fd ff 	call (m) 0x4bc;
84200a88:	39 e1 
84200a8a:	05 6e       	jump (m) Lc_aanc_get_sched_info_4;

84200a8c <Lc_aanc_get_sched_info_3>:
    }

    *resp_data = resp;
84200a8c:	32 ee       	M[r4 + Null] = r0;
    resp->block_size = AANC_DEFAULT_BLOCK_SIZE;
84200a8e:	01 30       	rMAC = Null + 32;
84200a90:	91 8e       	M[r0 + 8] = rMAC;

    return TRUE;
84200a92:	42 20       	r0 = Null + 1;

84200a94 <Lc_aanc_get_sched_info_4>:
}
84200a94:	f2 48       	popm <FP, r4, r5, rLink>;
84200a96:	d8 4c       	rts;

84200a98 <$_aanc_opmsg_set_control>:
Opmsg handlers
*/
bool aanc_opmsg_set_control(OPERATOR_DATA *op_data, void *message_data,
                            unsigned *resp_length,
                            OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200a98:	f6 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>;
84200a9a:	4d 4c       	SP = SP + 52;
84200a9c:	42 de       	M[FP + 32] = r0;
84200a9e:	4b de       	M[FP + 36] = r1;
84200aa0:	27 00       	r5 = r2 + Null;
84200aa2:	55 de       	M[FP + 40] = r3;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200aa4:	ef fd fd ff 	call (m) 0x4e6;
84200aa8:	23 e2 
84200aaa:	16 00       	r4 = r0 + Null;
    /* FF, FB fine gain ramp: duration, delay, target, ramp pointers */
    unsigned mt_dur, fb_dur, ff_dur, fb_dly;
    uint16 ff_tgt, fb_tgt;
    AANC_RAMP *p_ff_ramp, *p_fb_ramp;

    if(!cps_control_setup(message_data, resp_length, resp_data, &num_controls))
84200aac:	45 14       	r3 = FP + 68;
84200aae:	3b 00       	r1 = r5 + Null;
84200ab0:	54 d8       	r2 = M[FP + 40];
84200ab2:	4a d8       	r0 = M[FP + 36];
84200ab4:	ef fd ff ff 	call (m) 0xab2;
84200ab8:	3f ef 
84200aba:	10 04       	Null = r0 - Null;
84200abc:	04 62       	if NE jump (m) Lc_aanc_opmsg_set_control_3;

84200abe <Lc_aanc_opmsg_set_control_2>:
    {
       return FALSE;
84200abe:	02 00       	r0 = Null + Null;
84200ac0:	0f f0 b1 e5 	jump (m) Lc_aanc_opmsg_set_control_57;

84200ac4 <Lc_aanc_opmsg_set_control_3>:
    }

    /* Iterate through the control messages looking for mode and gain override
     * messages */
    result = OPMSG_RESULT_STATES_NORMAL_STATE;
84200ac4:	58 de       	M[FP + 44] = Null;
84200ac6:	81 20       	rMAC = Null + 2;
84200ac8:	61 de       	M[FP + 48] = rMAC;
84200aca:	c1 23       	rMAC = Null + 15;
84200acc:	69 de       	M[FP + 52] = rMAC;
84200ace:	41 20       	rMAC = Null + 1;
84200ad0:	71 de       	M[FP + 56] = rMAC;
84200ad2:	41 22       	rMAC = Null + 9;
84200ad4:	79 de       	M[FP + 60] = rMAC;
84200ad6:	41 20       	rMAC = Null + 1;
84200ad8:	81 de       	M[FP + 64] = rMAC;
    for (i=0; i<num_controls; i++)
84200ada:	03 09       	r9 = Null + Null;
84200adc:	04 6e       	jump (m) Lc_aanc_opmsg_set_control_6;

84200ade <Lc_aanc_opmsg_set_control_4>:

            /* No override flags indicated for channel */
            continue;
        }

        result = OPMSG_RESULT_STATES_UNSUPPORTED_CONTROL;
84200ade:	01 21       	rMAC = Null + 4;
84200ae0:	59 de       	M[FP + 44] = rMAC;

84200ae2 <Lc_aanc_opmsg_set_control_5>:
    }

    /* Iterate through the control messages looking for mode and gain override
     * messages */
    result = OPMSG_RESULT_STATES_NORMAL_STATE;
    for (i=0; i<num_controls; i++)
84200ae2:	0b 75       	r9 = r9 + 1;

84200ae4 <Lc_aanc_opmsg_set_control_6>:
84200ae4:	89 d8       	rMAC = M[FP + 68];
84200ae6:	1f fb 00 c2 	Null = r9 - rMAC;
84200aea:	02 f0 a5 e0 	if C jump (m) Lc_aanc_opmsg_set_control_10;

84200aee <Lc_aanc_opmsg_set_control_7>:
    {
        CPS_CONTROL_SOURCE ctrl_src;
        unsigned ctrl_value, ctrl_id;

        ctrl_id = cps_control_get(message_data, i, &ctrl_value, &ctrl_src);
84200aee:	85 14       	r3 = FP + 72;
84200af0:	c4 14       	r2 = FP + 76;
84200af2:	5b 08       	r1 = r9 + Null;
84200af4:	4a d8       	r0 = M[FP + 36];
84200af6:	ff fd 00 f0 	call (m) 0xb00;
84200afa:	2b e0 

        /* Mode override */
        if (ctrl_id == OPMSG_CONTROL_MODE_ID)
84200afc:	50 24       	Null = r0 - 1;
84200afe:	ba 62       	if NE jump (m) Lc_aanc_opmsg_set_control_32;

84200b00 <Lc_aanc_opmsg_set_control_8>:
        {

            /* Check for valid mode */
            ctrl_value &= AANC_SYSMODE_MASK;
84200b00:	99 d8       	rMAC = M[FP + 76];
84200b02:	09 c1       	rMAC = rMAC AND 0x7;
84200b04:	99 de       	M[FP + 76] = rMAC;
            if (ctrl_value >= AANC_SYSMODE_MAX_MODES)
84200b06:	c8 25       	Null = rMAC - 7;
84200b08:	0f 64       	if NC jump (m) Lc_aanc_opmsg_set_control_12;

84200b0a <Lc_aanc_opmsg_set_control_9>:
            {
                result = OPMSG_RESULT_STATES_INVALID_CONTROL_VALUE;
84200b0a:	41 21       	rMAC = Null + 5;
84200b0c:	59 de       	M[FP + 44] = rMAC;

84200b0e <Lc_aanc_opmsg_set_control_10>:
    }

    /* Set current operating mode based on override */
    /* NB: double AND removes gain override bits from comparison */
    if ((p_ext_data->ovr_control & AANC_CONTROL_MODE_OVERRIDE)
        & AANC_CONTROL_MODE_OVERRIDE)
84200b0e:	61 f0 6c 88 	rMAC = M[r4 + 432];
84200b12:	11 f1 00 00 	rMAC = rMAC AND 0x2000;
84200b16:	00 f0 c7 e4 	if EQ jump (m) Lc_aanc_opmsg_set_control_55;

84200b1a <Lc_aanc_opmsg_set_control_11>:
    {
        p_ext_data->cur_mode = p_ext_data->qact_mode;
84200b1a:	61 f0 6b 88 	rMAC = M[r4 + 428];
84200b1e:	61 f0 69 8e 	M[r4 + 420] = rMAC;
84200b22:	0f f0 c3 e4 	jump (m) Lc_aanc_opmsg_set_control_56;

84200b26 <Lc_aanc_opmsg_set_control_12>:
                break;
            }

            /* Re-initialize event states if not in quiet mode */
            if (ctrl_value != AANC_SYSMODE_QUIET &&
                ctrl_value != AANC_SYSMODE_GENTLE_MUTE)
84200b26:	88 25       	Null = rMAC - 6;
84200b28:	07 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_15;

84200b2a <Lc_aanc_opmsg_set_control_13>:
84200b2a:	48 25       	Null = rMAC - 5;
84200b2c:	05 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_15;

84200b2e <Lc_aanc_opmsg_set_control_14>:
            {
                aanc_initialize_events(op_data, p_ext_data);
84200b2e:	33 00       	r1 = r4 + Null;
84200b30:	42 d8       	r0 = M[FP + 32];
84200b32:	06 f0 2b e5 	call (m) Lc_aanc_initialize_events_1;

84200b36 <Lc_aanc_opmsg_set_control_15>:
            }

            /* Gain update logic */
            mt_dur = p_ext_data->aanc_cap_params.OFFSET_GENTLE_MUTE_TIMER;
84200b36:	f7 a8       	r5 = M[r4 + 76];
            fb_dur = p_ext_data->aanc_cap_params.OFFSET_FB_FINE_RAMP_UP_TIMER;
84200b38:	69 f0 64 88 	r7 = M[r4 + 400];
            ff_dur = p_ext_data->aanc_cap_params.OFFSET_FF_FINE_RAMP_UP_TIMER;
84200b3c:	64 f0 63 88 	r2 = M[r4 + 396];
            fb_dly = p_ext_data->aanc_cap_params.OFFSET_FB_FINE_RAMP_DELAY_TIMER;
84200b40:	68 f0 65 88 	r6 = M[r4 + 404];

            p_ff_ramp = &p_ext_data->ff_ramp;
84200b44:	62 f0 80 22 	r0 = r4 + 640;
            p_fb_ramp = &p_ext_data->fb_ramp;
84200b48:	6a f0 9c 22 	r8 = r4 + 668;

            switch (ctrl_value)
84200b4c:	99 d8       	rMAC = M[FP + 76];
84200b4e:	48 24       	Null = rMAC - 1;
84200b50:	38 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_24;

84200b52 <Lc_aanc_opmsg_set_control_16>:
84200b52:	88 24       	Null = rMAC - 2;
84200b54:	5c 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_28;

84200b56 <Lc_aanc_opmsg_set_control_17>:
84200b56:	c8 24       	Null = rMAC - 3;
84200b58:	39 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_25;

84200b5a <Lc_aanc_opmsg_set_control_18>:
84200b5a:	48 25       	Null = rMAC - 5;
84200b5c:	26 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_23;

84200b5e <Lc_aanc_opmsg_set_control_19>:
84200b5e:	88 25       	Null = rMAC - 6;
84200b60:	1d 62       	if NE jump (m) Lc_aanc_opmsg_set_control_21;

84200b62 <Lc_aanc_opmsg_set_control_20>:
                    /* Quiet mode sets gains to static and leaves FF and FB
                     * gains at their current value. Initializing the ramps
                     * ensures the gains will be ramped down to the target
                     * value.
                     */
                    p_ext_data->ec_gain = p_ext_data->ec_static_gain;
84200b62:	61 f0 f6 86 	rMAC = MHU[r4 + 492];
84200b66:	63 f0 f7 86 	r1 = MHU[r4 + 494];
84200b6a:	61 f0 ea 8c 	MH[r4 + 468] = rMAC;
84200b6e:	63 f0 eb 8c 	MH[r4 + 470] = r1;

                    p_ext_data->ff_gain.coarse = p_ext_data->ff_static_gain.coarse;
84200b72:	61 f0 f2 86 	rMAC = MHU[r4 + 484];
84200b76:	61 f0 e6 8c 	MH[r4 + 460] = rMAC;
                    aanc_initialize_ramp(p_ff_ramp, 0, ff_dur, 0);
84200b7a:	05 00       	r3 = Null + Null;
84200b7c:	03 00       	r1 = Null + Null;
84200b7e:	07 f0 35 ec 	call (m) Lc_aanc_initialize_ramp_1;

                    p_ext_data->fb_gain.coarse = p_ext_data->fb_static_gain.coarse;
84200b82:	61 f0 f4 86 	rMAC = MHU[r4 + 488];
84200b86:	61 f0 e8 8c 	MH[r4 + 464] = rMAC;
                    fb_tgt = (uint16)(p_ext_data->fb_static_gain.fine >> 1);
84200b8a:	62 f0 f5 86 	r0 = MHU[r4 + 490];
84200b8e:	13 58       	r1 = r0 ASHIFT -1;
                    aanc_initialize_ramp(p_fb_ramp, fb_tgt, fb_dur, 0);
84200b90:	05 00       	r3 = Null + Null;
84200b92:	4c 08       	r2 = r7 + Null;
84200b94:	52 08       	r0 = r8 + Null;
84200b96:	07 f0 3d eb 	call (m) Lc_aanc_initialize_ramp_1;

84200b9a <Lc_aanc_opmsg_set_control_21>:
                    /* Handled by early exit above */
                    break;
            }

            /* Determine control mode source and set override flags for mode */
            if (ctrl_src == CPS_SOURCE_HOST)
84200b9a:	e1 f0 48 80 	rMAC = MBS[FP + 72];
84200b9e:	54 62       	if NE jump (m) Lc_aanc_opmsg_set_control_29;

84200ba0 <Lc_aanc_opmsg_set_control_22>:
            {
                p_ext_data->host_mode = ctrl_value;
84200ba0:	99 d8       	rMAC = M[FP + 76];
84200ba2:	61 f0 6a 8e 	M[r4 + 424] = rMAC;
84200ba6:	9e 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200ba8 <Lc_aanc_opmsg_set_control_23>:
                    break;
                case AANC_SYSMODE_GENTLE_MUTE:
                    /* Gentle mute will ramp the FF and FB fine gains down to
                     * 0.
                     */
                    aanc_initialize_ramp(p_ff_ramp, 0, mt_dur, 0);
84200ba8:	05 00       	r3 = Null + Null;
84200baa:	03 00       	r1 = Null + Null;
84200bac:	3c 00       	r2 = r5 + Null;
84200bae:	07 f0 25 eb 	call (m) Lc_aanc_initialize_ramp_1;
                    aanc_initialize_ramp(p_fb_ramp, 0, mt_dur, 0);
84200bb2:	05 00       	r3 = Null + Null;
84200bb4:	03 00       	r1 = Null + Null;
84200bb6:	3c 00       	r2 = r5 + Null;
84200bb8:	52 08       	r0 = r8 + Null;
84200bba:	07 f0 39 ea 	call (m) Lc_aanc_initialize_ramp_1;
                    break;
84200bbe:	ee 6f       	jump (m) Lc_aanc_opmsg_set_control_21;

84200bc0 <Lc_aanc_opmsg_set_control_24>:
                case AANC_SYSMODE_MUTE_ANC:
                    /* Mute FF and FB gains */
                    p_ext_data->ff_gain.fine = 0;
84200bc0:	60 f0 e7 8c 	MH[r4 + 462] = Null;
                    p_ext_data->fb_gain.fine = 0;
84200bc4:	60 f0 e9 8c 	MH[r4 + 466] = Null;
                    break;
84200bc8:	e9 6f       	jump (m) Lc_aanc_opmsg_set_control_21;

84200bca <Lc_aanc_opmsg_set_control_25>:
                case AANC_SYSMODE_STATIC:
                    /* Set all gains to static values. FF and FB gains will
                     * be ramped from 0 to the static value.
                     */
                    p_ext_data->ec_gain = p_ext_data->ec_static_gain;
84200bca:	61 f0 f6 86 	rMAC = MHU[r4 + 492];
84200bce:	63 f0 f7 86 	r1 = MHU[r4 + 494];
84200bd2:	61 f0 ea 8c 	MH[r4 + 468] = rMAC;
84200bd6:	63 f0 eb 8c 	MH[r4 + 470] = r1;

                    p_ext_data->ff_gain.coarse = p_ext_data->ff_static_gain.coarse;
84200bda:	61 f0 f2 86 	rMAC = MHU[r4 + 484];
84200bde:	61 f0 e6 8c 	MH[r4 + 460] = rMAC;
                    p_ext_data->ff_gain.fine = 0;
84200be2:	60 f0 e7 8c 	MH[r4 + 462] = Null;
                    ff_tgt = p_ext_data->ff_static_gain.fine;
84200be6:	63 f0 f3 86 	r1 = MHU[r4 + 486];
                    aanc_initialize_ramp(p_ff_ramp, ff_tgt, ff_dur, 0);
84200bea:	05 00       	r3 = Null + Null;
84200bec:	07 f0 27 e9 	call (m) Lc_aanc_initialize_ramp_1;

                    p_ext_data->fb_gain.coarse = p_ext_data->fb_static_gain.coarse;
84200bf0:	61 f0 f4 86 	rMAC = MHU[r4 + 488];
84200bf4:	61 f0 e8 8c 	MH[r4 + 464] = rMAC;

84200bf8 <Lc_aanc_opmsg_set_control_26>:

                    /* Quiet mode keeps FB fine gain at current value */
                    p_ext_data->fb_gain.coarse = p_ext_data->fb_static_gain.coarse;
                    if (p_ext_data->cur_mode != AANC_SYSMODE_QUIET)
                    {
                        p_ext_data->fb_gain.fine = 0;
84200bf8:	60 f0 e9 8c 	MH[r4 + 466] = Null;

84200bfc <Lc_aanc_opmsg_set_control_27>:
                    ff_tgt = p_ext_data->ff_static_gain.fine;
                    aanc_initialize_ramp(p_ff_ramp, ff_tgt, ff_dur, 0);

                    p_ext_data->fb_gain.coarse = p_ext_data->fb_static_gain.coarse;
                    p_ext_data->fb_gain.fine = 0;
                    fb_tgt = p_ext_data->fb_static_gain.fine;
84200bfc:	63 f0 f5 86 	r1 = MHU[r4 + 490];
                    aanc_initialize_ramp(p_fb_ramp, fb_tgt, fb_dur, fb_dly);
84200c00:	45 08       	r3 = r6 + Null;
84200c02:	4c 08       	r2 = r7 + Null;
84200c04:	52 08       	r0 = r8 + Null;
84200c06:	07 f0 2d e8 	call (m) Lc_aanc_initialize_ramp_1;
                    break;
84200c0a:	c8 6f       	jump (m) Lc_aanc_opmsg_set_control_21;

84200c0c <Lc_aanc_opmsg_set_control_28>:
                case AANC_SYSMODE_FULL:
                    /* Set gains to static. FB fine gain will be ramped from 0
                     * from 0 to its static value, FF fine gain ramped to its
                     * initial value.
                     */
                    p_ext_data->ec_gain = p_ext_data->ec_static_gain;
84200c0c:	61 f0 f6 86 	rMAC = MHU[r4 + 492];
84200c10:	63 f0 f7 86 	r1 = MHU[r4 + 494];
84200c14:	61 f0 ea 8c 	MH[r4 + 468] = rMAC;
84200c18:	63 f0 eb 8c 	MH[r4 + 470] = r1;

                    p_ext_data->ff_gain.coarse = p_ext_data->ff_static_gain.coarse;
84200c1c:	61 f0 f2 86 	rMAC = MHU[r4 + 484];
84200c20:	61 f0 e6 8c 	MH[r4 + 460] = rMAC;
                    p_ext_data->ff_gain.fine = 0;
84200c24:	60 f0 e7 8c 	MH[r4 + 462] = Null;
                    ff_tgt = (uint16)p_ext_data->aanc_cap_params.OFFSET_FXLMS_INITIAL_VALUE;
84200c28:	61 f0 55 88 	rMAC = M[r4 + 340];
84200c2c:	8b c6       	r1 = rMAC AND 0xffff;
                    aanc_initialize_ramp(p_ff_ramp, ff_tgt, ff_dur, 0);
84200c2e:	05 00       	r3 = Null + Null;
84200c30:	07 f0 23 e7 	call (m) Lc_aanc_initialize_ramp_1;

                    /* Quiet mode keeps FB fine gain at current value */
                    p_ext_data->fb_gain.coarse = p_ext_data->fb_static_gain.coarse;
84200c34:	61 f0 f4 86 	rMAC = MHU[r4 + 488];
84200c38:	61 f0 e8 8c 	MH[r4 + 464] = rMAC;
                    if (p_ext_data->cur_mode != AANC_SYSMODE_QUIET)
84200c3c:	61 f0 69 88 	rMAC = M[r4 + 420];
84200c40:	88 25       	Null = rMAC - 6;
84200c42:	db 63       	if NE jump (m) Lc_aanc_opmsg_set_control_26;

84200c44 <Lc__ite_7>:
84200c44:	dc 6f       	jump (m) Lc_aanc_opmsg_set_control_27;

84200c46 <Lc_aanc_opmsg_set_control_29>:
            {
                p_ext_data->host_mode = ctrl_value;
            }
            else
            {
                p_ext_data->qact_mode = ctrl_value;
84200c46:	99 d8       	rMAC = M[FP + 76];
84200c48:	61 f0 6b 8e 	M[r4 + 428] = rMAC;
                /* Set or clear the QACT override flag.
                * &= is used to preserve the state of the gain bits in the
                * override word.
                */
                if (ctrl_src == CPS_SOURCE_OBPM_ENABLE)
84200c4c:	e1 f0 48 80 	rMAC = MBS[FP + 72];
84200c50:	88 24       	Null = rMAC - 2;
84200c52:	09 62       	if NE jump (m) Lc_aanc_opmsg_set_control_31;

84200c54 <Lc_aanc_opmsg_set_control_30>:
                {
                    p_ext_data->ovr_control |= AANC_CONTROL_MODE_OVERRIDE;
84200c54:	61 f0 6c 88 	rMAC = M[r4 + 432];
84200c58:	20 f0 00 f1 	rMAC = rMAC OR 0x2000;
84200c5c:	51 d8 
84200c5e:	61 f0 6c 8e 	M[r4 + 432] = rMAC;
84200c62:	40 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200c64 <Lc_aanc_opmsg_set_control_31>:
                }
                else
                {
                    p_ext_data->ovr_control &= AANC_OVERRIDE_MODE_MASK;
84200c64:	61 f0 6c 88 	rMAC = M[r4 + 432];
84200c68:	11 f6 ff 1f 	rMAC = rMAC AND 0xdfff;
84200c6c:	61 f0 6c 8e 	M[r4 + 432] = rMAC;
84200c70:	39 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200c72 <Lc_aanc_opmsg_set_control_32>:

            continue;
        }

        /* In/Out of Ear control */
        else if (ctrl_id == AANC_CONSTANT_IN_OUT_EAR_CTRL)
84200c72:	d0 24       	Null = r0 - 3;
84200c74:	07 62       	if NE jump (m) Lc_aanc_opmsg_set_control_34;

84200c76 <Lc_aanc_opmsg_set_control_33>:
        {
            ctrl_value &= 0x01;
84200c76:	99 d8       	rMAC = M[FP + 76];
84200c78:	09 c0       	rMAC = rMAC AND 0x1;
84200c7a:	99 de       	M[FP + 76] = rMAC;
            p_ext_data->in_out_status = ctrl_value;
84200c7c:	61 f0 f8 8b 	MB[r4 + 504] = rMAC;

            /* No override flags indicated for in/out of ear */
            continue;
84200c80:	31 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200c82 <Lc_aanc_opmsg_set_control_34>:
        }

        /* Channel control */
        else if (ctrl_id == AANC_CONSTANT_CHANNEL_CTRL)
84200c82:	50 25       	Null = r0 - 5;
84200c84:	10 62       	if NE jump (m) Lc_aanc_opmsg_set_control_39;

84200c86 <Lc_aanc_opmsg_set_control_35>:
        {
            /* Channel can only be updated from the host */
            if (ctrl_src == CPS_SOURCE_HOST)
84200c86:	e1 f0 48 80 	rMAC = MBS[FP + 72];
84200c8a:	2c 63       	if NE jump (m) Lc_aanc_opmsg_set_control_5;

84200c8c <Lc_aanc_opmsg_set_control_36>:
            {
                ctrl_value &= 0x1;
84200c8c:	99 d8       	rMAC = M[FP + 76];
84200c8e:	09 c0       	rMAC = rMAC AND 0x1;
                if (ctrl_value == 0)
84200c90:	99 de       	M[FP + 76] = rMAC;
84200c92:	05 62       	if NE jump (m) Lc_aanc_opmsg_set_control_38;

84200c94 <Lc_aanc_opmsg_set_control_37>:
                {
                    p_ext_data->anc_channel = AANC_ANC_INSTANCE_ANC0_ID;
84200c94:	71 d8       	rMAC = M[FP + 56];
84200c96:	61 f0 f0 8b 	MB[r4 + 496] = rMAC;
84200c9a:	24 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200c9c <Lc_aanc_opmsg_set_control_38>:
                }
                else
                {
                    p_ext_data->anc_channel = AANC_ANC_INSTANCE_ANC1_ID;
84200c9c:	61 d8       	rMAC = M[FP + 48];
84200c9e:	61 f0 f0 8b 	MB[r4 + 496] = rMAC;
84200ca2:	20 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200ca4 <Lc_aanc_opmsg_set_control_39>:
            /* No override flags indicated for channel */
            continue;
        }

        /* Feedforward control */
        else if (ctrl_id == AANC_CONSTANT_FEEDFORWARD_CTRL)
84200ca4:	90 25       	Null = r0 - 6;
84200ca6:	1b 62       	if NE jump (m) Lc_aanc_opmsg_set_control_44;

84200ca8 <Lc_aanc_opmsg_set_control_40>:
        {
            /* Feedforward can only be updated from the host */
            if (ctrl_src == CPS_SOURCE_HOST)
84200ca8:	e1 f0 48 80 	rMAC = MBS[FP + 72];
84200cac:	1b 63       	if NE jump (m) Lc_aanc_opmsg_set_control_5;

84200cae <Lc_aanc_opmsg_set_control_41>:
            {
                ctrl_value &= 0x1;
84200cae:	99 d8       	rMAC = M[FP + 76];
84200cb0:	09 c0       	rMAC = rMAC AND 0x1;
                if (ctrl_value == 0)
84200cb2:	99 de       	M[FP + 76] = rMAC;
84200cb4:	0b 62       	if NE jump (m) Lc_aanc_opmsg_set_control_43;

84200cb6 <Lc_aanc_opmsg_set_control_42>:
                {
                    /* hybrid */
                    p_ext_data->anc_ff_path = AANC_ANC_PATH_FFB_ID;
84200cb6:	61 d8       	rMAC = M[FP + 48];
84200cb8:	61 f0 f1 8b 	MB[r4 + 497] = rMAC;
                    p_ext_data->anc_fb_path = AANC_ANC_PATH_FFA_ID;
84200cbc:	71 d8       	rMAC = M[FP + 56];
84200cbe:	61 f0 f2 8b 	MB[r4 + 498] = rMAC;
                    p_ext_data->anc_clock_check_value = AANC_HYBRID_ENABLE;
84200cc2:	69 d8       	rMAC = M[FP + 52];
84200cc4:	61 f0 fa 8c 	MH[r4 + 500] = rMAC;
84200cc8:	0d 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200cca <Lc_aanc_opmsg_set_control_43>:
                }
                else
                {
                    /* feedforward only */
                    p_ext_data->anc_ff_path = AANC_ANC_PATH_FFA_ID;
84200cca:	71 d8       	rMAC = M[FP + 56];
84200ccc:	61 f0 f1 8b 	MB[r4 + 497] = rMAC;
                    p_ext_data->anc_fb_path = 0;
84200cd0:	60 f0 f2 8b 	MB[r4 + 498] = Null;
                    p_ext_data->anc_clock_check_value = AANC_FEEDFORWARD_ENABLE;
84200cd4:	79 d8       	rMAC = M[FP + 60];
84200cd6:	61 f0 fa 8c 	MH[r4 + 500] = rMAC;
84200cda:	04 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200cdc <Lc_aanc_opmsg_set_control_44>:
            continue;
        }

        else if (ctrl_id == AANC_CONSTANT_FF_FINE_GAIN_CTRL ||
                 (ctrl_id >= AANC_CONSTANT_FF_COARSE_GAIN_CTRL &&
                  ctrl_id <= AANC_CONSTANT_EC_COARSE_GAIN_CTRL))
84200cdc:	10 25       	Null = r0 - 4;
84200cde:	07 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_47;

84200ce0 <Lc_aanc_opmsg_set_control_45>:
84200ce0:	d0 25       	Null = r0 - 7;
84200ce2:	f3 ff fd eb 	if NC jump (m) Lc_aanc_opmsg_set_control_4;

84200ce6 <Lc_aanc_opmsg_set_control_46>:
84200ce6:	d0 26       	Null = r0 - 11;
84200ce8:	08 f0 b9 e0 	if HI jump (m) Lc_aanc_opmsg_set_control_50;

84200cec <Lc_aanc_opmsg_set_control_47>:
        {

            sel_override = gain_override_table[ctrl_id];
84200cec:	52 54       	r0 = r0 LSHIFT 2;
84200cee:	c0 f1 21 f0 	rMAC = r0 + 7340208;
84200cf2:	b0 20 
84200cf4:	0a 88       	r0 = M[rMAC + 0];
84200cf6:	a2 de       	M[FP + 80] = r0;

            if (override_gain(p_ext_data,
                              (uint16)ctrl_value,
                              sel_override.coarse,
                              sel_override.offset))
84200cf8:	45 d7       	r3 = MHU[FP + 80];
84200cfa:	e4 f0 52 82 	r2 = MBU[FP + 82];
84200cfe:	99 d8       	rMAC = M[FP + 76];
84200d00:	8b c6       	r1 = rMAC AND 0xffff;
84200d02:	32 00       	r0 = r4 + Null;
84200d04:	05 f0 2b e1 	call (m) Lc_override_gain_1;
84200d08:	10 04       	Null = r0 - Null;
84200d0a:	07 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_49;

84200d0c <Lc_aanc_opmsg_set_control_48>:
            {
                aanc_update_gain(op_data, p_ext_data);
84200d0c:	33 00       	r1 = r4 + Null;
84200d0e:	42 d8       	r0 = M[FP + 32];
84200d10:	04 f0 23 e2 	call (m) Lc_aanc_update_gain_1;
84200d14:	ff ff cf eb 	jump (m) Lc_aanc_opmsg_set_control_5;

84200d18 <Lc_aanc_opmsg_set_control_49>:
            }
            else
            {
                result = OPMSG_RESULT_STATES_PARAMETER_STATE_NOT_READY;
84200d18:	81 20       	rMAC = Null + 2;
84200d1a:	59 de       	M[FP + 44] = rMAC;
84200d1c:	ff ff c7 eb 	jump (m) Lc_aanc_opmsg_set_control_5;

84200d20 <Lc_aanc_opmsg_set_control_50>:
            }
            continue;
        }

        /* Filter config control */
        else if (ctrl_id == AANC_CONSTANT_FILTER_CONFIG_CTRL)
84200d20:	10 27       	Null = r0 - 12;
84200d22:	f1 ff bd eb 	if NE jump (m) Lc_aanc_opmsg_set_control_4;

84200d26 <Lc_aanc_opmsg_set_control_51>:
        {
            /* Channel can only be updated from the host */
            if (ctrl_src == CPS_SOURCE_HOST)
84200d26:	e1 f0 48 80 	rMAC = MBS[FP + 72];
84200d2a:	f1 ff b9 eb 	if NE jump (m) Lc_aanc_opmsg_set_control_5;

84200d2e <Lc_aanc_opmsg_set_control_52>:
            {
                ctrl_value &= 0x1;
84200d2e:	99 d8       	rMAC = M[FP + 76];
84200d30:	0b c0       	r1 = rMAC AND 0x1;
84200d32:	9b de       	M[FP + 76] = r1;
                /* Set ANC channel */
                FXLMS100_DMX *p_fxlms = p_ext_data->ag->p_fxlms;
84200d34:	61 f0 72 88 	rMAC = M[r4 + 456];
84200d38:	89 99       	rMAC = M[rMAC + 56];
                unsigned existing_configuration = \
                    p_fxlms->configuration & FXLMS100_CONFIG_LAYOUT_MASK_INV;
84200d3a:	0a a8       	r0 = M[rMAC + 64];
84200d3c:	22 f7 f0 1f 	r0 = r0 AND 0xfff0;
                switch (ctrl_value)
84200d40:	58 24       	Null = r1 - 1;
84200d42:	06 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_54;

84200d44 <Lc_aanc_opmsg_set_control_53>:
                {
                    case AANC_FILTER_CONFIG_SINGLE:
                        p_fxlms->configuration = \
                            existing_configuration | FXLMS100_CONFIG_SINGLE;
84200d44:	0a ae       	M[rMAC + 64] = r0;
                        p_ext_data->filter_config = AANC_FILTER_CONFIG_SINGLE;
84200d46:	60 f0 e2 8c 	MH[r4 + 452] = Null;
                        break;
84200d4a:	ff ff 99 eb 	jump (m) Lc_aanc_opmsg_set_control_5;

84200d4e <Lc_aanc_opmsg_set_control_54>:
                    case AANC_FILTER_CONFIG_PARALLEL:
                        p_fxlms->configuration = \
                            existing_configuration | FXLMS100_CONFIG_PARALLEL;
84200d4e:	12 c8       	r0 = r0 OR 0x1;
84200d50:	0a ae       	M[rMAC + 64] = r0;
                        p_ext_data->filter_config = AANC_FILTER_CONFIG_PARALLEL;
84200d52:	81 d8       	rMAC = M[FP + 64];
84200d54:	61 f0 e2 8c 	MH[r4 + 452] = rMAC;
                        break;
84200d58:	ff ff 8b eb 	jump (m) Lc_aanc_opmsg_set_control_5;

84200d5c <Lc_aanc_opmsg_set_control_55>:
    {
        p_ext_data->cur_mode = p_ext_data->qact_mode;
    }
    else
    {
        p_ext_data->cur_mode = p_ext_data->host_mode;
84200d5c:	61 f0 6a 88 	rMAC = M[r4 + 424];
84200d60:	61 f0 69 8e 	M[r4 + 420] = rMAC;

84200d64 <Lc_aanc_opmsg_set_control_56>:
    }

    cps_response_set_result(resp_data, result);
84200d64:	5b d8       	r1 = M[FP + 44];
84200d66:	52 d8       	r0 = M[FP + 40];
84200d68:	ef fd fe ff 	call (m) 0xb4e;
84200d6c:	27 ef 

    return TRUE;
84200d6e:	42 20       	r0 = Null + 1;

84200d70 <Lc_aanc_opmsg_set_control_57>:
}
84200d70:	73 4c       	SP = SP + -52;
84200d72:	f6 48       	popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84200d74:	d8 4c       	rts;

84200d76 <$_aanc_opmsg_get_params>:

bool aanc_opmsg_get_params(OPERATOR_DATA *op_data, void *message_data,
                           unsigned *resp_length,
                           OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200d76:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200d78:	1f 00       	r5 = r1 + Null;
84200d7a:	26 00       	r4 = r2 + Null;
84200d7c:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200d7e:	ef fd fb ff 	call (m) 0x4e6;
84200d82:	29 eb 
                           unsigned *resp_length,
                           OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    return cpsGetParameterMsgHandler(&p_ext_data->params_def, message_data,
                                     resp_length, resp_data);
84200d84:	02 f0 00 46 	r0 = r0 + 512;
84200d88:	45 08       	r3 = r6 + Null;
84200d8a:	34 00       	r2 = r4 + Null;
84200d8c:	3b 00       	r1 = r5 + Null;
84200d8e:	ef fd fd ff 	call (m) 0x792;
84200d92:	25 e0 

84200d94 <Lc_aanc_opmsg_get_params_2>:
}
84200d94:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200d96:	d8 4c       	rts;

84200d98 <$_aanc_opmsg_get_defaults>:

bool aanc_opmsg_get_defaults(OPERATOR_DATA *op_data, void *message_data,
                             unsigned *resp_length,
                             OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200d98:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200d9a:	1f 00       	r5 = r1 + Null;
84200d9c:	26 00       	r4 = r2 + Null;
84200d9e:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200da0:	ef fd fb ff 	call (m) 0x4e6;
84200da4:	27 ea 
                             unsigned *resp_length,
                             OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    return cpsGetDefaultsMsgHandler(&p_ext_data->params_def, message_data,
                                    resp_length, resp_data);
84200da6:	02 f0 00 46 	r0 = r0 + 512;
84200daa:	45 08       	r3 = r6 + Null;
84200dac:	34 00       	r2 = r4 + Null;
84200dae:	3b 00       	r1 = r5 + Null;
84200db0:	ef fd fd ff 	call (m) 0x840;
84200db4:	31 e4 

84200db6 <Lc_aanc_opmsg_get_defaults_2>:
}
84200db6:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200db8:	d8 4c       	rts;

84200dba <$_aanc_opmsg_set_params>:

bool aanc_opmsg_set_params(OPERATOR_DATA *op_data, void *message_data,
                           unsigned *resp_length,
                           OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200dba:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
84200dbc:	19 09       	r7 = r1 + Null;
84200dbe:	27 00       	r5 = r2 + Null;
84200dc0:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200dc2:	ef fd fb ff 	call (m) 0x4e6;
84200dc6:	25 e9 
84200dc8:	16 00       	r4 = r0 + Null;
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    bool success;
    /* patch_fn(aanc_opmsg_set_params); */

    success = cpsSetParameterMsgHandler(&p_ext_data->params_def, message_data,
                                       resp_length, resp_data);
84200dca:	62 f0 00 22 	r0 = r4 + 512;
84200dce:	45 08       	r3 = r6 + Null;
84200dd0:	3c 00       	r2 = r5 + Null;
84200dd2:	4b 08       	r1 = r7 + Null;
84200dd4:	ef fd fd ff 	call (m) 0x914;
84200dd8:	21 ea 
84200dda:	17 00       	r5 = r0 + Null;

    if (success)
84200ddc:	05 60       	if EQ jump (m) Lc_aanc_opmsg_set_params_3;

84200dde <Lc_aanc_opmsg_set_params_2>:
    {
        /* Set re-initialization flag for capability */
        p_ext_data->re_init_flag = TRUE;
84200dde:	41 20       	rMAC = Null + 1;
84200de0:	61 f0 f6 8b 	MB[r4 + 502] = rMAC;
84200de4:	0b 6e       	jump (m) Lc_aanc_opmsg_set_params_5;

84200de6 <Lc_aanc_opmsg_set_params_3>:
    }
    else
    {
        L2_DBG_MSG("AANC Set Parameters Failed");
84200de6:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200dea:	88 24       	Null = rMAC - 2;
84200dec:	07 68       	if LT jump (m) Lc_aanc_opmsg_set_params_5;

84200dee <Lc_aanc_opmsg_set_params_4>:
84200dee:	55 f1 02 f0 	r0 = Null + 357564450;
84200df2:	22 40 
84200df4:	ef fd ff ff 	call (m) 0xccc;
84200df8:	39 e6 

84200dfa <Lc_aanc_opmsg_set_params_5>:
    }

    return success;
84200dfa:	3a 00       	r0 = r5 + Null;

84200dfc <Lc_aanc_opmsg_set_params_6>:
}
84200dfc:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
84200dfe:	d8 4c       	rts;

84200e00 <$_aanc_opmsg_get_status>:

bool aanc_opmsg_get_status(OPERATOR_DATA *op_data, void *message_data,
                           unsigned *resp_length,
                           OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200e00:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
84200e02:	59 4c       	SP = SP + 100;
84200e04:	19 09       	r7 = r1 + Null;
84200e06:	27 00       	r5 = r2 + Null;
84200e08:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200e0a:	ef fd fb ff 	call (m) 0x4e6;
84200e0e:	3d e6 
84200e10:	16 00       	r4 = r0 + Null;
    ParamType *pparam;
    ADAPTIVE_GAIN *p_ag;

    /* Build the response */
    if(!common_obpm_status_helper(message_data, resp_length, resp_data,
                                  sizeof(AANC_STATISTICS), &resp))
84200e12:	81 11       	rMAC = FP + 24;
84200e14:	09 1c       	pushm <rMAC>;
84200e16:	05 f0 60 40 	r3 = Null + 96;
84200e1a:	44 08       	r2 = r6 + Null;
84200e1c:	3b 00       	r1 = r5 + Null;
84200e1e:	4a 08       	r0 = r7 + Null;
84200e20:	ef fd fe ff 	call (m) 0xb64;
84200e24:	25 ea 
84200e26:	7f 4c       	SP = SP + -4;
84200e28:	10 04       	Null = r0 - Null;
84200e2a:	03 62       	if NE jump (m) Lc_aanc_opmsg_get_status_3;

84200e2c <Lc_aanc_opmsg_get_status_2>:
    {
         return FALSE;
84200e2c:	02 00       	r0 = Null + Null;
84200e2e:	8b 6e       	jump (m) Lc_aanc_opmsg_get_status_13;

84200e30 <Lc_aanc_opmsg_get_status_3>:
    }

    if (resp != NULL)
84200e30:	31 d8       	rMAC = M[FP + 24];
84200e32:	88 60       	if EQ jump (m) Lc_aanc_opmsg_get_status_12;

84200e34 <Lc_aanc_opmsg_get_status_4>:
    {
        p_fxlms = p_ext_data->ag->p_fxlms;
84200e34:	62 f0 72 88 	r0 = M[r4 + 456];
84200e38:	91 99       	rMAC = M[r0 + 56];
        p_ed_ext = p_ext_data->ag->p_ed_ext;
84200e3a:	57 98       	r5 = M[r0 + 36];
        p_ed_int = p_ext_data->ag->p_ed_int;
84200e3c:	28 f0 05 88 	r6 = M[r0 + 20];
        p_ed_pb = p_ext_data->ag->p_ed_pb;
84200e40:	29 f0 0c 88 	r7 = M[r0 + 48];

#ifdef USE_AANC_LICENSING
        p_ext_data->license_status = AANC_LICENSE_STATUS_LICENSING_BUILD_STATUS;
84200e44:	00 f1 02 f0 	r0 = Null + 268435456;
84200e48:	00 40 
84200e4a:	62 f0 7f 8e 	M[r4 + 508] = r0;
        if (p_fxlms->licensed)
84200e4e:	c8 a8       	Null = M[rMAC + 76];
84200e50:	06 60       	if EQ jump (m) Lc_aanc_opmsg_get_status_6;

84200e52 <Lc_aanc_opmsg_get_status_5>:
        {
            p_ext_data->license_status |= AANC_LICENSE_STATUS_FxLMS;
84200e52:	00 f1 02 f0 	r0 = Null + 268435458;
84200e56:	02 40 
84200e58:	62 f0 7f 8e 	M[r4 + 508] = r0;

84200e5c <Lc_aanc_opmsg_get_status_6>:
        }
        /* NB: License status won't be set if the block is disabled.
         * Given that all EDs use the same license check, OR a comparison
         * between them.
         */
        if (p_ed_ext->licensed || p_ed_int->licensed || p_ed_pb->licensed)
84200e5c:	38 a9       	Null = M[r5 + 80];
84200e5e:	07 62       	if NE jump (m) Lc_aanc_opmsg_get_status_9;

84200e60 <Lc_aanc_opmsg_get_status_7>:
84200e60:	80 f0 14 88 	Null = M[r6 + 80];
84200e64:	04 62       	if NE jump (m) Lc_aanc_opmsg_get_status_9;

84200e66 <Lc_aanc_opmsg_get_status_8>:
84200e66:	90 f0 14 88 	Null = M[r7 + 80];
84200e6a:	06 60       	if EQ jump (m) Lc_aanc_opmsg_get_status_10;

84200e6c <Lc_aanc_opmsg_get_status_9>:
        {
            p_ext_data->license_status |= AANC_LICENSE_STATUS_ED;
84200e6c:	62 f0 7f 88 	r0 = M[r4 + 508];
84200e70:	12 c8       	r0 = r0 OR 0x1;
84200e72:	62 f0 7f 8e 	M[r4 + 508] = r0;

84200e76 <Lc_aanc_opmsg_get_status_10>:
        }
#endif /* USE_AANC_LICENSING */

        stats.OFFSET_CUR_MODE = p_ext_data->cur_mode;
84200e76:	62 f0 69 88 	r0 = M[r4 + 420];
84200e7a:	3a de       	M[FP + 28] = r0;
        stats.OFFSET_OVR_CONTROL = p_ext_data->ovr_control;
84200e7c:	62 f0 6c 88 	r0 = M[r4 + 432];
84200e80:	42 de       	M[FP + 32] = r0;
        stats.OFFSET_IN_OUT_EAR_CTRL = p_ext_data->in_out_status;
84200e82:	62 f0 f8 83 	r0 = MBU[r4 + 504];
84200e86:	4a de       	M[FP + 36] = r0;
        stats.OFFSET_CHANNEL = p_ext_data->anc_channel;
84200e88:	62 f0 f0 81 	r0 = MBS[r4 + 496];
84200e8c:	52 de       	M[FP + 40] = r0;
        stats.OFFSET_FILTER_CONFIG = p_fxlms->configuration;
84200e8e:	0a a8       	r0 = M[rMAC + 64];
84200e90:	5a de       	M[FP + 44] = r0;
        stats.OFFSET_FEEDFORWARD_PATH = p_ext_data->anc_ff_path;
84200e92:	62 f0 f1 81 	r0 = MBS[r4 + 497];
84200e96:	62 de       	M[FP + 48] = r0;
        stats.OFFSET_LICENSE_STATUS = p_ext_data->license_status;
84200e98:	62 f0 7f 88 	r0 = M[r4 + 508];
84200e9c:	6a de       	M[FP + 52] = r0;
        stats.OFFSET_FLAGS = p_ext_data->flags;
84200e9e:	62 f0 6e 88 	r0 = M[r4 + 440];
84200ea2:	72 de       	M[FP + 56] = r0;
        stats.OFFSET_AG_CALC = p_fxlms->adaptive_gain;
84200ea4:	89 a8       	rMAC = M[rMAC + 72];
84200ea6:	79 de       	M[FP + 60] = rMAC;
        /* Send previous gain values as stats because these are only updated
         * when the value is actually written to HW.
         */
        stats.OFFSET_FF_FINE_GAIN_CTRL = p_ext_data->ff_gain_prev.fine;
84200ea8:	61 f0 ed 86 	rMAC = MHU[r4 + 474];
84200eac:	81 de       	M[FP + 64] = rMAC;
        stats.OFFSET_FF_COARSE_GAIN_CTRL = \
        p_ext_data->ff_gain_prev.coarse & AANC_COARSE_GAIN_MASK;
84200eae:	61 f0 ec 86 	rMAC = MHU[r4 + 472];
84200eb2:	89 c1       	rMAC = rMAC AND 0xf;
84200eb4:	89 de       	M[FP + 68] = rMAC;
        stats.OFFSET_FF_GAIN_DB = aanc_proc_calc_gain_db(
            p_ext_data->ff_gain_prev.fine,
            (int16)p_ext_data->ff_gain_prev.coarse);
84200eb6:	61 f0 ec 86 	rMAC = MHU[r4 + 472];
84200eba:	0b 0c       	r1 = SE16 rMAC;
84200ebc:	62 f0 ed 86 	r0 = MHU[r4 + 474];
84200ec0:	0c f0 29 e3 	call (m) $_aanc_proc_calc_gain_db;
84200ec4:	92 de       	M[FP + 72] = r0;
        stats.OFFSET_FB_FINE_GAIN_CTRL = p_ext_data->fb_gain_prev.fine;
84200ec6:	61 f0 ef 86 	rMAC = MHU[r4 + 478];
84200eca:	99 de       	M[FP + 76] = rMAC;
        stats.OFFSET_FB_COARSE_GAIN_CTRL = \
            p_ext_data->fb_gain_prev.coarse & AANC_COARSE_GAIN_MASK;
84200ecc:	61 f0 ee 86 	rMAC = MHU[r4 + 476];
84200ed0:	89 c1       	rMAC = rMAC AND 0xf;
84200ed2:	a1 de       	M[FP + 80] = rMAC;
        stats.OFFSET_FB_GAIN_DB = aanc_proc_calc_gain_db(
            p_ext_data->fb_gain_prev.fine,
            (int16)p_ext_data->fb_gain_prev.coarse);
84200ed4:	61 f0 ee 86 	rMAC = MHU[r4 + 476];
84200ed8:	0b 0c       	r1 = SE16 rMAC;
84200eda:	62 f0 ef 86 	r0 = MHU[r4 + 478];
84200ede:	0c f0 2b e2 	call (m) $_aanc_proc_calc_gain_db;
84200ee2:	aa de       	M[FP + 84] = r0;
        stats.OFFSET_EC_FINE_GAIN_CTRL = p_ext_data->ec_gain_prev.fine;
84200ee4:	61 f0 f1 86 	rMAC = MHU[r4 + 482];
84200ee8:	b1 de       	M[FP + 88] = rMAC;
        stats.OFFSET_EC_COARSE_GAIN_CTRL = \
            p_ext_data->ec_gain_prev.coarse & AANC_COARSE_GAIN_MASK;
84200eea:	61 f0 f0 86 	rMAC = MHU[r4 + 480];
84200eee:	89 c1       	rMAC = rMAC AND 0xf;
84200ef0:	b9 de       	M[FP + 92] = rMAC;
        stats.OFFSET_EC_GAIN_DB = aanc_proc_calc_gain_db(
            p_ext_data->ec_gain_prev.fine,
            (int16)p_ext_data->ec_gain_prev.coarse);
84200ef2:	61 f0 f0 86 	rMAC = MHU[r4 + 480];
84200ef6:	0b 0c       	r1 = SE16 rMAC;
84200ef8:	62 f0 f1 86 	r0 = MHU[r4 + 482];
84200efc:	0c f0 2d e1 	call (m) $_aanc_proc_calc_gain_db;
84200f00:	c2 de       	M[FP + 96] = r0;
        stats.OFFSET_SPL_EXT = p_ed_ext->spl;
84200f02:	39 a8       	rMAC = M[r5 + 64];
84200f04:	c9 de       	M[FP + 100] = rMAC;
        stats.OFFSET_SPL_INT = p_ed_int->spl;
84200f06:	81 f0 10 88 	rMAC = M[r6 + 64];
84200f0a:	d1 de       	M[FP + 104] = rMAC;
        stats.OFFSET_SPL_PB = p_ed_pb->spl;
84200f0c:	91 f0 10 88 	rMAC = M[r7 + 64];
84200f10:	d9 de       	M[FP + 108] = rMAC;
        /* Read and reset peak meters */
        p_ag = p_ext_data->ag;
84200f12:	61 f0 72 88 	rMAC = M[r4 + 456];
        stats.OFFSET_PEAK_EXT = p_ag->clip_ext.peak_value;
84200f16:	4a a8       	r0 = M[rMAC + 68];
84200f18:	e2 de       	M[FP + 112] = r0;
        p_ag->clip_ext.peak_value = 0;
84200f1a:	48 ae       	M[rMAC + 68] = Null;
        stats.OFFSET_PEAK_INT = p_ag->clip_int.peak_value;
84200f1c:	0a a9       	r0 = M[rMAC + 80];
84200f1e:	ea de       	M[FP + 116] = r0;
        p_ag->clip_int.peak_value = 0;
84200f20:	08 af       	M[rMAC + 80] = Null;
        stats.OFFSET_PEAK_PB = p_ag->clip_pb.peak_value;
84200f22:	ca a9       	r0 = M[rMAC + 92];
84200f24:	f2 de       	M[FP + 120] = r0;
        p_ag->clip_pb.peak_value = 0;
84200f26:	c8 af       	M[rMAC + 92] = Null;

        pparam = (ParamType*)(&stats);
        for (i=0; i<AANC_N_STAT/2; i++)
84200f28:	06 00       	r4 = Null + Null;
84200f2a:	c7 11       	r5 = FP + 28;

84200f2c <Lc_aanc_opmsg_get_status_11>:
        {
            resp = cpsPack2Words(pparam[2*i], pparam[2*i+1], resp);
84200f2c:	34 d8       	r2 = M[FP + 24];
84200f2e:	7b 88       	r1 = M[r5 + 4];
84200f30:	3a e8       	r0 = M[r5 + Null];
84200f32:	ff fd c6 f1 	call (m) 0x39caa;
84200f36:	39 eb 
84200f38:	32 de       	M[FP + 24] = r0;
        p_ag->clip_int.peak_value = 0;
        stats.OFFSET_PEAK_PB = p_ag->clip_pb.peak_value;
        p_ag->clip_pb.peak_value = 0;

        pparam = (ParamType*)(&stats);
        for (i=0; i<AANC_N_STAT/2; i++)
84200f3a:	76 20       	r4 = r4 + 1;
84200f3c:	3f 22       	r5 = r5 + 8;
84200f3e:	30 27       	Null = r4 - 12;
84200f40:	f6 69       	if LT jump (m) Lc_aanc_opmsg_get_status_11;

84200f42 <Lc_aanc_opmsg_get_status_12>:
        {
            cpsPack1Word(pparam[AANC_N_STAT-1], resp);
        }
    }

    return TRUE;
84200f42:	42 20       	r0 = Null + 1;

84200f44 <Lc_aanc_opmsg_get_status_13>:
}
84200f44:	67 4c       	SP = SP + -100;
84200f46:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
84200f48:	d8 4c       	rts;

84200f4a <$_aanc_opmsg_set_ucid>:
}

bool aanc_opmsg_set_ucid(OPERATOR_DATA *op_data, void *message_data,
                         unsigned *resp_length,
                         OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200f4a:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84200f4c:	12 09       	r8 = r0 + Null;
84200f4e:	19 09       	r7 = r1 + Null;
84200f50:	27 00       	r5 = r2 + Null;
84200f52:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200f54:	ef fd fa ff 	call (m) 0x4e6;
84200f58:	33 ec 
84200f5a:	16 00       	r4 = r0 + Null;
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    PS_KEY_TYPE key;
    bool success;

    success = cpsSetUcidMsgHandler(&p_ext_data->params_def, message_data,
                                  resp_length, resp_data);
84200f5c:	62 f0 00 22 	r0 = r4 + 512;
84200f60:	45 08       	r3 = r6 + Null;
84200f62:	3c 00       	r2 = r5 + Null;
84200f64:	4b 08       	r1 = r7 + Null;
84200f66:	ef fd fd ff 	call (m) 0x9a6;
84200f6a:	21 e2 
84200f6c:	17 00       	r5 = r0 + Null;
    L5_DBG_MSG1("AANC cpsSetUcidMsgHandler Return Value %u", success);
    key = MAP_CAPID_UCID_SBID_TO_PSKEYID(p_ext_data->cap_id,
                                         p_ext_data->params_def.ucid,
                                         OPMSG_P_STORE_PARAMETER_SUB_ID);
84200f6e:	b1 99       	rMAC = M[r4 + 56];
84200f70:	8a c6       	r0 = rMAC AND 0xffff;
84200f72:	92 55       	r0 = r0 LSHIFT 7;
84200f74:	61 f0 84 88 	rMAC = M[r4 + 528];
84200f78:	8b c2       	r1 = rMAC AND 0x3f;
84200f7a:	1b 54       	r1 = r1 LSHIFT 1;
84200f7c:	9b 12       	r1 = r1 OR r0;

    ps_entry_read((void*)op_data, key, PERSIST_ANY, ups_params_aanc);
84200f7e:	42 f0 05 f0 	r3 = Null + 69211435;
84200f82:	2b 69 
84200f84:	04 00       	r2 = Null + Null;
84200f86:	52 08       	r0 = r8 + Null;
84200f88:	ff fd 34 f0 	call (m) 0x7888;
84200f8c:	21 e8 

    L5_DBG_MSG1("AANC UCID Set to %u", p_ext_data->params_def.ucid);

    p_ext_data->re_init_flag = TRUE;
84200f8e:	41 20       	rMAC = Null + 1;
84200f90:	61 f0 f6 8b 	MB[r4 + 502] = rMAC;

    return success;
84200f94:	3a 00       	r0 = r5 + Null;

84200f96 <Lc_aanc_opmsg_set_ucid_2>:
}
84200f96:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84200f98:	d8 4c       	rts;

84200f9a <$_aanc_opmsg_get_ps_id>:

bool aanc_opmsg_get_ps_id(OPERATOR_DATA *op_data, void *message_data,
                          unsigned *resp_length,
                          OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200f9a:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200f9c:	1f 00       	r5 = r1 + Null;
84200f9e:	26 00       	r4 = r2 + Null;
84200fa0:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200fa2:	ef fd fa ff 	call (m) 0x4e6;
84200fa6:	25 ea 
                          unsigned *resp_length,
                          OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    return cpsGetUcidMsgHandler(&p_ext_data->params_def, p_ext_data->cap_id,
                                message_data, resp_length, resp_data);
84200fa8:	10 1c       	pushm <r6>;
84200faa:	93 99       	r1 = M[r0 + 56];
84200fac:	35 00       	r3 = r4 + Null;
84200fae:	02 f0 00 46 	r0 = r0 + 512;
84200fb2:	3c 00       	r2 = r5 + Null;
84200fb4:	ef fd fd ff 	call (m) 0x9c8;
84200fb8:	35 e0 
84200fba:	7f 4c       	SP = SP + -4;

84200fbc <Lc_aanc_opmsg_get_ps_id_2>:
}
84200fbc:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200fbe:	d8 4c       	rts;

84200fc0 <$_aanc_opmsg_set_static_gain>:
Custom opmsg handlers
*/
bool aanc_opmsg_set_static_gain(OPERATOR_DATA *op_data, void *message_data,
                                unsigned *resp_length,
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200fc0:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
84200fc2:	1e 00       	r4 = r1 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200fc4:	ef fd fa ff 	call (m) 0x4e6;
84200fc8:	23 e9 
84200fca:	17 00       	r5 = r0 + Null;

    uint16 coarse_gain, fine_gain;

    coarse_gain = OPMSG_FIELD_GET(message_data,
                                  OPMSG_SET_AANC_STATIC_GAIN,
                                  FF_COARSE_STATIC_GAIN);
84200fcc:	f1 88       	rMAC = M[r4 + 12];
84200fce:	18 f7 ff 1f 	r6 = rMAC AND 0xffff;
    fine_gain = OPMSG_FIELD_GET(message_data,
                                OPMSG_SET_AANC_STATIC_GAIN,
                                FF_FINE_STATIC_GAIN);
84200fd2:	31 89       	rMAC = M[r4 + 16];
84200fd4:	19 f7 ff 1f 	r7 = rMAC AND 0xffff;

    /* Add headroom for adaptive gain algorithm. If the fine gain is too
     * large, decrease it by 6dB and increment the coarse gain to compensate.
     */
    if (fine_gain > AANC_STATIC_GAIN_ADJUST_THRESHOLD)
84200fd8:	90 f0 80 24 	Null = r7 - 128;
84200fdc:	08 6c       	if LE jump (m) Lc_aanc_opmsg_set_static_gain_3;

84200fde <Lc_aanc_opmsg_set_static_gain_2>:
    {
        fine_gain = fine_gain >> 1;
84200fde:	7f f9 19 d9 	r7 = r7 ASHIFT -1;
        coarse_gain++;
84200fe2:	81 f0 01 20 	rMAC = r6 + 1;
84200fe6:	18 f7 ff 1f 	r6 = rMAC AND 0xffff;
84200fea:	0d 6e       	jump (m) Lc_aanc_opmsg_set_static_gain_5;

84200fec <Lc_aanc_opmsg_set_static_gain_3>:
    }
    else if (fine_gain < AANC_STATIC_GAIN_FAIL_THRESHOLD)
84200fec:	90 f0 40 24 	Null = r7 - 64;
84200ff0:	0a 66       	if GE jump (m) Lc_aanc_opmsg_set_static_gain_5;

84200ff2 <Lc_aanc_opmsg_set_static_gain_4>:
    {
        L0_DBG_MSG2("AANC FF static fine gain too low: %hu (< %hu)",
                    fine_gain, AANC_STATIC_GAIN_FAIL_THRESHOLD);
84200ff2:	04 f0 40 40 	r2 = Null + 64;
84200ff6:	55 f1 02 f0 	r0 = Null + 357564477;
84200ffa:	3d 40 
84200ffc:	4b 08       	r1 = r7 + Null;
84200ffe:	ef fd fe ff 	call (m) 0xcf2;
84201002:	35 e7 

84201004 <Lc_aanc_opmsg_set_static_gain_5>:
    }

    p_ext_data->ff_static_gain.coarse = coarse_gain;
84201004:	78 f0 f2 8c 	MH[r5 + 484] = r6;
    p_ext_data->ff_static_gain.fine = fine_gain;
84201008:	79 f0 f3 8c 	MH[r5 + 486] = r7;
    L4_DBG_MSG2("AANC Set FF Static Gain: Coarse = %hu, Fine = %hu",
        p_ext_data->ff_static_gain.coarse, p_ext_data->ff_static_gain.fine);

    p_ext_data->fb_static_gain.coarse = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, FB_COARSE_STATIC_GAIN);
8420100c:	71 89       	rMAC = M[r4 + 20];
8420100e:	71 f0 f4 8c 	MH[r5 + 488] = rMAC;
    p_ext_data->fb_static_gain.fine = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, FB_FINE_STATIC_GAIN);
84201012:	b1 89       	rMAC = M[r4 + 24];
84201014:	71 f0 f5 8c 	MH[r5 + 490] = rMAC;
    L4_DBG_MSG2("AANC Set FB Static Gain: Coarse = %hu, Fine = %hu",
        p_ext_data->fb_static_gain.coarse, p_ext_data->fb_static_gain.fine);

    p_ext_data->ec_static_gain.coarse = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, EC_COARSE_STATIC_GAIN);
84201018:	f1 89       	rMAC = M[r4 + 28];
8420101a:	71 f0 f6 8c 	MH[r5 + 492] = rMAC;
    p_ext_data->ec_static_gain.fine = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, EC_FINE_STATIC_GAIN);
8420101e:	31 98       	rMAC = M[r4 + 32];
84201020:	71 f0 f7 8c 	MH[r5 + 494] = rMAC;
    L4_DBG_MSG2("AANC Set EC Static Gain: Coarse = %hu, Fine = %hu",
        p_ext_data->ec_static_gain.coarse, p_ext_data->ec_static_gain.fine);
    p_ext_data->flags |= AANC_FLAGS_STATIC_GAIN_LOADED;
84201024:	71 f0 6e 88 	rMAC = M[r5 + 440];
84201028:	c9 ce       	rMAC = rMAC OR 0x10000;
8420102a:	71 f0 6e 8e 	M[r5 + 440] = rMAC;

    /* Allow a direct gain update if the sysmode is static without requiring
     * a follow-up gain override
     */
    if (p_ext_data->cur_mode == AANC_SYSMODE_STATIC)
8420102e:	71 f0 69 88 	rMAC = M[r5 + 420];
84201032:	c8 24       	Null = rMAC - 3;
84201034:	19 62       	if NE jump (m) Lc_aanc_opmsg_set_static_gain_7;

84201036 <Lc_aanc_opmsg_set_static_gain_6>:
    {
        p_ext_data->ff_gain = p_ext_data->ff_static_gain;
84201036:	71 f0 f2 86 	rMAC = MHU[r5 + 484];
8420103a:	72 f0 f3 86 	r0 = MHU[r5 + 486];
8420103e:	71 f0 e6 8c 	MH[r5 + 460] = rMAC;
84201042:	72 f0 e7 8c 	MH[r5 + 462] = r0;
        p_ext_data->fb_gain = p_ext_data->fb_static_gain;
84201046:	71 f0 f4 86 	rMAC = MHU[r5 + 488];
8420104a:	72 f0 f5 86 	r0 = MHU[r5 + 490];
8420104e:	71 f0 e8 8c 	MH[r5 + 464] = rMAC;
84201052:	72 f0 e9 8c 	MH[r5 + 466] = r0;
        p_ext_data->ec_gain = p_ext_data->ec_static_gain;
84201056:	71 f0 f6 86 	rMAC = MHU[r5 + 492];
8420105a:	72 f0 f7 86 	r0 = MHU[r5 + 494];
8420105e:	71 f0 ea 8c 	MH[r5 + 468] = rMAC;
84201062:	72 f0 eb 8c 	MH[r5 + 470] = r0;

84201066 <Lc_aanc_opmsg_set_static_gain_7>:
    }

    return TRUE;
84201066:	42 20       	r0 = Null + 1;

84201068 <Lc_aanc_opmsg_set_static_gain_8>:
}
84201068:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
8420106a:	d8 4c       	rts;

8420106c <$_aanc_opmsg_set_plant_model>:

bool aanc_opmsg_set_plant_model(OPERATOR_DATA *op_data, void *message_data,
                                unsigned *resp_length,
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
8420106c:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
8420106e:	1e 00       	r4 = r1 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84201070:	ef fd fa ff 	call (m) 0x4e6;
84201074:	37 e3 
84201076:	17 00       	r5 = r0 + Null;
                                unsigned *resp_length,
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    if (!aanc_fxlms100_set_plant_model(p_ext_data->ag->p_fxlms, message_data))
84201078:	71 f0 72 88 	rMAC = M[r5 + 456];
8420107c:	8a 99       	r0 = M[rMAC + 56];
8420107e:	33 00       	r1 = r4 + Null;
84201080:	0c f0 27 e6 	call (m) $_aanc_fxlms100_set_plant_model;
84201084:	10 04       	Null = r0 - Null;
84201086:	03 62       	if NE jump (m) Lc_aanc_opmsg_set_plant_model_3;

84201088 <Lc_aanc_opmsg_set_plant_model_2>:
    {
        L4_DBG_MSG("AANC set plant coefficients failed");
        return FALSE;
84201088:	02 00       	r0 = Null + Null;
8420108a:	09 6e       	jump (m) Lc_aanc_opmsg_set_plant_model_4;

8420108c <Lc_aanc_opmsg_set_plant_model_3>:
    }

    p_ext_data->flags |= AANC_FLAGS_PLANT_MODEL_LOADED;
8420108c:	71 f0 6e 88 	rMAC = M[r5 + 440];
84201090:	00 f2 00 f1 	rMAC = rMAC OR 0x20000;
84201094:	51 d8 
84201096:	71 f0 6e 8e 	M[r5 + 440] = rMAC;

    return TRUE;
8420109a:	42 20       	r0 = Null + 1;

8420109c <Lc_aanc_opmsg_set_plant_model_4>:
}
8420109c:	f2 48       	popm <FP, r4, r5, rLink>;
8420109e:	d8 4c       	rts;

842010a0 <$_aanc_opmsg_set_control_model>:

bool aanc_opmsg_set_control_model(OPERATOR_DATA *op_data,
                                  void *message_data,
                                  unsigned *resp_length,
                                  OP_OPMSG_RSP_PAYLOAD **resp_data)
{
842010a0:	f2 1d       	pushm <FP(=SP), r4, r5, rLink>, SP = SP + 0x10;
842010a2:	1e 00       	r4 = r1 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
842010a4:	ef fd fa ff 	call (m) 0x4e6;
842010a8:	23 e2 
842010aa:	17 00       	r5 = r0 + Null;
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    int destination;

    if (!aanc_fxlms100_set_control_model(p_ext_data->ag->p_fxlms, message_data,
                                         &destination))
842010ac:	04 11       	r2 = FP + 16;
842010ae:	71 f0 72 88 	rMAC = M[r5 + 456];
842010b2:	8a 99       	r0 = M[rMAC + 56];
842010b4:	33 00       	r1 = r4 + Null;
842010b6:	0c f0 37 e6 	call (m) $_aanc_fxlms100_set_control_model;
842010ba:	10 04       	Null = r0 - Null;
842010bc:	03 62       	if NE jump (m) Lc_aanc_opmsg_set_control_model_3;

842010be <Lc_aanc_opmsg_set_control_model_2>:
    {
        L4_DBG_MSG("AANC set control coefficients failed");
        return FALSE;
842010be:	02 00       	r0 = Null + Null;
842010c0:	17 6e       	jump (m) Lc_aanc_opmsg_set_control_model_7;

842010c2 <Lc_aanc_opmsg_set_control_model_3>:
    }

    if (destination)
842010c2:	20 d8       	Null = M[FP + 16];
842010c4:	0a 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_model_5;

842010c6 <Lc_aanc_opmsg_set_control_model_4>:
    {
        p_ext_data->flags |= AANC_FLAGS_CONTROL_1_MODEL_LOADED;
842010c6:	71 f0 6e 88 	rMAC = M[r5 + 440];
842010ca:	00 f0 00 f8 	rMAC = rMAC OR 0x80000;
842010ce:	00 f1 51 c8 
842010d2:	71 f0 6e 8e 	M[r5 + 440] = rMAC;
842010d6:	08 6e       	jump (m) Lc_aanc_opmsg_set_control_model_6;

842010d8 <Lc_aanc_opmsg_set_control_model_5>:
    }
    else
    {
        p_ext_data->flags |= AANC_FLAGS_CONTROL_0_MODEL_LOADED;
842010d8:	71 f0 6e 88 	rMAC = M[r5 + 440];
842010dc:	00 f4 00 f1 	rMAC = rMAC OR 0x40000;
842010e0:	51 d8 
842010e2:	71 f0 6e 8e 	M[r5 + 440] = rMAC;

842010e6 <Lc_aanc_opmsg_set_control_model_6>:
    }

    p_ext_data->re_init_flag = TRUE;
842010e6:	41 20       	rMAC = Null + 1;
842010e8:	71 f0 f6 8b 	MB[r5 + 502] = rMAC;

    return TRUE;
842010ec:	0a 00       	r0 = rMAC + Null;

842010ee <Lc_aanc_opmsg_set_control_model_7>:
}
842010ee:	f2 49       	SP = SP - 0x10, popm <FP, r4, r5, rLink>;
842010f0:	d8 4c       	rts;

842010f2 <$_aanc_process_data>:

/****************************************************************************
Data processing function
*/
void aanc_process_data(OPERATOR_DATA *op_data, TOUCHED_TERMINALS *touched)
{
842010f2:	f6 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>;
842010f4:	4c 4c       	SP = SP + 48;
842010f6:	42 de       	M[FP + 32] = r0;
842010f8:	4b de       	M[FP + 36] = r1;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
842010fa:	ef fd f9 ff 	call (m) 0x4e6;
842010fe:	2d ef 
84201100:	11 09       	r7 = r0 + Null;
    unsigned initial_value;

    /* Certain conditions require an "early exit" that will just discard any
     * data in the input buffers and not do any other processing
     */
    bool exit_early = FALSE;
84201102:	50 de       	M[FP + 40] = Null;

    /* After data is processed flags are tested to determine the equivalent
     * operating state. This is an input to the gain update decision state
     * machine.
     */
    unsigned mode_after_flags = p_ext_data->cur_mode;
84201104:	9b f0 69 88 	r9 = M[r7 + 420];

    /* Reference the calculated gain */
    unsigned *p_gain_calc = &p_ext_data->ag->p_fxlms->adaptive_gain;
84201108:	91 f0 72 88 	rMAC = M[r7 + 456];
8420110c:	89 99       	rMAC = M[rMAC + 56];
8420110e:	01 f0 48 44 	rMAC = rMAC + 72;
84201112:	59 de       	M[FP + 44] = rMAC;

    /* Reference the capability parameters */
    AANC_PARAMETERS *p_params = &p_ext_data->aanc_cap_params;
84201114:	91 f0 3c 20 	rMAC = r7 + 60;
84201118:	61 de       	M[FP + 48] = rMAC;

    bool calculate_gain = TRUE;
8420111a:	41 20       	rMAC = Null + 1;
8420111c:	69 de       	M[FP + 52] = rMAC;
static inline int aanc_calc_samples_to_process(AANC_OP_DATA *p_ext_data)
{
    int i, amt, min_data_space;

    /* Return if int and ext mic input terminals are not connected */
    if ((p_ext_data->touched_sinks & AANC_MIN_VALID_SINKS) != AANC_MIN_VALID_SINKS)
8420111e:	91 f0 da 86 	rMAC = MHU[r7 + 436];
84201122:	11 f0 0c 00 	rMAC = rMAC AND 0xc;
84201126:	08 27       	Null = rMAC - 12;
84201128:	01 f0 fd e7 	if NE jump (m) Lc_aanc_process_data_104;

8420112c <Lc_aanc_process_data_2>:
    {
        return INT_MAX;
    }

    min_data_space = AANC_DEFAULT_FRAME_SIZE;
8420112c:	06 f0 40 40 	r4 = Null + 64;
    /* Calculate the amount of data available */
    for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
84201130:	07 00       	r5 = Null + Null;
84201132:	48 09       	r6 = r7 + Null;

84201134 <Lc_aanc_process_data_3>:
    {
        if (p_ext_data->inputs[i] != NULL)
84201134:	82 f0 00 e8 	r0 = M[r6 + Null];
84201138:	07 60       	if EQ jump (m) Lc_aanc_process_data_6;

8420113a <Lc_aanc_process_data_4>:
        {
            amt = cbuffer_calc_amount_data_in_words(p_ext_data->inputs[i]);
8420113a:	ff fd c6 f1 	call (m) 0x39dd4;
8420113e:	3b e4 
            if (amt < min_data_space)
84201140:	90 05       	Null = r0 - r4;
84201142:	02 66       	if GE jump (m) Lc_aanc_process_data_6;

84201144 <Lc_aanc_process_data_5>:
            {
                min_data_space = amt;
84201144:	16 00       	r4 = r0 + Null;

84201146 <Lc_aanc_process_data_6>:
        return INT_MAX;
    }

    min_data_space = AANC_DEFAULT_FRAME_SIZE;
    /* Calculate the amount of data available */
    for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
84201146:	7f 20       	r5 = r5 + 1;
84201148:	20 75       	r6 = r6 + 4;
8420114a:	f8 24       	Null = r5 - 3;
8420114c:	f4 6d       	if LE jump (m) Lc_aanc_process_data_3;

8420114e <Lc_aanc_process_data_7>:
            }
        }
    }

    /*  Calculate the available space */
    if (p_ext_data->touched_sources != 0)
8420114e:	91 f0 db 86 	rMAC = MHU[r7 + 438];
84201152:	11 60       	if EQ jump (m) Lc_aanc_process_data_13;

84201154 <Lc_aanc_process_data_8>:
    {
        for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
84201154:	07 00       	r5 = Null + Null;
84201156:	98 f0 10 20 	r6 = r7 + 16;

8420115a <Lc_aanc_process_data_9>:
        {
            if (p_ext_data->outputs[i] != NULL)
8420115a:	82 f0 00 e8 	r0 = M[r6 + Null];
8420115e:	07 60       	if EQ jump (m) Lc_aanc_process_data_12;

84201160 <Lc_aanc_process_data_10>:
            {
                amt = cbuffer_calc_amount_space_in_words(p_ext_data->outputs[i]);
84201160:	ff fd c6 f1 	call (m) 0x39d88;
84201164:	29 e1 
                if (amt < min_data_space)
84201166:	90 05       	Null = r0 - r4;
84201168:	02 66       	if GE jump (m) Lc_aanc_process_data_12;

8420116a <Lc_aanc_process_data_11>:
                {
                    min_data_space = amt;
8420116a:	16 00       	r4 = r0 + Null;

8420116c <Lc_aanc_process_data_12>:
    }

    /*  Calculate the available space */
    if (p_ext_data->touched_sources != 0)
    {
        for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
8420116c:	7f 20       	r5 = r5 + 1;
8420116e:	20 75       	r6 = r6 + 4;
84201170:	f8 24       	Null = r5 - 3;
84201172:	f4 6d       	if LE jump (m) Lc_aanc_process_data_9;

84201174 <Lc_aanc_process_data_13>:
            }
        }
    }
    /* Samples to process determined as minimum of data and space available */
    return min_data_space;
}
84201174:	37 00       	r5 = r4 + Null;
        L5_DBG_MSG("Minimum number of ports (int and ext mic) not connected");
        return;
    }

     /* Return early if no data or not enough space to process */
    if (samples_to_process < AANC_DEFAULT_FRAME_SIZE)
84201176:	60 f0 40 24 	Null = r4 - 64;
8420117a:	0b f0 ab e7 	if LT jump (m) Lc_aanc_process_data_104;

8420117e <Lc_aanc_process_data_14>:
    /* Other conditions that are invalid for running AANC need to discard
     * input data if it exists.
     */

    /* Don't do any processing in standby */
    if (p_ext_data->cur_mode == AANC_SYSMODE_STANDBY)
8420117e:	90 f0 69 88 	Null = M[r7 + 420];
84201182:	03 62       	if NE jump (m) Lc_aanc_process_data_16;

84201184 <Lc_aanc_process_data_15>:
    {
        exit_early = TRUE;
84201184:	41 20       	rMAC = Null + 1;
84201186:	51 de       	M[FP + 40] = rMAC;

84201188 <Lc_aanc_process_data_16>:
    }

    /* Don't do any processing if out of ear */
    bool disable_ear_check = (p_params->OFFSET_AANC_DEBUG &
                              AANC_CONFIG_AANC_DEBUG_DISABLE_EAR_STATUS_CHECK);
84201188:	61 d8       	rMAC = M[FP + 48];
8420118a:	49 89       	rMAC = M[rMAC + 20];
8420118c:	49 c0       	rMAC = rMAC AND 0x2;
    if ((p_ext_data->in_out_status != AANC_IN_EAR) && !disable_ear_check)
8420118e:	92 f0 f8 83 	r0 = MBU[r7 + 504];
84201192:	50 24       	Null = r0 - 1;
84201194:	05 60       	if EQ jump (m) Lc_aanc_process_data_19;

84201196 <Lc_aanc_process_data_17>:
84201196:	08 04       	Null = rMAC - Null;
84201198:	03 62       	if NE jump (m) Lc_aanc_process_data_19;

8420119a <Lc_aanc_process_data_18>:
    {
        exit_early = TRUE;
8420119a:	41 20       	rMAC = Null + 1;
8420119c:	51 de       	M[FP + 40] = rMAC;

8420119e <Lc_aanc_process_data_19>:

    /* Don't do any processing if ANC HW clocks are invalid */
#ifndef RUNNING_ON_KALSIM
    uint16 anc0_enable;
    uint16 anc1_enable;
    uint16 *anc_selected = &anc0_enable;
8420119e:	06 14       	r4 = FP + 64;

    stream_get_anc_enable(&anc0_enable, &anc1_enable);
842011a0:	43 14       	r1 = FP + 68;
842011a2:	02 14       	r0 = FP + 64;
842011a4:	ff fd 58 f0 	call (m) 0xc1c2;
842011a8:	3f e0 

    if (p_ext_data->anc_channel == AANC_ANC_INSTANCE_ANC1_ID)
842011aa:	91 f0 f0 81 	rMAC = MBS[r7 + 496];
842011ae:	88 24       	Null = rMAC - 2;
842011b0:	02 62       	if NE jump (m) Lc_aanc_process_data_21;

842011b2 <Lc_aanc_process_data_20>:
    {
        anc_selected = &anc1_enable;
842011b2:	46 14       	r4 = FP + 68;

842011b4 <Lc_aanc_process_data_21>:
    }

    bool anc_is_running = *anc_selected == p_ext_data->anc_clock_check_value;
842011b4:	33 e6       	r1 = MHU[r4 + Null];
842011b6:	92 f0 fa 86 	r0 = MHU[r7 + 500];
842011ba:	01 00       	rMAC = Null + Null;
842011bc:	98 04       	Null = r1 - r0;
842011be:	20 f0 41 ce 	if EQ rMAC = Null + 1;
    bool disable_clock_check = (p_params->OFFSET_AANC_DEBUG &
                                AANC_CONFIG_AANC_DEBUG_DISABLE_ANC_CLOCK_CHECK);
842011c2:	62 d8       	r0 = M[FP + 48];
842011c4:	52 89       	r0 = M[r0 + 20];
842011c6:	d2 c0       	r0 = r0 AND 0x4;
    /* Don't do any processing if HW clocks aren't running */
    if (!anc_is_running && !disable_clock_check)
842011c8:	08 04       	Null = rMAC - Null;
842011ca:	3b 62       	if NE jump (m) Lc_aanc_process_data_35;

842011cc <Lc_aanc_process_data_22>:
842011cc:	10 04       	Null = r0 - Null;
842011ce:	39 62       	if NE jump (m) Lc_aanc_process_data_35;

842011d0 <Lc_aanc_process_data_23>:
    {
        L2_DBG_MSG1("AANC invalid clocks detected: %hu", *anc_selected);
842011d0:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842011d4:	88 24       	Null = rMAC - 2;
842011d6:	07 68       	if LT jump (m) Lc_aanc_process_data_25;

842011d8 <Lc_aanc_process_data_24>:
842011d8:	55 f1 02 f0 	r0 = Null + 357564523;
842011dc:	6b 40 
842011de:	ef fd fd ff 	call (m) 0xcde;
842011e2:	21 e8 

842011e4 <Lc_aanc_process_data_25>:
        exit_early = TRUE;
    }
#endif

    sample_count = 0;
842011e4:	02 09       	r8 = Null + Null;

842011e6 <Lc_aanc_process_data_26>:
    if (exit_early)
    {
        bool discard_data = TRUE;
842011e6:	08 71       	r6 = Null + 1;

842011e8 <Lc_aanc_process_data_27>:

        /* There is at least 1 frame to process */
        do {
            sample_count += AANC_DEFAULT_FRAME_SIZE;
842011e8:	0a f0 40 44 	r8 = r8 + 64;
            /* Iterate through all sinks */
            for (i = 0; i < AANC_MAX_SINKS; i++)
842011ec:	06 00       	r4 = Null + Null;
842011ee:	4f 08       	r5 = r7 + Null;

842011f0 <Lc_aanc_process_data_28>:
            {
                if (p_ext_data->inputs[i] != NULL)
842011f0:	3a e8       	r0 = M[r5 + Null];
842011f2:	0e 60       	if EQ jump (m) Lc_aanc_process_data_31;

842011f4 <Lc_aanc_process_data_29>:
                {
                    /* Discard a frame of data */
                    cbuffer_discard_data(p_ext_data->inputs[i],
                                         AANC_DEFAULT_FRAME_SIZE);
842011f4:	03 f0 40 40 	r1 = Null + 64;
842011f8:	ff fd c6 f1 	call (m) 0x39f54;
842011fc:	3d ea 

                    /* If there isn't a frame worth of data left then don't
                     * iterate through the input terminals again.
                     */
                    samples_to_process = cbuffer_calc_amount_data_in_words(
                        p_ext_data->inputs[i]);
842011fe:	3a e8       	r0 = M[r5 + Null];
84201200:	ff fd c5 f1 	call (m) 0x39dd4;
84201204:	35 ee 

                    if (samples_to_process < AANC_DEFAULT_FRAME_SIZE)
84201206:	20 f0 40 24 	Null = r0 - 64;
8420120a:	02 66       	if GE jump (m) Lc_aanc_process_data_31;

8420120c <Lc_aanc_process_data_30>:
                    {
                        discard_data = FALSE;
8420120c:	00 09       	r6 = Null + Null;

8420120e <Lc_aanc_process_data_31>:

        /* There is at least 1 frame to process */
        do {
            sample_count += AANC_DEFAULT_FRAME_SIZE;
            /* Iterate through all sinks */
            for (i = 0; i < AANC_MAX_SINKS; i++)
8420120e:	76 20       	r4 = r4 + 1;
84201210:	3f 21       	r5 = r5 + 4;
84201212:	30 25       	Null = r4 - 4;
84201214:	ee 69       	if LT jump (m) Lc_aanc_process_data_28;

84201216 <Lc_aanc_process_data_32>:
84201216:	0f f8 00 c2 	Null = r6 - Null;
8420121a:	e7 63       	if NE jump (m) Lc_aanc_process_data_27;

8420121c <Lc_aanc_process_data_33>:
8420121c:	01 fa d7 c8 	r5 = r8 LSHIFT 2;
                        discard_data = FALSE;
                    }
                }
            }
        } while (discard_data);
        for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
84201220:	06 00       	r4 = Null + Null;
84201222:	98 f0 20 20 	r6 = r7 + 32;

84201226 <Lc_aanc_process_data_34>:
        {
            /* Input is discarded, so consume and delete incoming metadata tags
               This can be done by transporting input metadata to NULL ptr */
            metadata_strict_transport(p_ext_data->metadata_ip[i],
                                      NULL,
                                      sample_count * OCTETS_PER_SAMPLE);
84201226:	82 f0 00 e8 	r0 = M[r6 + Null];
8420122a:	03 00       	r1 = Null + Null;
8420122c:	3c 00       	r2 = r5 + Null;
8420122e:	ff fd 9d f0 	call (m) 0x14c88;
84201232:	3b e2 
                        discard_data = FALSE;
                    }
                }
            }
        } while (discard_data);
        for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
84201234:	76 20       	r4 = r4 + 1;
84201236:	20 75       	r6 = r6 + 4;
84201238:	b0 24       	Null = r4 - 2;
8420123a:	f6 69       	if LT jump (m) Lc_aanc_process_data_34;

8420123c <Lc__ite_8>:
8420123c:	0f f0 e9 e5 	jump (m) Lc_aanc_process_data_104;

84201240 <Lc_aanc_process_data_35>:
        L2_DBG_MSG1("AANC invalid clocks detected: %hu", *anc_selected);
        exit_early = TRUE;
    }
#endif

    sample_count = 0;
84201240:	02 09       	r8 = Null + Null;
    if (exit_early)
84201242:	51 d8       	rMAC = M[FP + 40];
84201244:	d1 63       	if NE jump (m) Lc_aanc_process_data_26;

84201246 <Lc_aanc_process_data_36>:

    /***************************
     * Adaptive gain processing
     ***************************/

    if (p_ext_data->re_init_flag == TRUE)
84201246:	91 f0 f6 83 	rMAC = MBU[r7 + 502];
8420124a:	48 24       	Null = rMAC - 1;
8420124c:	33 62       	if NE jump (m) Lc_aanc_process_data_38;

8420124e <Lc_aanc_process_data_37>:
    {
        ADAPTIVE_GAIN *p_ag = p_ext_data->ag;
8420124e:	96 f0 72 88 	r4 = M[r7 + 456];
        p_ext_data->re_init_flag = FALSE;
84201252:	90 f0 f6 8b 	MB[r7 + 502] = Null;

        /* Copy terminal buffer pointers */
        p_ag->p_playback_ip = p_ext_data->inputs[AANC_PLAYBACK_TERMINAL_ID];
84201256:	91 f0 00 e8 	rMAC = M[r7 + Null];
8420125a:	61 f0 21 8e 	M[r4 + 132] = rMAC;
        p_ag->p_fbmon_ip = p_ext_data->inputs[AANC_FB_MON_TERMINAL_ID];
8420125e:	91 f0 01 88 	rMAC = M[r7 + 4];
84201262:	b1 bf       	M[r4 + 120] = rMAC;
        p_ag->p_mic_int_ip = p_ext_data->inputs[AANC_MIC_INT_TERMINAL_ID];
84201264:	91 f0 02 88 	rMAC = M[r7 + 8];
84201268:	f1 bf       	M[r4 + 124] = rMAC;
        p_ag->p_mic_ext_ip = p_ext_data->inputs[AANC_MIC_EXT_TERMINAL_ID];
8420126a:	91 f0 03 88 	rMAC = M[r7 + 12];
8420126e:	61 f0 20 8e 	M[r4 + 128] = rMAC;

        p_ag->p_playback_op = p_ext_data->outputs[AANC_PLAYBACK_TERMINAL_ID];
84201272:	91 f0 04 88 	rMAC = M[r7 + 16];
84201276:	71 bf       	M[r4 + 116] = rMAC;
        p_ag->p_fbmon_op = p_ext_data->outputs[AANC_FB_MON_TERMINAL_ID];
84201278:	91 f0 05 88 	rMAC = M[r7 + 20];
8420127c:	61 f0 22 8e 	M[r4 + 136] = rMAC;
        p_ag->p_mic_int_op = p_ext_data->outputs[AANC_MIC_INT_TERMINAL_ID];
84201280:	91 f0 06 88 	rMAC = M[r7 + 24];
84201284:	61 f0 23 8e 	M[r4 + 140] = rMAC;
        p_ag->p_mic_ext_op = p_ext_data->outputs[AANC_MIC_EXT_TERMINAL_ID];
84201288:	91 f0 07 88 	rMAC = M[r7 + 28];
8420128c:	61 f0 24 8e 	M[r4 + 144] = rMAC;

        aanc_initialize_events(op_data, p_ext_data);
84201290:	4b 08       	r1 = r7 + Null;
84201292:	42 d8       	r0 = M[FP + 32];
84201294:	02 f0 29 ea 	call (m) Lc_aanc_initialize_events_1;

        aanc_proc_initialize(p_params, p_ag, p_params->OFFSET_FXLMS_INITIAL_VALUE,
                             &p_ext_data->flags, p_ext_data->re_init_hard);
84201298:	91 f0 f7 83 	rMAC = MBU[r7 + 503];
8420129c:	09 1c       	pushm <rMAC>;
8420129e:	95 f0 b8 21 	r3 = r7 + 440;
842012a2:	61 d8       	rMAC = M[FP + 48];
842012a4:	0a 00       	r0 = rMAC + Null;
842012a6:	14 f0 46 88 	r2 = M[rMAC + 280];
842012aa:	33 00       	r1 = r4 + Null;
842012ac:	06 f0 3d e9 	call (m) $_aanc_proc_initialize;
842012b0:	7f 4c       	SP = SP + -4;

842012b2 <Lc_aanc_process_data_38>:
    }

    /* Identify whether to do the gain calculation step */
    if ((p_params->OFFSET_DISABLE_AG_CALC & 0x1) ||
        (p_ext_data->cur_mode != AANC_SYSMODE_FULL) ||
        (p_ext_data->frames_to_freez > 0))
842012b2:	61 d8       	rMAC = M[FP + 48];
842012b4:	49 88       	rMAC = M[rMAC + 4];
842012b6:	09 c0       	rMAC = rMAC AND 0x1;
842012b8:	09 62       	if NE jump (m) Lc_aanc_process_data_41;

842012ba <Lc_aanc_process_data_39>:
842012ba:	91 f0 69 88 	rMAC = M[r7 + 420];
842012be:	88 24       	Null = rMAC - 2;
842012c0:	05 62       	if NE jump (m) Lc_aanc_process_data_41;

842012c2 <Lc_aanc_process_data_40>:
842012c2:	91 f0 5c 87 	rMAC = MHU[r7 + 696];
842012c6:	08 24       	Null = rMAC - 0;
842012c8:	02 6c       	if LE jump (m) Lc_aanc_process_data_42;

842012ca <Lc_aanc_process_data_41>:
    {
        calculate_gain = FALSE;
842012ca:	68 de       	M[FP + 52] = Null;

842012cc <Lc_aanc_process_data_42>:
842012cc:	41 20       	rMAC = Null + 1;
842012ce:	71 de       	M[FP + 56] = rMAC;
842012d0:	81 20       	rMAC = Null + 2;
842012d2:	79 de       	M[FP + 60] = rMAC;
    }

    sample_count = 0;
842012d4:	02 09       	r8 = Null + Null;
842012d6:	1b 6e       	jump (m) Lc_aanc_process_data_48;

842012d8 <Lc_aanc_process_data_43>:
                }
            }
            else
            {
                /* Revert Mu to default */
                p_ext_data->ag->p_fxlms->mu = p_ext_data->aanc_cap_params.OFFSET_MU;
842012d8:	91 f0 11 88 	rMAC = M[r7 + 68];
842012dc:	92 f0 72 88 	r0 = M[r7 + 456];
842012e0:	92 99       	r0 = M[r0 + 56];
842012e2:	d1 8f       	M[r0 + 28] = rMAC;
                p_ext_data->cont_gain_drop_cnt = 0;           
842012e4:	90 f0 5d 8d 	MH[r7 + 698] = Null;

842012e8 <Lc_aanc_process_data_44>:
            }
        }

        /* Clear Frames to freeze if there is change in ANC mode */
        if(p_ext_data->cur_mode != AANC_SYSMODE_FULL)
842012e8:	91 f0 69 88 	rMAC = M[r7 + 420];
842012ec:	88 24       	Null = rMAC - 2;
842012ee:	03 60       	if EQ jump (m) Lc_aanc_process_data_46;

842012f0 <Lc_aanc_process_data_45>:
        {
            p_ext_data->frames_to_freez = 0;
842012f0:	90 f0 5c 8d 	MH[r7 + 696] = Null;

842012f4 <Lc_aanc_process_data_46>:
        }

        /* Evaluate event messaging criteria */
        if (!(p_params->OFFSET_AANC_DEBUG &
            AANC_CONFIG_AANC_DEBUG_DISABLE_EVENT_MESSAGING))
842012f4:	61 d8       	rMAC = M[FP + 48];
842012f6:	49 89       	rMAC = M[rMAC + 20];
842012f8:	49 c1       	rMAC = rMAC AND 0x8;
842012fa:	09 62       	if NE jump (m) Lc_aanc_process_data_48;

842012fc <Lc_aanc_process_data_47>:
        {
            aanc_process_events(op_data, p_ext_data);
842012fc:	4b 08       	r1 = r7 + Null;
842012fe:	42 d8       	r0 = M[FP + 32];
84201300:	02 f0 39 ef 	call (m) Lc_aanc_process_events_1;
            p_ext_data->prev_flags = p_ext_data->flags;
84201304:	91 f0 6e 88 	rMAC = M[r7 + 440];
84201308:	91 f0 6f 8e 	M[r7 + 444] = rMAC;

8420130c <Lc_aanc_process_data_48>:

    sample_count = 0;
    /* Consume all the data in the input buffer, or until there isn't space
     * available.
     */
    while (samples_to_process >= AANC_DEFAULT_FRAME_SIZE)
8420130c:	70 f0 40 24 	Null = r5 - 64;
84201310:	ec 68       	if LT jump (m) Lc_aanc_process_data_99;

84201312 <Lc_aanc_process_data_49>:
    {
        aanc_proc_process_data(p_ext_data->ag, calculate_gain);
84201312:	92 f0 72 88 	r0 = M[r7 + 456];
84201316:	6b d8       	r1 = M[FP + 52];
84201318:	08 f0 3b e0 	call (m) $_aanc_proc_process_data;
static inline int aanc_calc_samples_to_process(AANC_OP_DATA *p_ext_data)
{
    int i, amt, min_data_space;

    /* Return if int and ext mic input terminals are not connected */
    if ((p_ext_data->touched_sinks & AANC_MIN_VALID_SINKS) != AANC_MIN_VALID_SINKS)
8420131c:	91 f0 da 86 	rMAC = MHU[r7 + 436];
84201320:	11 f0 0c 00 	rMAC = rMAC AND 0xc;
84201324:	08 27       	Null = rMAC - 12;
84201326:	05 60       	if EQ jump (m) Lc_aanc_process_data_51;

84201328 <Lc_aanc_process_data_50>:
    {
        return INT_MAX;
84201328:	ff f7 f6 f7 	r4 = Null + 2147483647;
8420132c:	ff 7b 
8420132e:	25 6e       	jump (m) Lc_aanc_process_data_62;

84201330 <Lc_aanc_process_data_51>:
    }

    min_data_space = AANC_DEFAULT_FRAME_SIZE;
84201330:	06 f0 40 40 	r4 = Null + 64;
    /* Calculate the amount of data available */
    for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
84201334:	07 00       	r5 = Null + Null;
84201336:	48 09       	r6 = r7 + Null;

84201338 <Lc_aanc_process_data_52>:
    {
        if (p_ext_data->inputs[i] != NULL)
84201338:	82 f0 00 e8 	r0 = M[r6 + Null];
8420133c:	07 60       	if EQ jump (m) Lc_aanc_process_data_55;

8420133e <Lc_aanc_process_data_53>:
        {
            amt = cbuffer_calc_amount_data_in_words(p_ext_data->inputs[i]);
8420133e:	ff fd c5 f1 	call (m) 0x39dd4;
84201342:	37 e4 
            if (amt < min_data_space)
84201344:	90 05       	Null = r0 - r4;
84201346:	02 66       	if GE jump (m) Lc_aanc_process_data_55;

84201348 <Lc_aanc_process_data_54>:
            {
                min_data_space = amt;
84201348:	16 00       	r4 = r0 + Null;

8420134a <Lc_aanc_process_data_55>:
        return INT_MAX;
    }

    min_data_space = AANC_DEFAULT_FRAME_SIZE;
    /* Calculate the amount of data available */
    for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
8420134a:	7f 20       	r5 = r5 + 1;
8420134c:	20 75       	r6 = r6 + 4;
8420134e:	f8 24       	Null = r5 - 3;
84201350:	f4 6d       	if LE jump (m) Lc_aanc_process_data_52;

84201352 <Lc_aanc_process_data_56>:
            }
        }
    }

    /*  Calculate the available space */
    if (p_ext_data->touched_sources != 0)
84201352:	91 f0 db 86 	rMAC = MHU[r7 + 438];
84201356:	11 60       	if EQ jump (m) Lc_aanc_process_data_62;

84201358 <Lc_aanc_process_data_57>:
    {
        for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
84201358:	07 00       	r5 = Null + Null;
8420135a:	98 f0 10 20 	r6 = r7 + 16;

8420135e <Lc_aanc_process_data_58>:
        {
            if (p_ext_data->outputs[i] != NULL)
8420135e:	82 f0 00 e8 	r0 = M[r6 + Null];
84201362:	07 60       	if EQ jump (m) Lc_aanc_process_data_61;

84201364 <Lc_aanc_process_data_59>:
            {
                amt = cbuffer_calc_amount_space_in_words(p_ext_data->outputs[i]);
84201364:	ff fd c5 f1 	call (m) 0x39d88;
84201368:	25 e1 
                if (amt < min_data_space)
8420136a:	90 05       	Null = r0 - r4;
8420136c:	02 66       	if GE jump (m) Lc_aanc_process_data_61;

8420136e <Lc_aanc_process_data_60>:
                {
                    min_data_space = amt;
8420136e:	16 00       	r4 = r0 + Null;

84201370 <Lc_aanc_process_data_61>:
    }

    /*  Calculate the available space */
    if (p_ext_data->touched_sources != 0)
    {
        for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
84201370:	7f 20       	r5 = r5 + 1;
84201372:	20 75       	r6 = r6 + 4;
84201374:	f8 24       	Null = r5 - 3;
84201376:	f4 6d       	if LE jump (m) Lc_aanc_process_data_58;

84201378 <Lc_aanc_process_data_62>:
            }
        }
    }
    /* Samples to process determined as minimum of data and space available */
    return min_data_space;
}
84201378:	37 00       	r5 = r4 + Null;
    {
        aanc_proc_process_data(p_ext_data->ag, calculate_gain);

        samples_to_process = aanc_calc_samples_to_process(p_ext_data);

        sample_count += AANC_DEFAULT_FRAME_SIZE;
8420137a:	0a f0 40 44 	r8 = r8 + 64;
#endif /* RUNNING_ON_KALSIM */

        /*************************
         * Check processing flags
         *************************/
        if (p_ext_data->flags & AANC_ED_FLAG_MASK)
8420137e:	91 f0 6e 88 	rMAC = M[r7 + 440];
84201382:	12 f0 70 00 	r0 = rMAC AND 0x70;
84201386:	02 60       	if EQ jump (m) Lc_aanc_process_data_65;

84201388 <Lc_aanc_process_data_64>:
        {
            L5_DBG_MSG1("AANC ED detected: %u",
                        p_ext_data->flags & AANC_ED_FLAG_MASK);
            mode_after_flags = AANC_SYSMODE_FREEZE;
84201388:	23 71       	r9 = Null + 4;

8420138a <Lc_aanc_process_data_65>:
        }

        if (p_ext_data->flags & AANC_CLIPPING_FLAG_MASK)
8420138a:	12 f0 00 07 	r0 = rMAC AND 0x700;
8420138e:	02 60       	if EQ jump (m) Lc_aanc_process_data_67;

84201390 <Lc_aanc_process_data_66>:
        {
            L5_DBG_MSG1("AANC Clipping detected: %u",
                        p_ext_data->flags & AANC_CLIPPING_FLAG_MASK);
            mode_after_flags = AANC_SYSMODE_FREEZE;
84201390:	23 71       	r9 = Null + 4;

84201392 <Lc_aanc_process_data_67>:
        }

        if (p_ext_data->flags & AANC_SATURATION_FLAG_MASK)
84201392:	11 f7 00 10 	rMAC = rMAC AND 0xf000;
84201396:	02 60       	if EQ jump (m) Lc_aanc_process_data_69;

84201398 <Lc_aanc_process_data_68>:
        {
            L5_DBG_MSG1("AANC Saturation detected: %u",
                        p_ext_data->flags & AANC_SATURATION_FLAG_MASK);
            mode_after_flags = AANC_SYSMODE_FREEZE;
84201398:	23 71       	r9 = Null + 4;

8420139a <Lc_aanc_process_data_69>:

        /**************
         * Update gain
         **************/
        /* Check SYSMODE state as this is the primary control */
        switch (p_ext_data->cur_mode)
8420139a:	93 f0 69 88 	r1 = M[r7 + 420];
8420139e:	58 24       	Null = r1 - 1;
842013a0:	09 f0 99 e2 	if LS jump (m) Lc_aanc_process_data_95;

842013a4 <Lc_aanc_process_data_70>:
842013a4:	98 24       	Null = r1 - 2;
842013a6:	18 60       	if EQ jump (m) Lc_aanc_process_data_75;

842013a8 <Lc_aanc_process_data_71>:
842013a8:	d8 24       	Null = r1 - 3;
842013aa:	78 60       	if EQ jump (m) Lc_aanc_process_data_92;

842013ac <Lc_aanc_process_data_72>:
842013ac:	18 25       	Null = r1 - 4;
842013ae:	85 60       	if EQ jump (m) Lc_aanc_process_data_95;

842013b0 <Lc_aanc_process_data_73>:
842013b0:	98 25       	Null = r1 - 6;
842013b2:	08 f0 f3 e1 	if HI jump (m) Lc_aanc_process_data_93;

842013b6 <Lc_aanc_process_data_74>:
                break;
            case AANC_SYSMODE_QUIET:
                /* Fall through as action is taken in gentle mute */                
            case AANC_SYSMODE_GENTLE_MUTE:
                /* Gentle mute ramps gain down to 0 */
                aanc_process_ramp(&p_ext_data->ff_ramp);
842013b6:	92 f0 80 22 	r0 = r7 + 640;
842013ba:	03 f0 3f ec 	call (m) Lc_aanc_process_ramp_1;
                aanc_process_ramp(&p_ext_data->fb_ramp);
842013be:	92 f0 9c 22 	r0 = r7 + 668;
842013c2:	03 f0 37 ec 	call (m) Lc_aanc_process_ramp_1;
                aanc_fxlms100_update_gain(p_ext_data->ag->p_fxlms,
                                          p_ext_data->ff_gain.fine);
842013c6:	93 f0 e7 86 	r1 = MHU[r7 + 462];
842013ca:	91 f0 72 88 	rMAC = M[r7 + 456];
842013ce:	8a 99       	r0 = M[rMAC + 56];
842013d0:	0a f0 23 e7 	call (m) $_aanc_fxlms100_update_gain;
                break;
842013d4:	72 6e       	jump (m) Lc_aanc_process_data_95;

842013d6 <Lc_aanc_process_data_75>:
                /* Mute action is taken in SET_CONTROL */
            case AANC_SYSMODE_FREEZE:
                /* Freeze does nothing to change the gains */
                break;
            case AANC_SYSMODE_FULL:
                if (p_ext_data->ff_ramp.state == AANC_RAMP_FINISHED)
842013d6:	91 f0 8c 90 	rMAC = MBS[r7 + 652];
842013da:	c8 24       	Null = rMAC - 3;
842013dc:	56 62       	if NE jump (m) Lc_aanc_process_data_91;

842013de <Lc_aanc_process_data_76>:
                {
                    /* Not ramping FF fine gain, so fall through to state
                     * machine.
                     */
                    if (mode_after_flags == AANC_SYSMODE_FREEZE)
842013de:	b0 f0 04 24 	Null = r9 - 4;
842013e2:	06 60       	if EQ jump (m) Lc_aanc_process_data_79;

842013e4 <Lc_aanc_process_data_77>:
                    {
                        L4_DBG_MSG1("AANC FULL Mode, FREEZE: gain = %hu",
                                    p_ext_data->ff_gain.fine);
                    }
                    else if (mode_after_flags == AANC_SYSMODE_MUTE_ANC)
842013e4:	b0 f0 01 24 	Null = r9 - 1;
842013e8:	08 62       	if NE jump (m) Lc_aanc_process_data_80;

842013ea <Lc_aanc_process_data_78>:
                    {
                        L4_DBG_MSG("AANC FULL Mode, MUTE: gain = 0");
                        p_ext_data->ff_gain.fine = 0;
842013ea:	90 f0 e7 8c 	MH[r7 + 462] = Null;

842013ee <Lc_aanc_process_data_79>:
                    aanc_fxlms100_update_gain(p_ext_data->ag->p_fxlms,
                                                (uint16)initial_value);
                    /* Process the FF fine gain ramp. */
                    aanc_process_ramp(&p_ext_data->ff_ramp);
                }
                aanc_process_ramp(&p_ext_data->fb_ramp);
842013ee:	92 f0 9c 22 	r0 = r7 + 668;
842013f2:	03 f0 27 eb 	call (m) Lc_aanc_process_ramp_1;
                break;
842013f6:	61 6e       	jump (m) Lc_aanc_process_data_95;

842013f8 <Lc_aanc_process_data_80>:
                    {
                        L4_DBG_MSG2("AANC FULL mode, FULL: gain = %u frames_to_freez = %u",
                                    *p_gain_calc, p_ext_data->frames_to_freez);

                        /* Check mode of FF gain update before updating on hardware */
                        switch (p_ext_data->freeze_mode_state)
842013f8:	93 f0 bc 90 	r1 = MBS[r7 + 700];
842013fc:	19 00       	rMAC = r1 + Null;
842013fe:	15 60       	if EQ jump (m) Lc_aanc_process_data_85;

84201400 <Lc_aanc_process_data_81>:
84201400:	48 24       	Null = rMAC - 1;
84201402:	2b 60       	if EQ jump (m) Lc_aanc_process_data_87;

84201404 <Lc_aanc_process_data_82>:
84201404:	88 24       	Null = rMAC - 2;
84201406:	36 62       	if NE jump (m) Lc_aanc_process_data_89;

84201408 <Lc_aanc_process_data_83>:
                                    p_ext_data->freeze_mode_state = AANC_FFGAIN_EXIT_FREEZE;
                                    calculate_gain = TRUE;
                                }
                                break;
                            case AANC_FFGAIN_EXIT_FREEZE:
                                p_ext_data->ff_gain.fine = (uint16) *p_gain_calc;
84201408:	59 d8       	rMAC = M[FP + 44];
8420140a:	09 e8       	rMAC = M[rMAC + Null];
8420140c:	89 c6       	rMAC = rMAC AND 0xffff;
8420140e:	91 f0 e7 8c 	MH[r7 + 462] = rMAC;
                                /* Don't enter to freeze mode again until the FF gain reach
                                 * OFFSET_FXLMS_MIN_BOUND + AANC_RE_FREEZE_FFGAIN_THRESHOLD */
                                if(p_ext_data->ff_gain.fine > 
                                   ((p_ext_data->aanc_cap_params.OFFSET_FXLMS_MIN_BOUND >>
                                   AANC_FXLMS_MIN_BOUND_SHIFT) +
                                   AANC_RE_FREEZE_FFGAIN_THRESHOLD))
84201412:	92 f0 52 88 	r0 = M[r7 + 328];
84201416:	74 f2 d2 d8 	r0 = r0 LSHIFT -23;
8420141a:	92 22       	r0 = r0 + 10;
8420141c:	88 04       	Null = rMAC - r0;
8420141e:	f9 ff d1 ef 	if LS jump (m) Lc_aanc_process_data_79;

84201422 <Lc_aanc_process_data_84>:
                                {
                                    p_ext_data->freeze_mode_state = AANC_FFGAIN_NO_FREEZE;
84201422:	90 f0 bc 9a 	MB[r7 + 700] = Null;
84201426:	e4 6f       	jump (m) Lc_aanc_process_data_79;

84201428 <Lc_aanc_process_data_85>:

                        /* Check mode of FF gain update before updating on hardware */
                        switch (p_ext_data->freeze_mode_state)
                        {
                            case AANC_FFGAIN_NO_FREEZE:
                                p_ext_data->ff_gain.fine = (uint16) *p_gain_calc;
84201428:	59 d8       	rMAC = M[FP + 44];
8420142a:	09 e8       	rMAC = M[rMAC + Null];
8420142c:	89 c6       	rMAC = rMAC AND 0xffff;
8420142e:	91 f0 e7 8c 	MH[r7 + 462] = rMAC;
                                
                                if(p_ext_data->ff_gain.fine 
                                   <= (p_ext_data->aanc_cap_params.OFFSET_FXLMS_MIN_BOUND >>
                                   AANC_FXLMS_MIN_BOUND_SHIFT))
84201432:	92 f0 52 88 	r0 = M[r7 + 328];
84201436:	74 f2 d2 d8 	r0 = r0 LSHIFT -23;
8420143a:	88 04       	Null = rMAC - r0;
8420143c:	f8 ff b3 ef 	if HI jump (m) Lc_aanc_process_data_79;

84201440 <Lc_aanc_process_data_86>:
                                {
                                    /* Convert time specified into number of frames */
                                    p_ext_data->frames_to_freez = (uint16)
                                    ((p_ext_data->aanc_cap_params.OFFSET_GAIN_MIN_FREEZ_TIME
                                        * AANC_FRAME_RATE)
                                        >> TIMER_PARAM_SHIFT);
84201440:	91 f0 68 88 	rMAC = M[r7 + 416];
84201444:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201448:	d2 52       	r0 = r0 LSHIFT -20;
8420144a:	92 f0 5c 8d 	MH[r7 + 696] = r0;

                                    calculate_gain = FALSE;
8420144e:	68 de       	M[FP + 52] = Null;
                                    p_ext_data->freeze_mode_state = AANC_FFGAIN_IN_FREEZE;
84201450:	71 d8       	rMAC = M[FP + 56];
84201452:	91 f0 bc 9a 	MB[r7 + 700] = rMAC;
84201456:	cc 6f       	jump (m) Lc_aanc_process_data_79;

84201458 <Lc_aanc_process_data_87>:
                                }
                                break;
                            case AANC_FFGAIN_IN_FREEZE:
                                p_ext_data->frames_to_freez--;
84201458:	91 f0 5c 87 	rMAC = MHU[r7 + 696];
8420145c:	49 24       	rMAC = rMAC - 1;
8420145e:	89 c6       	rMAC = rMAC AND 0xffff;
                                if(p_ext_data->frames_to_freez == 0)
84201460:	91 f0 5c 8d 	MH[r7 + 696] = rMAC;
84201464:	c5 63       	if NE jump (m) Lc_aanc_process_data_79;

84201466 <Lc_aanc_process_data_88>:
                                {
                                    p_ext_data->freeze_mode_state = AANC_FFGAIN_EXIT_FREEZE;
84201466:	79 d8       	rMAC = M[FP + 60];
84201468:	91 f0 bc 9a 	MB[r7 + 700] = rMAC;
                                    calculate_gain = TRUE;
8420146c:	41 20       	rMAC = Null + 1;
8420146e:	69 de       	M[FP + 52] = rMAC;
84201470:	bf 6f       	jump (m) Lc_aanc_process_data_79;

84201472 <Lc_aanc_process_data_89>:
                                    p_ext_data->freeze_mode_state = AANC_FFGAIN_NO_FREEZE;
                                }
                                break;
                            default:
                                L2_DBG_MSG1("AANC FFGain invalid state: %u",
                                            p_ext_data->freeze_mode_state);
84201472:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201476:	88 24       	Null = rMAC - 2;
84201478:	bb 69       	if LT jump (m) Lc_aanc_process_data_79;

8420147a <Lc_aanc_process_data_90>:
8420147a:	55 f1 02 f0 	r0 = Null + 357564557;
8420147e:	8d 40 
84201480:	ef fd fc ff 	call (m) 0xcde;
84201484:	3f e2 
84201486:	b4 6f       	jump (m) Lc_aanc_process_data_79;

84201488 <Lc_aanc_process_data_91>:
                else
                {
                    /* Initialize the FxLMS algorithm for when the ramp
                     * finishes.
                     */
                    initial_value = p_params->OFFSET_FXLMS_INITIAL_VALUE;
84201488:	61 d8       	rMAC = M[FP + 48];
8420148a:	11 f0 46 88 	rMAC = M[rMAC + 280];
                    aanc_fxlms100_update_gain(p_ext_data->ag->p_fxlms,
                                                (uint16)initial_value);
8420148e:	8b c6       	r1 = rMAC AND 0xffff;
84201490:	91 f0 72 88 	rMAC = M[r7 + 456];
84201494:	8a 99       	r0 = M[rMAC + 56];
84201496:	0a f0 3d e0 	call (m) $_aanc_fxlms100_update_gain;

8420149a <Lc_aanc_process_data_92>:
                    /* Process the FF fine gain ramp. */
                    aanc_process_ramp(&p_ext_data->ff_ramp);
8420149a:	92 f0 80 22 	r0 = r7 + 640;
8420149e:	03 f0 3b e5 	call (m) Lc_aanc_process_ramp_1;
842014a2:	a6 6f       	jump (m) Lc_aanc_process_data_79;

842014a4 <Lc_aanc_process_data_93>:
                aanc_process_ramp(&p_ext_data->fb_ramp);
                aanc_fxlms100_update_gain(p_ext_data->ag->p_fxlms,
                                          p_ext_data->ff_gain.fine);
                break;
            default:
                L2_DBG_MSG1("AANC SYSMODE invalid: %u", p_ext_data->cur_mode);
842014a4:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842014a8:	88 24       	Null = rMAC - 2;
842014aa:	07 68       	if LT jump (m) Lc_aanc_process_data_95;

842014ac <Lc_aanc_process_data_94>:
842014ac:	55 f1 02 f0 	r0 = Null + 357564587;
842014b0:	ab 40 
842014b2:	ef fd fc ff 	call (m) 0xcde;
842014b6:	2d e1 

842014b8 <Lc_aanc_process_data_95>:
        }

        /* If the fine gain is decreasing continuously for 3 frames(12ms),
         * update Mu with higher value to converge faster
         * other wise use regular value of Mu. */
        if(p_ext_data->aanc_cap_params.OFFSET_MU_STEEP_FALL != 0)
842014b8:	91 f0 66 88 	rMAC = M[r7 + 408];
842014bc:	16 61       	if EQ jump (m) Lc_aanc_process_data_44;

842014be <Lc_aanc_process_data_96>:
        {
            if(p_ext_data->ff_gain_prev.fine > p_ext_data->ff_gain.fine)
842014be:	92 f0 ed 86 	r0 = MHU[r7 + 474];
842014c2:	93 f0 e7 86 	r1 = MHU[r7 + 462];
842014c6:	d0 04       	Null = r0 - r1;
842014c8:	08 6d       	if LE jump (m) Lc_aanc_process_data_43;

842014ca <Lc_aanc_process_data_97>:
            {
                p_ext_data->cont_gain_drop_cnt++;
842014ca:	92 f0 5d 87 	r0 = MHU[r7 + 698];
842014ce:	52 20       	r0 = r0 + 1;
842014d0:	92 c6       	r0 = r0 AND 0xffff;
842014d2:	92 f0 5d 8d 	MH[r7 + 698] = r0;
                if(p_ext_data->cont_gain_drop_cnt 
                   >= p_ext_data->aanc_cap_params.OFFSET_GAIN_DROP_FRAME_COUNT)
842014d6:	93 f0 67 88 	r1 = M[r7 + 412];
842014da:	d0 04       	Null = r0 - r1;
842014dc:	06 65       	if NC jump (m) Lc_aanc_process_data_44;

842014de <Lc_aanc_process_data_98>:
                {
                    /* Change Mu to MU_STEEP_FALL */
                    p_ext_data->ag->p_fxlms->mu = 
                      p_ext_data->aanc_cap_params.OFFSET_MU_STEEP_FALL;
842014de:	92 f0 72 88 	r0 = M[r7 + 456];
842014e2:	92 99       	r0 = M[r0 + 56];
842014e4:	d1 8f       	M[r0 + 28] = rMAC;
842014e6:	01 6f       	jump (m) Lc_aanc_process_data_44;

842014e8 <Lc_aanc_process_data_99>:
    * set the FB fine gain to its static value.
    *
    * Clear "hard" reinitializion so that FB gain is not touched in
    * subsequent iterations.
    */
    if (p_ext_data->re_init_hard)
842014e8:	91 f0 f7 83 	rMAC = MBU[r7 + 503];
842014ec:	03 60       	if EQ jump (m) Lc_aanc_process_data_101;

842014ee <Lc_aanc_process_data_100>:
    {
        p_ext_data->re_init_hard = FALSE;
842014ee:	90 f0 f7 8b 	MB[r7 + 503] = Null;

842014f2 <Lc_aanc_process_data_101>:
    }

    aanc_update_gain(op_data, p_ext_data);
842014f2:	4b 08       	r1 = r7 + Null;
842014f4:	42 d8       	r0 = M[FP + 32];
842014f6:	2e 4e       	call (m) Lc_aanc_update_gain_1;
842014f8:	01 fa d8 c8 	r6 = r8 LSHIFT 2;

    /****************
     * Pass Metadata
     ****************/
    for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
842014fc:	06 00       	r4 = Null + Null;
842014fe:	97 f0 20 20 	r5 = r7 + 32;

84201502 <Lc_aanc_process_data_102>:
    {
        metadata_strict_transport(p_ext_data->metadata_ip[i],
                                  p_ext_data->metadata_op[i],
                                  sample_count * OCTETS_PER_SAMPLE);
84201502:	bb 88       	r1 = M[r5 + 8];
84201504:	3a e8       	r0 = M[r5 + Null];
84201506:	44 08       	r2 = r6 + Null;
84201508:	ff fd 9b f0 	call (m) 0x14c88;
8420150c:	21 ec 
    aanc_update_gain(op_data, p_ext_data);

    /****************
     * Pass Metadata
     ****************/
    for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
8420150e:	76 20       	r4 = r4 + 1;
84201510:	3f 21       	r5 = r5 + 4;
84201512:	b0 24       	Null = r4 - 2;
84201514:	f7 69       	if LT jump (m) Lc_aanc_process_data_102;

84201516 <Lc_aanc_process_data_103>:
    }

    /***************************
     * Update touched terminals
     ***************************/
    touched->sinks = (unsigned) p_ext_data->touched_sinks;
84201516:	91 f0 da 86 	rMAC = MHU[r7 + 436];
8420151a:	4a d8       	r0 = M[FP + 36];
8420151c:	51 8e       	M[r0 + 4] = rMAC;
    touched->sources = (unsigned) p_ext_data->touched_sources;
8420151e:	91 f0 db 86 	rMAC = MHU[r7 + 438];
84201522:	11 ee       	M[r0 + Null] = rMAC;

84201524 <Lc_aanc_process_data_104>:

    L5_DBG_MSG("AANC process channel data completed");

    return;
}
84201524:	74 4c       	SP = SP + -48;
84201526:	f6 48       	popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84201528:	d8 4c       	rts;

8420152a <$_ups_params_aanc>:

bool ups_params_aanc(void* instance_data, PS_KEY_TYPE key,
                     PERSISTENCE_RANK rank, uint16 length,
                     unsigned* data, STATUS_KYMERA status,
                     uint16 extra_status_info)
{
8420152a:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
8420152c:	2f 00       	r5 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
8420152e:	ef fd f7 ff 	call (m) 0x4e6;
84201532:	39 ed 
84201534:	16 00       	r4 = r0 + Null;
                     uint16 extra_status_info)
{
    OPERATOR_DATA *op_data = (OPERATOR_DATA*) instance_data;
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    cpsSetParameterFromPsStore(&p_ext_data->params_def, length, data, status);
84201536:	e5 d5       	r3 = MHS[FP + -8];
84201538:	fc d9       	r2 = M[FP + -4];
8420153a:	62 f0 00 22 	r0 = r4 + 512;
8420153e:	3b 00       	r1 = r5 + Null;
84201540:	ef fd fa ff 	call (m) 0xa0a;
84201544:	2b e6 

    /* Set the reinitialization flag after setting the parameters */
    p_ext_data->re_init_flag = TRUE;
84201546:	41 20       	rMAC = Null + 1;
84201548:	61 f0 f6 8b 	MB[r4 + 502] = rMAC;

    return TRUE;
8420154c:	0a 00       	r0 = rMAC + Null;

8420154e <Lc_ups_params_aanc_2>:
}
8420154e:	f2 48       	popm <FP, r4, r5, rLink>;
84201550:	d8 4c       	rts;

84201552 <Lc_aanc_update_gain_1>:
 * to the HW.
 *
 */
#else
static bool aanc_update_gain(OPERATOR_DATA *op_data, AANC_OP_DATA *p_ext_data)
{
84201552:	f1 1c       	pushm <FP(=SP), r4, rLink>;
84201554:	1e 00       	r4 = r1 + Null;
    /* Only update EC and FB gains if in hybrid mode */
    if (p_ext_data->anc_fb_path > 0)
84201556:	61 f0 f2 81 	rMAC = MBS[r4 + 498];
8420155a:	08 24       	Null = rMAC - 0;
8420155c:	7f 6c       	if LE jump (m) Lc_aanc_update_gain_22;

8420155e <Lc_aanc_update_gain_2>:
    {
        /* Update EC gain */
        if (p_ext_data->ec_gain.fine != p_ext_data->ec_gain_prev.fine)
8420155e:	64 f0 eb 86 	r2 = MHU[r4 + 470];
84201562:	61 f0 f1 86 	rMAC = MHU[r4 + 482];
84201566:	60 04       	Null = r2 - rMAC;
84201568:	19 60       	if EQ jump (m) Lc_aanc_update_gain_7;

8420156a <Lc_aanc_update_gain_3>:
        {
            if (p_ext_data->filter_config == AANC_FILTER_CONFIG_PARALLEL)
8420156a:	61 f0 e2 86 	rMAC = MHU[r4 + 452];
8420156e:	48 24       	Null = rMAC - 1;
84201570:	0c 62       	if NE jump (m) Lc_aanc_update_gain_5;

84201572 <Lc_aanc_update_gain_4>:
            {
                stream_anc_set_anc_fine_gain(AANC_ANC_INSTANCE_ANC0_ID,
                                            AANC_ANC_PATH_FB_ID,
                                            p_ext_data->ec_gain.fine);
84201572:	c3 20       	r1 = Null + 3;
84201574:	42 20       	r0 = Null + 1;
84201576:	0b f0 39 e1 	call (m) $_stream_anc_set_anc_fine_gain;
                stream_anc_set_anc_fine_gain(AANC_ANC_INSTANCE_ANC1_ID,
                                            AANC_ANC_PATH_FB_ID,
                                            p_ext_data->ec_gain.fine);
8420157a:	64 f0 eb 86 	r2 = MHU[r4 + 470];
8420157e:	c3 20       	r1 = Null + 3;
84201580:	82 20       	r0 = Null + 2;
84201582:	0b f0 2d e1 	call (m) $_stream_anc_set_anc_fine_gain;
84201586:	06 6e       	jump (m) Lc_aanc_update_gain_6;

84201588 <Lc_aanc_update_gain_5>:
            }
            else
            {
                stream_anc_set_anc_fine_gain(p_ext_data->anc_channel,
                                            AANC_ANC_PATH_FB_ID,
                                            p_ext_data->ec_gain.fine);
84201588:	c3 20       	r1 = Null + 3;
8420158a:	62 f0 f0 81 	r0 = MBS[r4 + 496];
8420158e:	0b f0 21 e1 	call (m) $_stream_anc_set_anc_fine_gain;

84201592 <Lc_aanc_update_gain_6>:
            }
            p_ext_data->ec_gain_prev.fine = p_ext_data->ec_gain.fine;
84201592:	61 f0 eb 86 	rMAC = MHU[r4 + 470];
84201596:	61 f0 f1 8c 	MH[r4 + 482] = rMAC;

8420159a <Lc_aanc_update_gain_7>:
        }
        if (p_ext_data->ec_gain.coarse != p_ext_data->ec_gain_prev.coarse)
8420159a:	64 f0 ea 86 	r2 = MHU[r4 + 468];
8420159e:	61 f0 f0 86 	rMAC = MHU[r4 + 480];
842015a2:	60 04       	Null = r2 - rMAC;
842015a4:	19 60       	if EQ jump (m) Lc_aanc_update_gain_12;

842015a6 <Lc_aanc_update_gain_8>:
        {
            if (p_ext_data->filter_config == AANC_FILTER_CONFIG_PARALLEL)
842015a6:	61 f0 e2 86 	rMAC = MHU[r4 + 452];
842015aa:	48 24       	Null = rMAC - 1;
842015ac:	0c 62       	if NE jump (m) Lc_aanc_update_gain_10;

842015ae <Lc_aanc_update_gain_9>:
            {
                stream_anc_set_anc_coarse_gain(AANC_ANC_INSTANCE_ANC0_ID,
                                            AANC_ANC_PATH_FB_ID,
                                            p_ext_data->ec_gain.coarse);
842015ae:	c3 20       	r1 = Null + 3;
842015b0:	42 20       	r0 = Null + 1;
842015b2:	0b f0 29 e0 	call (m) $_stream_anc_set_anc_coarse_gain;
                stream_anc_set_anc_coarse_gain(AANC_ANC_INSTANCE_ANC1_ID,
                                            AANC_ANC_PATH_FB_ID,
                                            p_ext_data->ec_gain.coarse);
842015b6:	64 f0 ea 86 	r2 = MHU[r4 + 468];
842015ba:	c3 20       	r1 = Null + 3;
842015bc:	82 20       	r0 = Null + 2;
842015be:	0a f0 3d ef 	call (m) $_stream_anc_set_anc_coarse_gain;
842015c2:	06 6e       	jump (m) Lc_aanc_update_gain_11;

842015c4 <Lc_aanc_update_gain_10>:
            }
            else
            {
                stream_anc_set_anc_coarse_gain(p_ext_data->anc_channel,
                                            AANC_ANC_PATH_FB_ID,
                                            p_ext_data->ec_gain.coarse);
842015c4:	c3 20       	r1 = Null + 3;
842015c6:	62 f0 f0 81 	r0 = MBS[r4 + 496];
842015ca:	0a f0 31 ef 	call (m) $_stream_anc_set_anc_coarse_gain;

842015ce <Lc_aanc_update_gain_11>:
            }
            p_ext_data->ec_gain_prev.coarse = p_ext_data->ec_gain.coarse;
842015ce:	61 f0 ea 86 	rMAC = MHU[r4 + 468];
842015d2:	61 f0 f0 8c 	MH[r4 + 480] = rMAC;

842015d6 <Lc_aanc_update_gain_12>:
        }

        /* Update FB gain */
        if (p_ext_data->fb_gain.fine != p_ext_data->fb_gain_prev.fine)
842015d6:	64 f0 e9 86 	r2 = MHU[r4 + 466];
842015da:	61 f0 ef 86 	rMAC = MHU[r4 + 478];
842015de:	60 04       	Null = r2 - rMAC;
842015e0:	1c 60       	if EQ jump (m) Lc_aanc_update_gain_17;

842015e2 <Lc_aanc_update_gain_13>:
        {
            if (p_ext_data->filter_config == AANC_FILTER_CONFIG_PARALLEL)
842015e2:	61 f0 e2 86 	rMAC = MHU[r4 + 452];
842015e6:	48 24       	Null = rMAC - 1;
842015e8:	0e 62       	if NE jump (m) Lc_aanc_update_gain_15;

842015ea <Lc_aanc_update_gain_14>:
            {
                stream_anc_set_anc_fine_gain(AANC_ANC_INSTANCE_ANC0_ID,
                                            p_ext_data->anc_fb_path,
                                            p_ext_data->fb_gain.fine);
842015ea:	63 f0 f2 81 	r1 = MBS[r4 + 498];
842015ee:	42 20       	r0 = Null + 1;
842015f0:	0a f0 3f ed 	call (m) $_stream_anc_set_anc_fine_gain;
                stream_anc_set_anc_fine_gain(AANC_ANC_INSTANCE_ANC1_ID,
                                            p_ext_data->anc_fb_path,
                                            p_ext_data->fb_gain.fine);
842015f4:	64 f0 e9 86 	r2 = MHU[r4 + 466];
842015f8:	63 f0 f2 81 	r1 = MBS[r4 + 498];
842015fc:	82 20       	r0 = Null + 2;
842015fe:	0a f0 31 ed 	call (m) $_stream_anc_set_anc_fine_gain;
84201602:	07 6e       	jump (m) Lc_aanc_update_gain_16;

84201604 <Lc_aanc_update_gain_15>:
            }
            else
            {
                stream_anc_set_anc_fine_gain(p_ext_data->anc_channel,
                                            p_ext_data->anc_fb_path,
                                            p_ext_data->fb_gain.fine);
84201604:	63 f0 f2 81 	r1 = MBS[r4 + 498];
84201608:	62 f0 f0 81 	r0 = MBS[r4 + 496];
8420160c:	0a f0 23 ed 	call (m) $_stream_anc_set_anc_fine_gain;

84201610 <Lc_aanc_update_gain_16>:
            }
            p_ext_data->fb_gain_prev.fine = p_ext_data->fb_gain.fine;
84201610:	61 f0 e9 86 	rMAC = MHU[r4 + 466];
84201614:	61 f0 ef 8c 	MH[r4 + 478] = rMAC;

84201618 <Lc_aanc_update_gain_17>:
        }
        if (p_ext_data->fb_gain.coarse != p_ext_data->fb_gain_prev.coarse)
84201618:	64 f0 e8 86 	r2 = MHU[r4 + 464];
8420161c:	61 f0 ee 86 	rMAC = MHU[r4 + 476];
84201620:	60 04       	Null = r2 - rMAC;
84201622:	1c 60       	if EQ jump (m) Lc_aanc_update_gain_22;

84201624 <Lc_aanc_update_gain_18>:
        {
            if (p_ext_data->filter_config == AANC_FILTER_CONFIG_PARALLEL)
84201624:	61 f0 e2 86 	rMAC = MHU[r4 + 452];
84201628:	48 24       	Null = rMAC - 1;
8420162a:	0e 62       	if NE jump (m) Lc_aanc_update_gain_20;

8420162c <Lc_aanc_update_gain_19>:
            {
                stream_anc_set_anc_coarse_gain(AANC_ANC_INSTANCE_ANC0_ID,
                                            p_ext_data->anc_fb_path,
                                            p_ext_data->fb_gain.coarse);
8420162c:	63 f0 f2 81 	r1 = MBS[r4 + 498];
84201630:	42 20       	r0 = Null + 1;
84201632:	0a f0 29 ec 	call (m) $_stream_anc_set_anc_coarse_gain;
                stream_anc_set_anc_coarse_gain(AANC_ANC_INSTANCE_ANC1_ID,
                                            p_ext_data->anc_fb_path,
                                            p_ext_data->fb_gain.coarse);
84201636:	64 f0 e8 86 	r2 = MHU[r4 + 464];
8420163a:	63 f0 f2 81 	r1 = MBS[r4 + 498];
8420163e:	82 20       	r0 = Null + 2;
84201640:	0a f0 3b eb 	call (m) $_stream_anc_set_anc_coarse_gain;
84201644:	07 6e       	jump (m) Lc_aanc_update_gain_21;

84201646 <Lc_aanc_update_gain_20>:
            }
            else
            {
                stream_anc_set_anc_coarse_gain(p_ext_data->anc_channel,
                                            p_ext_data->anc_fb_path,
                                            p_ext_data->fb_gain.coarse);
84201646:	63 f0 f2 81 	r1 = MBS[r4 + 498];
8420164a:	62 f0 f0 81 	r0 = MBS[r4 + 496];
8420164e:	0a f0 2d eb 	call (m) $_stream_anc_set_anc_coarse_gain;

84201652 <Lc_aanc_update_gain_21>:
            }
            p_ext_data->fb_gain_prev.coarse = p_ext_data->fb_gain.coarse;
84201652:	61 f0 e8 86 	rMAC = MHU[r4 + 464];
84201656:	61 f0 ee 8c 	MH[r4 + 476] = rMAC;

8420165a <Lc_aanc_update_gain_22>:
        }
    }

    /* Update FF gain */
    if (p_ext_data->ff_gain.fine != p_ext_data->ff_gain_prev.fine)
8420165a:	64 f0 e7 86 	r2 = MHU[r4 + 462];
8420165e:	61 f0 ed 86 	rMAC = MHU[r4 + 474];
84201662:	60 04       	Null = r2 - rMAC;
84201664:	1c 60       	if EQ jump (m) Lc_aanc_update_gain_27;

84201666 <Lc_aanc_update_gain_23>:
    {
            if (p_ext_data->filter_config == AANC_FILTER_CONFIG_PARALLEL)
84201666:	61 f0 e2 86 	rMAC = MHU[r4 + 452];
8420166a:	48 24       	Null = rMAC - 1;
8420166c:	0e 62       	if NE jump (m) Lc_aanc_update_gain_25;

8420166e <Lc_aanc_update_gain_24>:
            {
                stream_anc_set_anc_fine_gain(AANC_ANC_INSTANCE_ANC0_ID,
                                            p_ext_data->anc_ff_path,
                                            p_ext_data->ff_gain.fine);
8420166e:	63 f0 f1 81 	r1 = MBS[r4 + 497];
84201672:	42 20       	r0 = Null + 1;
84201674:	0a f0 3b e9 	call (m) $_stream_anc_set_anc_fine_gain;
                stream_anc_set_anc_fine_gain(AANC_ANC_INSTANCE_ANC1_ID,
                                            p_ext_data->anc_ff_path,
                                            p_ext_data->ff_gain.fine);
84201678:	64 f0 e7 86 	r2 = MHU[r4 + 462];
8420167c:	63 f0 f1 81 	r1 = MBS[r4 + 497];
84201680:	82 20       	r0 = Null + 2;
84201682:	0a f0 2d e9 	call (m) $_stream_anc_set_anc_fine_gain;
84201686:	07 6e       	jump (m) Lc_aanc_update_gain_26;

84201688 <Lc_aanc_update_gain_25>:
            }
            else
            {
                stream_anc_set_anc_fine_gain(p_ext_data->anc_channel,
                                            p_ext_data->anc_ff_path,
                                            p_ext_data->ff_gain.fine);
84201688:	63 f0 f1 81 	r1 = MBS[r4 + 497];
8420168c:	62 f0 f0 81 	r0 = MBS[r4 + 496];
84201690:	0a f0 3f e8 	call (m) $_stream_anc_set_anc_fine_gain;

84201694 <Lc_aanc_update_gain_26>:
            }
        p_ext_data->ff_gain_prev.fine = p_ext_data->ff_gain.fine;
84201694:	61 f0 e7 86 	rMAC = MHU[r4 + 462];
84201698:	61 f0 ed 8c 	MH[r4 + 474] = rMAC;

8420169c <Lc_aanc_update_gain_27>:
    }
    if (p_ext_data->ff_gain.coarse != p_ext_data->ff_gain_prev.coarse)
8420169c:	64 f0 e6 86 	r2 = MHU[r4 + 460];
842016a0:	61 f0 ec 86 	rMAC = MHU[r4 + 472];
842016a4:	60 04       	Null = r2 - rMAC;
842016a6:	1c 60       	if EQ jump (m) Lc_aanc_update_gain_32;

842016a8 <Lc_aanc_update_gain_28>:
    {
            if (p_ext_data->filter_config == AANC_FILTER_CONFIG_PARALLEL)
842016a8:	61 f0 e2 86 	rMAC = MHU[r4 + 452];
842016ac:	48 24       	Null = rMAC - 1;
842016ae:	0e 62       	if NE jump (m) Lc_aanc_update_gain_30;

842016b0 <Lc_aanc_update_gain_29>:
            {
                stream_anc_set_anc_coarse_gain(AANC_ANC_INSTANCE_ANC0_ID,
                                            p_ext_data->anc_ff_path,
                                            p_ext_data->ff_gain.coarse);
842016b0:	63 f0 f1 81 	r1 = MBS[r4 + 497];
842016b4:	42 20       	r0 = Null + 1;
842016b6:	0a f0 25 e8 	call (m) $_stream_anc_set_anc_coarse_gain;
                stream_anc_set_anc_coarse_gain(AANC_ANC_INSTANCE_ANC1_ID,
                                            p_ext_data->anc_ff_path,
                                            p_ext_data->ff_gain.coarse);
842016ba:	64 f0 e6 86 	r2 = MHU[r4 + 460];
842016be:	63 f0 f1 81 	r1 = MBS[r4 + 497];
842016c2:	82 20       	r0 = Null + 2;
842016c4:	0a f0 37 e7 	call (m) $_stream_anc_set_anc_coarse_gain;
842016c8:	07 6e       	jump (m) Lc_aanc_update_gain_31;

842016ca <Lc_aanc_update_gain_30>:
            }
            else
            {
                stream_anc_set_anc_coarse_gain(p_ext_data->anc_channel,
                                            p_ext_data->anc_ff_path,
                                            p_ext_data->ff_gain.coarse);
842016ca:	63 f0 f1 81 	r1 = MBS[r4 + 497];
842016ce:	62 f0 f0 81 	r0 = MBS[r4 + 496];
842016d2:	0a f0 29 e7 	call (m) $_stream_anc_set_anc_coarse_gain;

842016d6 <Lc_aanc_update_gain_31>:
            }
        p_ext_data->ff_gain_prev.coarse = p_ext_data->ff_gain.coarse;
842016d6:	61 f0 e6 86 	rMAC = MHU[r4 + 460];
842016da:	61 f0 ec 8c 	MH[r4 + 472] = rMAC;

842016de <Lc_aanc_update_gain_32>:
    }

    return TRUE;
842016de:	42 20       	r0 = Null + 1;

842016e0 <Lc_aanc_update_gain_33>:
}
842016e0:	f1 48       	popm <FP, r4, rLink>;
842016e2:	d8 4c       	rts;

842016e4 <Lc_update_touched_sink_sources_1>:
 *
 * Because this is solely dependent on the terminal connections it can be
 * calculated in connect/disconnect rather than in every process_data loop.
 */
static bool update_touched_sink_sources(AANC_OP_DATA *p_ext_data)
{
842016e4:	71 1c       	pushm <FP(=SP), r4>;
    int i;
    unsigned touched_sinks = 0;
842016e6:	03 00       	r1 = Null + Null;
    unsigned touched_sources = 0;
842016e8:	04 00       	r2 = Null + Null;

    /* Update touched sinks */
    for (i = 0; i < AANC_MAX_SINKS; i++)
842016ea:	01 00       	rMAC = Null + Null;
842016ec:	15 00       	r3 = r0 + Null;
842016ee:	24 71       	r10 = Null + 4;
842016f0:	09 4c       	do (m) Lc__loop3;

842016f2 <Lc_update_touched_sink_sources_2>:
    {
        if (p_ext_data->inputs[i] != NULL)
842016f2:	2e e8       	r4 = M[r3 + Null];
842016f4:	05 60       	if EQ jump (m) Lc_update_touched_sink_sources_4;

842016f6 <Lc_update_touched_sink_sources_3>:
        {
            touched_sinks |= (uint16)(1 << i);
842016f6:	0e 00       	r4 = rMAC + Null;
842016f8:	00 f6 96 de 	r4 = 0x1 LSHIFT r4;
842016fc:	9b 13       	r1 = r1 OR r4;

842016fe <Lc_update_touched_sink_sources_4>:
    int i;
    unsigned touched_sinks = 0;
    unsigned touched_sources = 0;

    /* Update touched sinks */
    for (i = 0; i < AANC_MAX_SINKS; i++)
842016fe:	49 20       	rMAC = rMAC + 1;
84201700:	2d 21       	r3 = r3 + 4;

84201702 <Lc__loop3>:
84201702:	01 00       	rMAC = Null + Null;
84201704:	15 28       	r3 = r0 + 16;
            touched_sinks |= (uint16)(1 << i);
        }
    }

    /* Update touched sources */
    for (i = 0; i < AANC_MAX_SOURCES; i++)
84201706:	24 71       	r10 = Null + 4;
84201708:	09 4c       	do (m) Lc__loop4;

8420170a <Lc_update_touched_sink_sources_6>:
    {
        if (p_ext_data->outputs[i] != NULL)
8420170a:	2e e8       	r4 = M[r3 + Null];
8420170c:	05 60       	if EQ jump (m) Lc_update_touched_sink_sources_8;

8420170e <Lc_update_touched_sink_sources_7>:
        {
            touched_sources |= (uint16)(1 << i);
8420170e:	0e 00       	r4 = rMAC + Null;
84201710:	00 f6 96 de 	r4 = 0x1 LSHIFT r4;
84201714:	a4 13       	r2 = r2 OR r4;

84201716 <Lc_update_touched_sink_sources_8>:
            touched_sinks |= (uint16)(1 << i);
        }
    }

    /* Update touched sources */
    for (i = 0; i < AANC_MAX_SOURCES; i++)
84201716:	49 20       	rMAC = rMAC + 1;
84201718:	2d 21       	r3 = r3 + 4;

8420171a <Lc__loop4>:
8420171a:	23 f0 da 8c 	MH[r0 + 436] = r1;
            touched_sources |= (uint16)(1 << i);
        }
    }

    p_ext_data->touched_sinks = (uint16)touched_sinks;
    p_ext_data->touched_sources = (uint16)touched_sources;
8420171e:	24 f0 db 8c 	MH[r0 + 438] = r2;

    /* Generate a reinitialization because terminals have changed */
    p_ext_data->re_init_flag = TRUE;
84201722:	41 20       	rMAC = Null + 1;
84201724:	21 f0 f6 8b 	MB[r0 + 502] = rMAC;

    return TRUE;
84201728:	0a 00       	r0 = rMAC + Null;

8420172a <Lc_update_touched_sink_sources_10>:
}
8420172a:	71 48       	popm <FP, r4>;
8420172c:	d8 4c       	rts;

8420172e <Lc_override_gain_1>:
                          bool coarse_value, uint16 gain_offset)
{
    void *p_target;

    if (!((p_ext_data->cur_mode == AANC_SYSMODE_FREEZE) ||
          (p_ext_data->cur_mode == AANC_SYSMODE_STATIC)))
8420172e:	21 f0 69 88 	rMAC = M[r0 + 420];
84201732:	08 25       	Null = rMAC - 4;
84201734:	05 60       	if EQ jump (m) Lc_override_gain_4;

84201736 <Lc_override_gain_2>:
84201736:	c8 24       	Null = rMAC - 3;
84201738:	03 60       	if EQ jump (m) Lc_override_gain_4;

8420173a <Lc_override_gain_3>:
    {
        return FALSE;
8420173a:	02 00       	r0 = Null + Null;
8420173c:	12 6e       	jump (m) Lc_override_gain_11;

8420173e <Lc_override_gain_4>:
    }

    /* Mask for bottom 16 bits */
    ctrl_value &= 0xFFFF;
8420173e:	9b c6       	r1 = r1 AND 0xffff;

    if (coarse_value == TRUE)
84201740:	60 24       	Null = r2 - 1;
84201742:	08 62       	if NE jump (m) Lc_override_gain_8;

84201744 <Lc_override_gain_5>:
    {
        /* B-308001: Backwards compatibility with uint4 from QACT.
         * QACT will send 15 = -1 .. 8 = -8 but these need to be in full
         * (u)int16.
         */
        if (ctrl_value > 7 && ctrl_value < 16)
84201744:	d8 25       	Null = r1 - 7;
84201746:	0a 6c       	if LE jump (m) Lc_override_gain_10;

84201748 <Lc_override_gain_6>:
84201748:	18 2c       	Null = r1 - 16;
8420174a:	08 66       	if GE jump (m) Lc_override_gain_10;

8420174c <Lc_override_gain_7>:
        {
            ctrl_value = (uint16)((65536 - 16) + ctrl_value);
8420174c:	73 f0 f0 7f 	r1 = r1 + 65520;
84201750:	05 6e       	jump (m) Lc_override_gain_10;

84201752 <Lc_override_gain_8>:
        }
    }

    /* Set the gain: fine gain needs an additional offset */
    if (coarse_value == FALSE)
84201752:	20 04       	Null = r2 - Null;
84201754:	03 62       	if NE jump (m) Lc_override_gain_10;

84201756 <Lc_override_gain_9>:
    {
        gain_offset += offsetof(AANC_GAIN, fine);
84201756:	a9 20       	rMAC = r3 + 2;
84201758:	8d c6       	r3 = rMAC AND 0xffff;

8420175a <Lc_override_gain_10>:
    }
    p_target = (void *)((uintptr_t)p_ext_data + (unsigned)gain_offset);
8420175a:	a9 00       	rMAC = r3 + r0;
    *((uint16 *)p_target) = ctrl_value;
8420175c:	0b ec       	MH[rMAC + Null] = r1;
    L4_DBG_MSG1("AANC gain override: %hu", *(uint16 *)p_target);

    return TRUE;
8420175e:	42 20       	r0 = Null + 1;

84201760 <Lc_override_gain_11>:
84201760:	d8 4c       	rts;

84201762 <Lc_aanc_send_event_trigger_1>:
 *
 * \return  bool indicating success
 */
static bool aanc_send_event_trigger(OPERATOR_DATA *op_data, bool detect,
                                    uint16 id, uint16 payload)
{
84201762:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84201764:	12 09       	r8 = r0 + Null;
84201766:	21 09       	r7 = r2 + Null;
84201768:	28 09       	r6 = r3 + Null;
    unsigned msg_size;
    unsigned *trigger_message = NULL;
    OPMSG_REPLY_ID message_id = OPMSG_REPLY_ID_AANC_EVENT_TRIGGER;
8420176a:	06 22       	r4 = Null + 8;
    if (!detect)
8420176c:	18 04       	Null = r1 - Null;
8420176e:	02 62       	if NE jump (m) Lc_aanc_send_event_trigger_3;

84201770 <Lc_aanc_send_event_trigger_2>:
    {
        message_id = OPMSG_REPLY_ID_AANC_EVENT_NEGATIVE_TRIGGER;
84201770:	46 22       	r4 = Null + 9;

84201772 <Lc_aanc_send_event_trigger_3>:
    }

    msg_size = OPMSG_UNSOLICITED_AANC_EVENT_TRIGGER_WORD_SIZE;
    trigger_message = xpnewn(msg_size, unsigned);
84201772:	c3 20       	r1 = Null + 3;
84201774:	02 22       	r0 = Null + 8;
84201776:	ff fd 28 f0 	call (m) 0x67ac;
8420177a:	37 e1 
8420177c:	17 00       	r5 = r0 + Null;
    if (trigger_message == NULL)
8420177e:	0d 62       	if NE jump (m) Lc_aanc_send_event_trigger_7;

84201780 <Lc_aanc_send_event_trigger_4>:
    {
        L2_DBG_MSG("Failed to send AANC event message");
84201780:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201784:	88 24       	Null = rMAC - 2;
84201786:	07 68       	if LT jump (m) Lc_aanc_send_event_trigger_6;

84201788 <Lc_aanc_send_event_trigger_5>:
84201788:	55 f1 02 f0 	r0 = Null + 357564416;
8420178c:	00 40 
8420178e:	ef fd fa ff 	call (m) 0xccc;
84201792:	3f e9 

84201794 <Lc_aanc_send_event_trigger_6>:
        return FALSE;
84201794:	02 00       	r0 = Null + Null;
84201796:	11 6e       	jump (m) Lc_aanc_send_event_trigger_8;

84201798 <Lc_aanc_send_event_trigger_7>:
    }

    OPMSG_CREATION_FIELD_SET(trigger_message,
                             OPMSG_UNSOLICITED_AANC_EVENT_TRIGGER,
                             ID,
                             id);
84201798:	79 f0 00 ee 	M[r5 + Null] = r7;
    OPMSG_CREATION_FIELD_SET(trigger_message,
                             OPMSG_UNSOLICITED_AANC_EVENT_TRIGGER,
                             PAYLOAD,
                             payload);
8420179c:	78 f0 01 8e 	M[r5 + 4] = r6;

    L4_DBG_MSG2("AANC Event Sent: [%u, %u]", trigger_message[0],
                trigger_message[1]);
    common_send_unsolicited_message(op_data, (unsigned)message_id, msg_size,
                                    trigger_message);
842017a0:	84 20       	r2 = Null + 2;
842017a2:	3d 00       	r3 = r5 + Null;
842017a4:	33 00       	r1 = r4 + Null;
842017a6:	52 08       	r0 = r8 + Null;
842017a8:	ef fd f6 ff 	call (m) 0x592;
842017ac:	2b ef 

    pdelete(trigger_message);
842017ae:	3a 00       	r0 = r5 + Null;
842017b0:	ff fd 28 f0 	call (m) 0x68d8;
842017b4:	29 e9 

    return TRUE;
842017b6:	42 20       	r0 = Null + 1;

842017b8 <Lc_aanc_send_event_trigger_8>:
}
842017b8:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
842017ba:	d8 4c       	rts;

842017bc <Lc_aanc_process_event_clear_condition_1>:
 * \return  void.
 */
static void aanc_process_event_clear_condition(OPERATOR_DATA *op_data,
                                               AANC_EVENT *p_event,
                                               uint16 id, uint16 payload)
{
842017bc:	f1 1c       	pushm <FP(=SP), r4, rLink>;
842017be:	1e 00       	r4 = r1 + Null;
    switch (p_event->running)
842017c0:	31 90       	rMAC = MBS[r4 + 8];
842017c2:	04 f0 97 e0 	if NEG jump (m) Lc_aanc_process_event_clear_condition_6;

842017c6 <Lc_aanc_process_event_clear_condition_2>:
842017c6:	48 24       	Null = rMAC - 1;
842017c8:	05 6c       	if LE jump (m) Lc_aanc_process_event_clear_condition_5;

842017ca <Lc_aanc_process_event_clear_condition_3>:
842017ca:	88 24       	Null = rMAC - 2;
842017cc:	06 62       	if NE jump (m) Lc_aanc_process_event_clear_condition_6;

842017ce <Lc_aanc_process_event_clear_condition_4>:
            case AANC_EVENT_DETECTED:
                /* Have detected but not sent message so clear */
                aanc_clear_event(p_event);
                break;
            case AANC_EVENT_SENT:
                aanc_send_event_trigger(op_data, FALSE, id, payload);
842017ce:	03 00       	r1 = Null + Null;
842017d0:	c9 4f       	call (m) Lc_aanc_send_event_trigger_1;

842017d2 <Lc_aanc_process_event_clear_condition_5>:
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
842017d2:	71 88       	rMAC = M[r4 + 4];
842017d4:	31 ee       	M[r4 + Null] = rMAC;
       p_event->running = AANC_EVENT_CLEAR;
842017d6:	30 9a       	MB[r4 + 8] = Null;

842017d8 <Lc_aanc_process_event_clear_condition_6>:
                   is correct.
                */
            case AANC_EVENT_DETECTED:
                /* Have detected but not sent message so clear */
                aanc_clear_event(p_event);
                break;
842017d8:	f1 48       	popm <FP, r4, rLink>;
842017da:	d8 4c       	rts;

842017dc <Lc_aanc_initialize_events_1>:
 * \param  p_ext_data  Address of the AANC extra_op_data.
 *
 * \return  void.
 */
static void aanc_initialize_events(OPERATOR_DATA *op_data, AANC_OP_DATA *p_ext_data)
{
842017dc:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
842017de:	17 00       	r5 = r0 + Null;
842017e0:	1e 00       	r4 = r1 + Null;
    AANC_PARAMETERS *p_params = &p_ext_data->aanc_cap_params;
842017e2:	68 f0 3c 20 	r6 = r4 + 60;
    unsigned set_frames;

    set_frames = (p_params->OFFSET_EVENT_GAIN_STUCK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
842017e6:	81 f0 47 88 	rMAC = M[r6 + 284];
842017ea:	7d f1 92 c9 	r0 = rMAC * 250 (int);
842017ee:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Gain Event Initialized at %u frames", set_frames);
    p_ext_data->gain_event.set_frames = set_frames;
842017f0:	62 f0 86 8e 	M[r4 + 536] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->gain_event,
                                       AANC_EVENT_ID_GAIN, 0);
842017f4:	63 f0 14 22 	r1 = r4 + 532;
842017f8:	05 00       	r3 = Null + Null;
842017fa:	04 00       	r2 = Null + Null;
842017fc:	3a 00       	r0 = r5 + Null;
842017fe:	df 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_ED_STUCK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
84201800:	81 f0 48 88 	rMAC = M[r6 + 288];
84201804:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201808:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC ED Event Initialized at %u frames", set_frames);
    p_ext_data->ed_event.set_frames = set_frames;
8420180a:	62 f0 89 8e 	M[r4 + 548] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->ed_event,
                                       AANC_EVENT_ID_ED, 0);
8420180e:	44 20       	r2 = Null + 1;
84201810:	63 f0 20 22 	r1 = r4 + 544;
84201814:	05 00       	r3 = Null + Null;
84201816:	3a 00       	r0 = r5 + Null;
84201818:	d2 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_QUIET_DETECT * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
8420181a:	81 f0 49 88 	rMAC = M[r6 + 292];
8420181e:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201822:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Quiet Mode Detect Initialized at %u frames", set_frames);
    p_ext_data->quiet_event_detect.set_frames = set_frames;
84201824:	62 f0 8c 8e 	M[r4 + 560] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->quiet_event_detect,
                                       AANC_EVENT_ID_QUIET, 0);
84201828:	84 20       	r2 = Null + 2;
8420182a:	63 f0 2c 22 	r1 = r4 + 556;
8420182e:	05 00       	r3 = Null + Null;
84201830:	3a 00       	r0 = r5 + Null;
84201832:	c5 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_QUIET_CLEAR * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
84201834:	81 f0 4a 88 	rMAC = M[r6 + 296];
84201838:	7d f1 92 c9 	r0 = rMAC * 250 (int);
8420183c:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Quiet Mode Cleared Initialized at %u frames", set_frames);
    p_ext_data->quiet_event_clear.set_frames = set_frames;
8420183e:	62 f0 8f 8e 	M[r4 + 572] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->quiet_event_clear,
                                       AANC_EVENT_ID_QUIET, 0);
84201842:	84 20       	r2 = Null + 2;
84201844:	63 f0 38 22 	r1 = r4 + 568;
84201848:	05 00       	r3 = Null + Null;
8420184a:	3a 00       	r0 = r5 + Null;
8420184c:	b8 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_CLIP_STUCK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
8420184e:	81 f0 4b 88 	rMAC = M[r6 + 300];
84201852:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201856:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Clip Event Initialized at %u frames", set_frames);
    p_ext_data->clip_event.set_frames = set_frames;
84201858:	62 f0 92 8e 	M[r4 + 584] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->clip_event,
                                       AANC_EVENT_ID_CLIP, 0);
8420185c:	c4 20       	r2 = Null + 3;
8420185e:	63 f0 44 22 	r1 = r4 + 580;
84201862:	05 00       	r3 = Null + Null;
84201864:	3a 00       	r0 = r5 + Null;
84201866:	ab 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_SAT_STUCK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
84201868:	81 f0 4c 88 	rMAC = M[r6 + 304];
8420186c:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201870:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Saturation Event Initialized at %u frames", set_frames);
    p_ext_data->sat_event.set_frames = set_frames;
84201872:	62 f0 95 8e 	M[r4 + 596] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->sat_event,
                                       AANC_EVENT_ID_SAT, 0);
84201876:	04 21       	r2 = Null + 4;
84201878:	63 f0 50 22 	r1 = r4 + 592;
8420187c:	05 00       	r3 = Null + Null;
8420187e:	3a 00       	r0 = r5 + Null;
84201880:	9e 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_SELF_TALK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
84201882:	81 f0 4d 88 	rMAC = M[r6 + 308];
84201886:	7d f1 92 c9 	r0 = rMAC * 250 (int);
8420188a:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Self-Talk Event Initialized at %u frames", set_frames);
    p_ext_data->self_talk_event.set_frames = set_frames;
8420188c:	62 f0 98 8e 	M[r4 + 608] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->self_talk_event,
                                       AANC_EVENT_ID_SELF_TALK, 0);
84201890:	44 21       	r2 = Null + 5;
84201892:	63 f0 5c 22 	r1 = r4 + 604;
84201896:	05 00       	r3 = Null + Null;
84201898:	3a 00       	r0 = r5 + Null;
8420189a:	91 4f       	call (m) Lc_aanc_process_event_clear_condition_1;
    set_frames = (p_params->OFFSET_EVENT_SPL * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
8420189c:	81 f0 52 88 	rMAC = M[r6 + 328];
842018a0:	7d f1 92 c9 	r0 = rMAC * 250 (int);
842018a4:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC SPL Event Initialized at %u frames", set_frames);
    p_ext_data->spl_event.set_frames = set_frames;
842018a6:	62 f0 9b 8e 	M[r4 + 620] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->spl_event,
                                       AANC_EVENT_ID_SPL, 0);
842018aa:	84 21       	r2 = Null + 6;
842018ac:	63 f0 68 22 	r1 = r4 + 616;
842018b0:	05 00       	r3 = Null + Null;
842018b2:	3a 00       	r0 = r5 + Null;
842018b4:	84 4f       	call (m) Lc_aanc_process_event_clear_condition_1;
    set_frames = 1;
    L4_DBG_MSG1("AANC Gentle Mute Event Initialized at %u frames", set_frames);
    p_ext_data->gentle_mute_event.set_frames = set_frames;
842018b6:	41 20       	rMAC = Null + 1;
842018b8:	61 f0 9e 8e 	M[r4 + 632] = rMAC;
    aanc_clear_event(&p_ext_data->gentle_mute_event);
842018bc:	61 f0 74 22 	rMAC = r4 + 628;
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
842018c0:	4a 88       	r0 = M[rMAC + 4];
842018c2:	0a ee       	M[rMAC + Null] = r0;
       p_event->running = AANC_EVENT_CLEAR;
842018c4:	08 9a       	MB[rMAC + 8] = Null;

842018c6 <Lc_aanc_initialize_events_2>:
                                       AANC_EVENT_ID_SPL, 0);
    set_frames = 1;
    L4_DBG_MSG1("AANC Gentle Mute Event Initialized at %u frames", set_frames);
    p_ext_data->gentle_mute_event.set_frames = set_frames;
    aanc_clear_event(&p_ext_data->gentle_mute_event);
}
842018c6:	f3 48       	popm <FP, r4, r5, r6, rLink>;
842018c8:	d8 4c       	rts;

842018ca <Lc_aanc_process_event_detect_condition_1>:
 * \return  void.
 */
static void aanc_process_event_detect_condition(OPERATOR_DATA *op_data,
                                                AANC_EVENT *p_event,
                                                uint16 id, uint16 payload)
{
842018ca:	f1 1c       	pushm <FP(=SP), r4, rLink>;
842018cc:	1e 00       	r4 = r1 + Null;
    switch (p_event->running)
842018ce:	31 90       	rMAC = MBS[r4 + 8];
842018d0:	08 60       	if EQ jump (m) Lc_aanc_process_event_detect_condition_5;

842018d2 <Lc_aanc_process_event_detect_condition_2>:
842018d2:	48 24       	Null = rMAC - 1;
842018d4:	10 62       	if NE jump (m) Lc_aanc_process_event_detect_condition_7;

842018d6 <Lc_aanc_process_event_detect_condition_3>:
        case AANC_EVENT_CLEAR:
            p_event->frame_counter -= 1;
            p_event->running = AANC_EVENT_DETECTED;
            break;
        case AANC_EVENT_DETECTED:
            if (p_event->frame_counter > 0)
842018d6:	31 e8       	rMAC = M[r4 + Null];
842018d8:	0a 60       	if EQ jump (m) Lc_aanc_process_event_detect_condition_6;

842018da <Lc_aanc_process_event_detect_condition_4>:
            {
                p_event->frame_counter -= 1;
842018da:	49 24       	rMAC = rMAC - 1;
842018dc:	31 ee       	M[r4 + Null] = rMAC;
842018de:	0b 6e       	jump (m) Lc_aanc_process_event_detect_condition_7;

842018e0 <Lc_aanc_process_event_detect_condition_5>:
                                                uint16 id, uint16 payload)
{
    switch (p_event->running)
    {
        case AANC_EVENT_CLEAR:
            p_event->frame_counter -= 1;
842018e0:	ff f6 11 d1 	rMAC = M[r4] + -1;
842018e4:	31 ee       	M[r4 + Null] = rMAC;
            p_event->running = AANC_EVENT_DETECTED;
842018e6:	41 20       	rMAC = Null + 1;
842018e8:	31 9a       	MB[r4 + 8] = rMAC;
            break;
842018ea:	05 6e       	jump (m) Lc_aanc_process_event_detect_condition_7;

842018ec <Lc_aanc_process_event_detect_condition_6>:
            {
                p_event->frame_counter -= 1;
            }
            else
            {
                aanc_send_event_trigger(op_data, TRUE, id, payload);
842018ec:	43 20       	r1 = Null + 1;
842018ee:	3a 4f       	call (m) Lc_aanc_send_event_trigger_1;
                p_event->running = AANC_EVENT_SENT;
842018f0:	81 20       	rMAC = Null + 2;
842018f2:	31 9a       	MB[r4 + 8] = rMAC;

842018f4 <Lc_aanc_process_event_detect_condition_7>:
            }
            break;
        case AANC_EVENT_SENT:
            break;
    }
}
842018f4:	f1 48       	popm <FP, r4, rLink>;
842018f6:	d8 4c       	rts;

842018f8 <Lc_aanc_process_events_1>:
 *
 * \return  boolean indicating success or failure.
 */
static bool aanc_process_events(OPERATOR_DATA *op_data,
                                AANC_OP_DATA *p_ext_data)
{
842018f8:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
842018fa:	10 09       	r6 = r0 + Null;
842018fc:	1e 00       	r4 = r1 + Null;
    bool cur_clip, prev_clip;
    bool cur_sat, prev_sat;
    int cur_ext, cur_int, delta_ext;

    /* Adaptive gain event: reset if ED detected */
    if (p_ext_data->flags & AANC_ED_FLAG_MASK)
842018fe:	61 f0 6e 88 	rMAC = M[r4 + 440];
84201902:	11 f0 70 00 	rMAC = rMAC AND 0x70;
84201906:	0f 60       	if EQ jump (m) Lc_aanc_process_events_5;

84201908 <Lc_aanc_process_events_2>:
    {
        /* If we had previously sent a message then send the negative trigger */
        if (p_ext_data->gain_event.running == AANC_EVENT_SENT)
84201908:	61 f0 1c 90 	rMAC = MBS[r4 + 540];
8420190c:	88 24       	Null = rMAC - 2;
8420190e:	05 62       	if NE jump (m) Lc_aanc_process_events_4;

84201910 <Lc_aanc_process_events_3>:
        {
            aanc_send_event_trigger(op_data, FALSE, AANC_EVENT_ID_GAIN, 0);
84201910:	05 00       	r3 = Null + Null;
84201912:	04 00       	r2 = Null + Null;
84201914:	03 00       	r1 = Null + Null;
84201916:	26 4f       	call (m) Lc_aanc_send_event_trigger_1;

84201918 <Lc_aanc_process_events_4>:
        }
        aanc_clear_event(&p_ext_data->gain_event);
84201918:	61 f0 14 22 	rMAC = r4 + 532;
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
8420191c:	4a 88       	r0 = M[rMAC + 4];
8420191e:	0a ee       	M[rMAC + Null] = r0;
       p_event->running = AANC_EVENT_CLEAR;
84201920:	08 9a       	MB[rMAC + 8] = Null;
84201922:	10 6e       	jump (m) Lc_aanc_process_events_8;

84201924 <Lc_aanc_process_events_5>:
            aanc_send_event_trigger(op_data, FALSE, AANC_EVENT_ID_GAIN, 0);
        }
        aanc_clear_event(&p_ext_data->gain_event);
    }
    /* Condition holds */
    else if (p_ext_data->ff_gain.fine == p_ext_data->ff_gain_prev.fine)
84201924:	65 f0 e7 86 	r3 = MHU[r4 + 462];
84201928:	61 f0 ed 86 	rMAC = MHU[r4 + 474];
8420192c:	68 04       	Null = r3 - rMAC;
8420192e:	06 62       	if NE jump (m) Lc_aanc_process_events_7;

84201930 <Lc_aanc_process_events_6>:
    {
        aanc_process_event_detect_condition(op_data, &p_ext_data->gain_event,
                                            AANC_EVENT_ID_GAIN,
                                            p_ext_data->ff_gain.fine);
84201930:	63 f0 14 22 	r1 = r4 + 532;
84201934:	04 00       	r2 = Null + Null;
84201936:	ca 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
84201938:	05 6e       	jump (m) Lc_aanc_process_events_8;

8420193a <Lc_aanc_process_events_7>:
    /* Condition cleared */
    else
    {
        aanc_process_event_clear_condition(op_data, &p_ext_data->gain_event,
                                           AANC_EVENT_ID_GAIN,
                                           p_ext_data->ff_gain.fine);
8420193a:	63 f0 14 22 	r1 = r4 + 532;
8420193e:	04 00       	r2 = Null + Null;
84201940:	3e 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

84201942 <Lc_aanc_process_events_8>:
    }

    /* ED event */
    cur_ed = p_ext_data->flags & AANC_ED_FLAG_MASK;
84201942:	61 f0 6e 88 	rMAC = M[r4 + 440];
84201946:	15 f0 70 00 	r3 = rMAC AND 0x70;
    prev_ed = p_ext_data->prev_flags & AANC_ED_FLAG_MASK;
8420194a:	61 f0 6f 88 	rMAC = M[r4 + 444];
8420194e:	11 f0 70 00 	rMAC = rMAC AND 0x70;
    if (cur_ed)
84201952:	28 04       	Null = r3 - Null;
84201954:	09 60       	if EQ jump (m) Lc_aanc_process_events_11;

84201956 <Lc_aanc_process_events_9>:
    {
        /* Non-zero flags and no change starts/continues event */
        if (cur_ed == prev_ed)
84201956:	68 04       	Null = r3 - rMAC;
84201958:	0f 62       	if NE jump (m) Lc_aanc_process_events_13;

8420195a <Lc_aanc_process_events_10>:
        {
            aanc_process_event_detect_condition(op_data, &p_ext_data->ed_event,
                                                AANC_EVENT_ID_ED,
                                                (uint16)cur_ed);
8420195a:	44 20       	r2 = Null + 1;
8420195c:	63 f0 20 22 	r1 = r4 + 544;
84201960:	42 08       	r0 = r6 + Null;
84201962:	b4 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
84201964:	09 6e       	jump (m) Lc_aanc_process_events_13;

84201966 <Lc_aanc_process_events_11>:
        }
    }
    else
    {
        /* Flags reset causes event to be reset */
        if (cur_ed != prev_ed)
84201966:	08 04       	Null = rMAC - Null;
84201968:	07 60       	if EQ jump (m) Lc_aanc_process_events_13;

8420196a <Lc_aanc_process_events_12>:
        {
            aanc_process_event_clear_condition(op_data, &p_ext_data->ed_event,
                                               AANC_EVENT_ID_ED,
                                               (uint16)cur_ed);
8420196a:	44 20       	r2 = Null + 1;
8420196c:	63 f0 20 22 	r1 = r4 + 544;
84201970:	05 00       	r3 = Null + Null;
84201972:	42 08       	r0 = r6 + Null;
84201974:	24 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

84201976 <Lc_aanc_process_events_13>:
        }
    }

    /* Quiet mode has positive and negative triggers */
    cur_qm = p_ext_data->flags & AANC_FLAGS_QUIET_MODE;
84201976:	61 f0 6e 88 	rMAC = M[r4 + 440];
    prev_qm = p_ext_data->prev_flags & AANC_FLAGS_QUIET_MODE;
8420197a:	62 f0 6f 88 	r0 = M[r4 + 444];
8420197e:	08 f0 22 f0 	r0 = r0 AND 0x100000;
84201982:	00 00 

    if (cur_qm)
84201984:	08 f0 11 f0 	rMAC = rMAC AND 0x100000;
84201988:	00 00 
8420198a:	25 60       	if EQ jump (m) Lc_aanc_process_events_19;

8420198c <Lc_aanc_process_events_14>:
    {
        if (prev_qm) /* Steady state for quiet mode detect event */
8420198c:	10 04       	Null = r0 - Null;
8420198e:	15 60       	if EQ jump (m) Lc_aanc_process_events_18;

84201990 <Lc_aanc_process_events_15>:
        {
            if (p_ext_data->quiet_event_detect.running == AANC_EVENT_DETECTED)
84201990:	61 f0 34 90 	rMAC = MBS[r4 + 564];
84201994:	48 24       	Null = rMAC - 1;
84201996:	42 62       	if NE jump (m) Lc_aanc_process_events_24;

84201998 <Lc_aanc_process_events_16>:
            {
                p_ext_data->quiet_event_detect.frame_counter -= 1;
84201998:	61 f0 8b 88 	rMAC = M[r4 + 556];
8420199c:	49 24       	rMAC = rMAC - 1;
                if (p_ext_data->quiet_event_detect.frame_counter <= 0)
8420199e:	61 f0 8b 8e 	M[r4 + 556] = rMAC;
842019a2:	3c 62       	if NE jump (m) Lc_aanc_process_events_24;

842019a4 <Lc_aanc_process_events_17>:
                {
                    aanc_send_event_trigger(op_data, TRUE,
                                            AANC_EVENT_ID_QUIET, 0);
842019a4:	84 20       	r2 = Null + 2;
842019a6:	43 20       	r1 = Null + 1;
842019a8:	05 00       	r3 = Null + Null;
842019aa:	42 08       	r0 = r6 + Null;
842019ac:	fe ff 37 ed 	call (m) Lc_aanc_send_event_trigger_1;
                    p_ext_data->quiet_event_detect.running = AANC_EVENT_SENT;
842019b0:	81 20       	rMAC = Null + 2;
842019b2:	61 f0 34 9a 	MB[r4 + 564] = rMAC;
842019b6:	32 6e       	jump (m) Lc_aanc_process_events_24;

842019b8 <Lc_aanc_process_events_18>:
                }
            }
        }
        else /* Rising edge for quiet mode detect event */
        {
            p_ext_data->quiet_event_detect.frame_counter -= 1;
842019b8:	61 f0 8b 88 	rMAC = M[r4 + 556];
842019bc:	49 24       	rMAC = rMAC - 1;
842019be:	61 f0 8b 8e 	M[r4 + 556] = rMAC;
            p_ext_data->quiet_event_detect.running = AANC_EVENT_DETECTED;
842019c2:	41 20       	rMAC = Null + 1;
842019c4:	61 f0 34 9a 	MB[r4 + 564] = rMAC;
            aanc_clear_event(&p_ext_data->quiet_event_clear);
842019c8:	61 f0 38 22 	rMAC = r4 + 568;
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
842019cc:	4a 88       	r0 = M[rMAC + 4];
842019ce:	0a ee       	M[rMAC + Null] = r0;
       p_event->running = AANC_EVENT_CLEAR;
842019d0:	08 9a       	MB[rMAC + 8] = Null;
842019d2:	24 6e       	jump (m) Lc_aanc_process_events_24;

842019d4 <Lc_aanc_process_events_19>:
            aanc_clear_event(&p_ext_data->quiet_event_clear);
        }
    }
    else
    {
        if (prev_qm) /* Falling edge for quiet mode clear event */
842019d4:	10 04       	Null = r0 - Null;
842019d6:	0f 60       	if EQ jump (m) Lc_aanc_process_events_21;

842019d8 <Lc_aanc_process_events_20>:
        {
            p_ext_data->quiet_event_clear.frame_counter -= 1;
842019d8:	61 f0 8e 88 	rMAC = M[r4 + 568];
842019dc:	49 24       	rMAC = rMAC - 1;
842019de:	61 f0 8e 8e 	M[r4 + 568] = rMAC;
            p_ext_data->quiet_event_clear.running = AANC_EVENT_DETECTED;
842019e2:	41 20       	rMAC = Null + 1;
842019e4:	61 f0 40 9a 	MB[r4 + 576] = rMAC;
            aanc_clear_event(&p_ext_data->quiet_event_detect);
842019e8:	61 f0 2c 22 	rMAC = r4 + 556;
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
842019ec:	4a 88       	r0 = M[rMAC + 4];
842019ee:	0a ee       	M[rMAC + Null] = r0;
       p_event->running = AANC_EVENT_CLEAR;
842019f0:	08 9a       	MB[rMAC + 8] = Null;
842019f2:	14 6e       	jump (m) Lc_aanc_process_events_24;

842019f4 <Lc_aanc_process_events_21>:
            p_ext_data->quiet_event_clear.running = AANC_EVENT_DETECTED;
            aanc_clear_event(&p_ext_data->quiet_event_detect);
        }
        else /* Steady state for quite mode clear event */
        {
            if (p_ext_data->quiet_event_clear.running == AANC_EVENT_DETECTED)
842019f4:	61 f0 40 90 	rMAC = MBS[r4 + 576];
842019f8:	48 24       	Null = rMAC - 1;
842019fa:	10 62       	if NE jump (m) Lc_aanc_process_events_24;

842019fc <Lc_aanc_process_events_22>:
            {
                p_ext_data->quiet_event_clear.frame_counter -= 1;
842019fc:	61 f0 8e 88 	rMAC = M[r4 + 568];
84201a00:	49 24       	rMAC = rMAC - 1;
                if (p_ext_data->quiet_event_clear.frame_counter <= 0)
84201a02:	61 f0 8e 8e 	M[r4 + 568] = rMAC;
84201a06:	0a 62       	if NE jump (m) Lc_aanc_process_events_24;

84201a08 <Lc_aanc_process_events_23>:
                {
                    aanc_send_event_trigger(op_data, FALSE,
                                            AANC_EVENT_ID_QUIET, 0);
84201a08:	84 20       	r2 = Null + 2;
84201a0a:	05 00       	r3 = Null + Null;
84201a0c:	03 00       	r1 = Null + Null;
84201a0e:	42 08       	r0 = r6 + Null;
84201a10:	fe ff 33 ea 	call (m) Lc_aanc_send_event_trigger_1;
                    p_ext_data->quiet_event_clear.running = AANC_EVENT_SENT;
84201a14:	81 20       	rMAC = Null + 2;
84201a16:	61 f0 40 9a 	MB[r4 + 576] = rMAC;

84201a1a <Lc_aanc_process_events_24>:
            }
        }
    }

    /* Clipping event */
    cur_clip = p_ext_data->flags & AANC_CLIPPING_FLAG_MASK;
84201a1a:	61 f0 6e 88 	rMAC = M[r4 + 440];
84201a1e:	15 f0 00 07 	r3 = rMAC AND 0x700;
    prev_clip = p_ext_data->prev_flags & AANC_CLIPPING_FLAG_MASK;
84201a22:	61 f0 6f 88 	rMAC = M[r4 + 444];
84201a26:	11 f0 00 07 	rMAC = rMAC AND 0x700;
    if (cur_clip)
84201a2a:	28 04       	Null = r3 - Null;
84201a2c:	09 60       	if EQ jump (m) Lc_aanc_process_events_27;

84201a2e <Lc_aanc_process_events_25>:
    {
        /* Non-zero flags and no change starts/continues event */
        if (cur_clip == prev_clip)
84201a2e:	68 04       	Null = r3 - rMAC;
84201a30:	10 62       	if NE jump (m) Lc_aanc_process_events_29;

84201a32 <Lc_aanc_process_events_26>:
        {
            aanc_process_event_detect_condition(op_data,
                                                &p_ext_data->clip_event,
                                                AANC_EVENT_ID_CLIP,
                                                (uint16)cur_clip);
84201a32:	c4 20       	r2 = Null + 3;
84201a34:	63 f0 44 22 	r1 = r4 + 580;
84201a38:	42 08       	r0 = r6 + Null;
84201a3a:	48 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
84201a3c:	0a 6e       	jump (m) Lc_aanc_process_events_29;

84201a3e <Lc_aanc_process_events_27>:
        }
    }
    else
    {
        /* Flags reset causes event to be reset */
        if (cur_clip != prev_clip)
84201a3e:	08 04       	Null = rMAC - Null;
84201a40:	08 60       	if EQ jump (m) Lc_aanc_process_events_29;

84201a42 <Lc_aanc_process_events_28>:
        {
            aanc_process_event_clear_condition(op_data, &p_ext_data->clip_event,
                                               AANC_EVENT_ID_CLIP,
                                               (uint16)cur_clip);
84201a42:	c4 20       	r2 = Null + 3;
84201a44:	63 f0 44 22 	r1 = r4 + 580;
84201a48:	05 00       	r3 = Null + Null;
84201a4a:	42 08       	r0 = r6 + Null;
84201a4c:	fe ff 31 eb 	call (m) Lc_aanc_process_event_clear_condition_1;

84201a50 <Lc_aanc_process_events_29>:
        }
    }

    /* Saturation event */
    cur_sat = p_ext_data->flags & AANC_SATURATION_FLAG_MASK;
84201a50:	61 f0 6e 88 	rMAC = M[r4 + 440];
84201a54:	15 f7 00 10 	r3 = rMAC AND 0xf000;
    prev_sat = p_ext_data->prev_flags & AANC_SATURATION_FLAG_MASK;
84201a58:	61 f0 6f 88 	rMAC = M[r4 + 444];
84201a5c:	11 f7 00 10 	rMAC = rMAC AND 0xf000;
    if (cur_sat)
84201a60:	28 04       	Null = r3 - Null;
84201a62:	09 60       	if EQ jump (m) Lc_aanc_process_events_32;

84201a64 <Lc_aanc_process_events_30>:
    {
        /* Non-zero flags and no change starts/continues event */
        if (cur_sat == prev_sat)
84201a64:	68 04       	Null = r3 - rMAC;
84201a66:	10 62       	if NE jump (m) Lc_aanc_process_events_34;

84201a68 <Lc_aanc_process_events_31>:
        {
            aanc_process_event_detect_condition(op_data, &p_ext_data->sat_event,
                                                AANC_EVENT_ID_SAT,
                                                (uint16)cur_sat);
84201a68:	04 21       	r2 = Null + 4;
84201a6a:	63 f0 50 22 	r1 = r4 + 592;
84201a6e:	42 08       	r0 = r6 + Null;
84201a70:	2d 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
84201a72:	0a 6e       	jump (m) Lc_aanc_process_events_34;

84201a74 <Lc_aanc_process_events_32>:
        }
    }
    else
    {
        /* Flags reset causes event to be reset */
        if (cur_sat != prev_sat)
84201a74:	08 04       	Null = rMAC - Null;
84201a76:	08 60       	if EQ jump (m) Lc_aanc_process_events_34;

84201a78 <Lc_aanc_process_events_33>:
        {
            aanc_process_event_clear_condition(op_data, &p_ext_data->sat_event,
                                               AANC_EVENT_ID_SAT,
                                               (uint16)cur_sat);
84201a78:	04 21       	r2 = Null + 4;
84201a7a:	63 f0 50 22 	r1 = r4 + 592;
84201a7e:	05 00       	r3 = Null + Null;
84201a80:	42 08       	r0 = r6 + Null;
84201a82:	fe ff 3b e9 	call (m) Lc_aanc_process_event_clear_condition_1;

84201a86 <Lc_aanc_process_events_34>:
        }
    }

    /* Self-talk event */
    cur_ext = p_ext_data->ag->p_ed_ext->spl;
84201a86:	61 f0 72 88 	rMAC = M[r4 + 456];
84201a8a:	4a 98       	r0 = M[rMAC + 36];
84201a8c:	17 a8       	r5 = M[r0 + 64];
    cur_int = p_ext_data->ag->p_ed_int->spl;
84201a8e:	49 89       	rMAC = M[rMAC + 20];
84201a90:	09 a8       	rMAC = M[rMAC + 64];
    delta_ext = cur_int - cur_ext;
84201a92:	ca 05       	r0 = rMAC - r5;
    if (delta_ext > 0)
84201a94:	10 24       	Null = r0 - 0;
84201a96:	08 6c       	if LE jump (m) Lc_aanc_process_events_36;

84201a98 <Lc_aanc_process_events_35>:
    {
        aanc_process_event_detect_condition(op_data,
                                            &p_ext_data->self_talk_event,
                                            AANC_EVENT_ID_SELF_TALK,
                                            (uint16)(delta_ext >> 16));
84201a98:	95 5a       	r3 = r0 ASHIFT -16;
84201a9a:	44 21       	r2 = Null + 5;
84201a9c:	63 f0 5c 22 	r1 = r4 + 604;
84201aa0:	42 08       	r0 = r6 + Null;
84201aa2:	14 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
84201aa4:	09 6e       	jump (m) Lc_aanc_process_events_37;

84201aa6 <Lc_aanc_process_events_36>:
    else
    {
        aanc_process_event_clear_condition(op_data,
                                           &p_ext_data->self_talk_event,
                                           AANC_EVENT_ID_SELF_TALK,
                                           (uint16)(delta_ext >> 16));
84201aa6:	92 5a       	r0 = r0 ASHIFT -16;
84201aa8:	44 21       	r2 = Null + 5;
84201aaa:	63 f0 5c 22 	r1 = r4 + 604;
84201aae:	95 c6       	r3 = r0 AND 0xffff;
84201ab0:	42 08       	r0 = r6 + Null;
84201ab2:	fe ff 2b e8 	call (m) Lc_aanc_process_event_clear_condition_1;

84201ab6 <Lc_aanc_process_events_37>:
    }
    /* SPL event */
    if (cur_ext > p_ext_data->aanc_cap_params.OFFSET_EVENT_SPL_THRESHOLD)
84201ab6:	61 f0 62 88 	rMAC = M[r4 + 392];
84201aba:	78 04       	Null = r5 - rMAC;
84201abc:	09 f0 97 e0 	if LS jump (m) Lc_aanc_process_events_39;

84201ac0 <Lc_aanc_process_events_38>:
    {
        aanc_process_event_detect_condition(op_data,
                                            &p_ext_data->spl_event,
                                            AANC_EVENT_ID_SPL,
                                            (uint16)(cur_ext >> 16));
84201ac0:	ba 5a       	r0 = r5 ASHIFT -16;
84201ac2:	84 21       	r2 = Null + 6;
84201ac4:	63 f0 68 22 	r1 = r4 + 616;
84201ac8:	95 c6       	r3 = r0 AND 0xffff;
84201aca:	42 08       	r0 = r6 + Null;
84201acc:	fe ff 3f ef 	call (m) Lc_aanc_process_event_detect_condition_1;
84201ad0:	09 6e       	jump (m) Lc_aanc_process_events_40;

84201ad2 <Lc_aanc_process_events_39>:
    else
    {
        aanc_process_event_clear_condition(op_data,
                                           &p_ext_data->spl_event,
                                           AANC_EVENT_ID_SPL,
                                           (uint16)(cur_ext >> 16));
84201ad2:	ba 5a       	r0 = r5 ASHIFT -16;
84201ad4:	84 21       	r2 = Null + 6;
84201ad6:	63 f0 68 22 	r1 = r4 + 616;
84201ada:	95 c6       	r3 = r0 AND 0xffff;
84201adc:	42 08       	r0 = r6 + Null;
84201ade:	fe ff 3f e6 	call (m) Lc_aanc_process_event_clear_condition_1;

84201ae2 <Lc_aanc_process_events_40>:
    }

    /* Gentle mute event */
    if (p_ext_data->cur_mode == AANC_SYSMODE_GENTLE_MUTE ||
        p_ext_data->cur_mode == AANC_SYSMODE_QUIET)
84201ae2:	61 f0 69 88 	rMAC = M[r4 + 420];
84201ae6:	48 25       	Null = rMAC - 5;
84201ae8:	03 60       	if EQ jump (m) Lc_aanc_process_events_42;

84201aea <Lc_aanc_process_events_41>:
84201aea:	88 25       	Null = rMAC - 6;
84201aec:	10 62       	if NE jump (m) Lc_aanc_process_events_45;

84201aee <Lc_aanc_process_events_42>:
    {
        if (p_ext_data->ff_gain.fine == 0)
84201aee:	65 f0 e7 86 	r3 = MHU[r4 + 462];
84201af2:	08 62       	if NE jump (m) Lc_aanc_process_events_44;

84201af4 <Lc_aanc_process_events_43>:
        {
            aanc_process_event_detect_condition(op_data, &p_ext_data->gentle_mute_event,
                                                AANC_EVENT_ID_GENTLE_MUTE,
                                                p_ext_data->ff_gain.fine);            
84201af4:	c4 21       	r2 = Null + 7;
84201af6:	63 f0 74 22 	r1 = r4 + 628;
84201afa:	42 08       	r0 = r6 + Null;
84201afc:	fe ff 2f ee 	call (m) Lc_aanc_process_event_detect_condition_1;
84201b00:	06 6e       	jump (m) Lc_aanc_process_events_45;

84201b02 <Lc_aanc_process_events_44>:
        }
        else
        {
            aanc_clear_event(&p_ext_data->gentle_mute_event);
84201b02:	61 f0 74 22 	rMAC = r4 + 628;
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
84201b06:	4a 88       	r0 = M[rMAC + 4];
84201b08:	0a ee       	M[rMAC + Null] = r0;
       p_event->running = AANC_EVENT_CLEAR;
84201b0a:	08 9a       	MB[rMAC + 8] = Null;

84201b0c <Lc_aanc_process_events_45>:
        {
            aanc_clear_event(&p_ext_data->gentle_mute_event);
        }
    }

    return TRUE;
84201b0c:	42 20       	r0 = Null + 1;

84201b0e <Lc_aanc_process_events_46>:
}
84201b0e:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84201b10:	d8 4c       	rts;

84201b12 <Lc_aanc_initialize_ramp_1>:
 */
static void aanc_initialize_ramp(AANC_RAMP *p_ramp,
                                 uint16 target,
                                 unsigned timer_param,
                                 unsigned delay_param)
{
84201b12:	71 1c       	pushm <FP(=SP), r4>;
    uint16 timer_duration, delay_duration;

    if (timer_param == 0 && delay_param == 0)
84201b14:	20 04       	Null = r2 - Null;
84201b16:	08 62       	if NE jump (m) Lc_aanc_initialize_ramp_4;

84201b18 <Lc_aanc_initialize_ramp_2>:
84201b18:	28 04       	Null = r3 - Null;
84201b1a:	06 62       	if NE jump (m) Lc_aanc_initialize_ramp_4;

84201b1c <Lc_aanc_initialize_ramp_3>:
    {
        *p_ramp->p_gain = target;
84201b1c:	11 89       	rMAC = M[r0 + 16];
84201b1e:	0b ec       	MH[rMAC + Null] = r1;
        p_ramp->state = AANC_RAMP_FINISHED;
84201b20:	c1 20       	rMAC = Null + 3;
84201b22:	11 9b       	MB[r0 + 12] = rMAC;
        return;
84201b24:	18 6e       	jump (m) Lc_aanc_initialize_ramp_5;

84201b26 <Lc_aanc_initialize_ramp_4>:
    }

    /* Calculate number of frames from timer parameter */
    timer_duration = (uint16) (
                        (timer_param * AANC_FRAME_RATE) >> 20);
84201b26:	7d f4 94 c9 	r2 = r2 * 250 (int);
84201b2a:	e4 52       	r2 = r2 LSHIFT -20;
    delay_duration = (uint16) (
                        (delay_param * AANC_FRAME_RATE) >> 20);
84201b2c:	7d f5 95 c9 	r3 = r3 * 250 (int);

    p_ramp->value = *p_ramp->p_gain << 16;
84201b30:	11 89       	rMAC = M[r0 + 16];
84201b32:	0e e6       	r4 = MHU[rMAC + Null];
84201b34:	b6 56       	r4 = r4 LSHIFT 16;
84201b36:	96 8e       	M[r0 + 8] = r4;
    p_ramp->target = target;
84201b38:	53 8c       	MH[r0 + 2] = r1;
    p_ramp->rate = ((target << 16) - p_ramp->value) / timer_duration;
84201b3a:	9b 56       	r1 = r1 LSHIFT 16;
84201b3c:	9b 05       	r1 = r1 - r4;
84201b3e:	a3 4c       	Div = r1 / r2;
84201b40:	c1 4c       	rMAC = DivResult;
84201b42:	51 8e       	M[r0 + 4] = rMAC;
    p_ramp->duration = timer_duration;
84201b44:	14 ec       	MH[r0 + Null] = r2;
    if (delay_duration == 0)
    {
        p_ramp->state = AANC_RAMP_RUNNING;
84201b46:	41 20       	rMAC = Null + 1;
84201b48:	ed 52       	r3 = r3 LSHIFT -20;
84201b4a:	a0 f0 41 ce 	if EQ rMAC = Null + 2;
84201b4e:	11 9b       	MB[r0 + 12] = rMAC;
    }
    else
    {
        p_ramp->state = AANC_RAMP_WAITING;
    }
    p_ramp->frame_counter = (uint16)(p_ramp->duration + delay_duration);
84201b50:	29 01       	rMAC = r3 + r2;
84201b52:	11 9d       	MH[r0 + 24] = rMAC;

84201b54 <Lc_aanc_initialize_ramp_5>:
}
84201b54:	71 48       	popm <FP, r4>;
84201b56:	d8 4c       	rts;

84201b58 <Lc_aanc_process_ramp_1>:
 */
static void aanc_process_ramp(AANC_RAMP *p_ramp)
{
    unsigned rounded_gain;

    switch (p_ramp->state)
84201b58:	11 91       	rMAC = MBS[r0 + 12];
84201b5a:	11 60       	if EQ jump (m) Lc_aanc_process_ramp_6;

84201b5c <Lc_aanc_process_ramp_2>:
84201b5c:	48 24       	Null = rMAC - 1;
84201b5e:	11 60       	if EQ jump (m) Lc_aanc_process_ramp_7;

84201b60 <Lc_aanc_process_ramp_3>:
84201b60:	88 24       	Null = rMAC - 2;
84201b62:	23 62       	if NE jump (m) Lc_aanc_process_ramp_10;

84201b64 <Lc_aanc_process_ramp_4>:
            {
                p_ramp->state = AANC_RAMP_RUNNING;
            }
            break;
        case AANC_RAMP_RUNNING:
            p_ramp->frame_counter -= 1;
84201b64:	11 95       	rMAC = MHS[r0 + 24];
84201b66:	49 24       	rMAC = rMAC - 1;
84201b68:	09 0c       	rMAC = SE16 rMAC;
84201b6a:	11 9d       	MH[r0 + 24] = rMAC;
            if (p_ramp->frame_counter <= 0)
84201b6c:	08 24       	Null = rMAC - 0;
84201b6e:	13 6a       	if GT jump (m) Lc_aanc_process_ramp_9;

84201b70 <Lc_aanc_process_ramp_5>:
            {
                p_ramp->state = AANC_RAMP_FINISHED;
84201b70:	c1 20       	rMAC = Null + 3;
84201b72:	11 9b       	MB[r0 + 12] = rMAC;
                /* Make the ramp finishes */
                *p_ramp->p_gain = p_ramp->target;
84201b74:	51 86       	rMAC = MHU[r0 + 2];
84201b76:	12 89       	r0 = M[r0 + 16];
84201b78:	11 ec       	MH[r0 + Null] = rMAC;
84201b7a:	17 6e       	jump (m) Lc_aanc_process_ramp_10;

84201b7c <Lc_aanc_process_ramp_6>:
    unsigned rounded_gain;

    switch (p_ramp->state)
    {
        case AANC_RAMP_INITIALIZED:
            p_ramp->state = AANC_RAMP_WAITING;
84201b7c:	41 20       	rMAC = Null + 1;
84201b7e:	11 9b       	MB[r0 + 12] = rMAC;

84201b80 <Lc_aanc_process_ramp_7>:
        case AANC_RAMP_WAITING:
            p_ramp->frame_counter -= 1;
84201b80:	11 95       	rMAC = MHS[r0 + 24];
84201b82:	49 24       	rMAC = rMAC - 1;
84201b84:	09 0c       	rMAC = SE16 rMAC;
84201b86:	11 9d       	MH[r0 + 24] = rMAC;
            if (p_ramp->frame_counter <= p_ramp->duration)
84201b88:	13 e6       	r1 = MHU[r0 + Null];
84201b8a:	c8 04       	Null = rMAC - r1;
84201b8c:	0e 6a       	if GT jump (m) Lc_aanc_process_ramp_10;

84201b8e <Lc_aanc_process_ramp_8>:
            {
                p_ramp->state = AANC_RAMP_RUNNING;
84201b8e:	81 20       	rMAC = Null + 2;
84201b90:	11 9b       	MB[r0 + 12] = rMAC;
84201b92:	0b 6e       	jump (m) Lc_aanc_process_ramp_10;

84201b94 <Lc_aanc_process_ramp_9>:
                /* Make the ramp finishes */
                *p_ramp->p_gain = p_ramp->target;
            }
            else
            {
                p_ramp->value += p_ramp->rate;
84201b94:	91 88       	rMAC = M[r0 + 8];
84201b96:	53 88       	r1 = M[r0 + 4];
84201b98:	59 00       	rMAC = r1 + rMAC;
84201b9a:	91 8e       	M[r0 + 8] = rMAC;
                rounded_gain = (p_ramp->value + (1 << 15)) >> 16;
84201b9c:	02 f0 13 f0 	r1 = rMAC + 32768;
84201ba0:	00 20 
84201ba2:	9b 5a       	r1 = r1 ASHIFT -16;
                *p_ramp->p_gain = (uint16)rounded_gain;
84201ba4:	11 89       	rMAC = M[r0 + 16];
84201ba6:	0b 8c       	MH[rMAC + 0] = r1;

84201ba8 <Lc_aanc_process_ramp_10>:
84201ba8:	d8 4c       	rts;

84201baa <$_AANC_GetDefaults>:
84201baa:	20 f0 c7 24 	Null = r0 - 199;
   0x00000000u,			// GAIN_DROP_FRAME_COUNT
   0x00000000u			// GAIN_MIN_FREEZ_TIME
};

unsigned *AANC_GetDefaults(unsigned capid){
	switch(capid){
84201bae:	05 60       	if EQ jump (m) Lc_AANC_GetDefaults_3;

84201bb0 <Lc_AANC_GetDefaults_2>:
84201bb0:	01 f0 20 f0 	Null = r0 - 16543;
84201bb4:	9f 24 
84201bb6:	05 62       	if NE jump (m) Lc_AANC_GetDefaults_4;

84201bb8 <Lc_AANC_GetDefaults_3>:
		case 0x00C7: return defaults_aancAANC_MONO_16K;
84201bb8:	f8 ff 02 f0 	r0 = Null + -8388604;
84201bbc:	04 40 
84201bbe:	02 6e       	jump (m) Lc_AANC_GetDefaults_5;

84201bc0 <Lc_AANC_GetDefaults_4>:
		case 0x409F: return defaults_aancAANC_MONO_16K;
	}
	return((unsigned *)0);
84201bc0:	02 00       	r0 = Null + Null;

84201bc2 <Lc_AANC_GetDefaults_5>:
84201bc2:	d8 4c       	rts;

84201bc4 <$_aanc_proc_create>:
84201bc4:	f6 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>;
/******************************************************************************
Public Function Implementations
*/

bool aanc_proc_create(ADAPTIVE_GAIN **pp_ag, unsigned sample_rate)
{
84201bc6:	54 4c       	SP = SP + 80;
84201bc8:	13 09       	r9 = r0 + Null;
84201bca:	43 de       	M[FP + 32] = r1;

    ADAPTIVE_GAIN *p_ag = xzpnew(ADAPTIVE_GAIN);
84201bcc:	c3 20       	r1 = Null + 3;
84201bce:	02 f0 9c 40 	r0 = Null + 156;
84201bd2:	ff fd 26 f0 	call (m) 0x68a6;
84201bd6:	35 e6 
84201bd8:	16 00       	r4 = r0 + Null;
    uint16 fxlms_dmx_words, fxlms_dm_words;
    uint16 ed_dmx_words, ed_dm1_words;
    FXLMS100_FILTER_COEFFS* coeffs;

    if (p_ag == NULL)
84201bda:	10 62       	if NE jump (m) Lc_aanc_proc_create_5;

84201bdc <Lc_aanc_proc_create_2>:
    {
        *pp_ag = NULL;
84201bdc:	b0 f0 00 ee 	M[r9 + Null] = Null;
        L2_DBG_MSG("AANC_PROC failed to allocate adaptive gain");
84201be0:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201be4:	88 24       	Null = rMAC - 2;
84201be6:	07 68       	if LT jump (m) Lc_aanc_proc_create_4;

84201be8 <Lc_aanc_proc_create_3>:
84201be8:	55 f1 02 f0 	r0 = Null + 357564612;
84201bec:	c4 40 
84201bee:	ef fd f8 ff 	call (m) 0xccc;
84201bf2:	3f e6 

84201bf4 <Lc_aanc_proc_create_4>:
        return FALSE;
84201bf4:	02 00       	r0 = Null + Null;
84201bf6:	0f f0 e5 e6 	jump (m) Lc_aanc_proc_create_37;

84201bfa <Lc_aanc_proc_create_5>:
    }

    *pp_ag = p_ag;
84201bfa:	b6 f0 00 ee 	M[r9 + Null] = r4;

    p_ag->p_aanc_reinit_flag = NULL;
84201bfe:	30 ee       	M[r4 + Null] = Null;

    /* Allocate internal input cbuffer in DM1 */
    if (!aanc_proc_create_cbuffer(&p_ag->p_tmp_int_ip, MALLOC_PREFERENCE_DM1))
84201c00:	43 20       	r1 = Null + 1;
84201c02:	32 23       	r0 = r4 + 12;
84201c04:	04 f0 3f ee 	call (m) Lc_aanc_proc_create_cbuffer_1;
84201c08:	10 04       	Null = r0 - Null;
84201c0a:	0f 62       	if NE jump (m) Lc_aanc_proc_create_8;

84201c0c <Lc_aanc_proc_create_6>:
    {
        aanc_proc_destroy(pp_ag);
84201c0c:	5a 08       	r0 = r9 + Null;
84201c0e:	01 f0 33 ea 	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate int mic input buffer");
84201c12:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201c16:	88 24       	Null = rMAC - 2;
84201c18:	ee 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201c1a <Lc_aanc_proc_create_7>:
84201c1a:	55 f1 02 f0 	r0 = Null + 357564655;
84201c1e:	ef 40 
84201c20:	ef fd f8 ff 	call (m) 0xccc;
84201c24:	2d e5 
84201c26:	e7 6f       	jump (m) Lc_aanc_proc_create_4;

84201c28 <Lc_aanc_proc_create_8>:
        return FALSE;
    }

    /* Allocate external input cbuffer in DM2 */
    if (!aanc_proc_create_cbuffer(&p_ag->p_tmp_ext_ip, MALLOC_PREFERENCE_DM2))
84201c28:	83 20       	r1 = Null + 2;
84201c2a:	32 2b       	r0 = r4 + 28;
84201c2c:	04 f0 37 ed 	call (m) Lc_aanc_proc_create_cbuffer_1;
84201c30:	10 04       	Null = r0 - Null;
84201c32:	0f 62       	if NE jump (m) Lc_aanc_proc_create_11;

84201c34 <Lc_aanc_proc_create_9>:
    {
        aanc_proc_destroy(pp_ag);
84201c34:	5a 08       	r0 = r9 + Null;
84201c36:	01 f0 2b e9 	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate ext mic input buffer");
84201c3a:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201c3e:	88 24       	Null = rMAC - 2;
84201c40:	da 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201c42 <Lc_aanc_proc_create_10>:
84201c42:	55 f1 02 f0 	r0 = Null + 357564705;
84201c46:	21 41 
84201c48:	ef fd f8 ff 	call (m) 0xccc;
84201c4c:	25 e4 
84201c4e:	d3 6f       	jump (m) Lc_aanc_proc_create_4;

84201c50 <Lc_aanc_proc_create_11>:
        return FALSE;
    }

    /* Allocate int mic output cbuffer in DM2 */
    if (!aanc_proc_create_cbuffer(&p_ag->p_tmp_int_op, MALLOC_PREFERENCE_DM2))
84201c50:	83 20       	r1 = Null + 2;
84201c52:	32 28       	r0 = r4 + 16;
84201c54:	04 f0 2f ec 	call (m) Lc_aanc_proc_create_cbuffer_1;
84201c58:	10 04       	Null = r0 - Null;
84201c5a:	0f 62       	if NE jump (m) Lc_aanc_proc_create_14;

84201c5c <Lc_aanc_proc_create_12>:
    {
        aanc_proc_destroy(pp_ag);
84201c5c:	5a 08       	r0 = r9 + Null;
84201c5e:	01 f0 23 e8 	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate int mic output buffer");
84201c62:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201c66:	88 24       	Null = rMAC - 2;
84201c68:	c6 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201c6a <Lc_aanc_proc_create_13>:
84201c6a:	55 f1 02 f0 	r0 = Null + 357564755;
84201c6e:	53 41 
84201c70:	ef fd f8 ff 	call (m) 0xccc;
84201c74:	3d e2 
84201c76:	bf 6f       	jump (m) Lc_aanc_proc_create_4;

84201c78 <Lc_aanc_proc_create_14>:
        return FALSE;
    }

    /* Allocate ext mic output cbuffer in DM2 */
    if (!aanc_proc_create_cbuffer(&p_ag->p_tmp_ext_op, MALLOC_PREFERENCE_DM2))
84201c78:	83 20       	r1 = Null + 2;
84201c7a:	32 30       	r0 = r4 + 32;
84201c7c:	04 f0 27 eb 	call (m) Lc_aanc_proc_create_cbuffer_1;
84201c80:	10 04       	Null = r0 - Null;
84201c82:	0f 62       	if NE jump (m) Lc_aanc_proc_create_17;

84201c84 <Lc_aanc_proc_create_15>:
    {
        aanc_proc_destroy(pp_ag);
84201c84:	5a 08       	r0 = r9 + Null;
84201c86:	01 f0 3b e6 	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate ext mic output buffer");
84201c8a:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201c8e:	88 24       	Null = rMAC - 2;
84201c90:	b2 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201c92 <Lc_aanc_proc_create_16>:
84201c92:	55 f1 02 f0 	r0 = Null + 357564806;
84201c96:	86 41 
84201c98:	ef fd f8 ff 	call (m) 0xccc;
84201c9c:	35 e1 
84201c9e:	ab 6f       	jump (m) Lc_aanc_proc_create_4;

84201ca0 <Lc_aanc_proc_create_17>:
        return FALSE;
    }

    /* Create playback cbuffer without specific bank allocation */
    p_ag->p_tmp_pb_ip = cbuffer_create_with_malloc(AANC_INTERNAL_BUFFER_SIZE,
                                                   BUF_DESC_SW_BUFFER);
84201ca0:	02 f0 41 40 	r0 = Null + 65;
84201ca4:	03 00       	r1 = Null + Null;
84201ca6:	ff fd 93 f0 	call (m) 0x142c6;
84201caa:	21 e1 
84201cac:	f2 9e       	M[r4 + 44] = r0;
    if (p_ag->p_tmp_pb_ip == NULL)
84201cae:	f1 98       	rMAC = M[r4 + 44];
84201cb0:	0f 62       	if NE jump (m) Lc_aanc_proc_create_20;

84201cb2 <Lc_aanc_proc_create_18>:
    {
        aanc_proc_destroy(pp_ag);
84201cb2:	5a 08       	r0 = r9 + Null;
84201cb4:	01 f0 2d e5 	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate playback cbuffer");
84201cb8:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201cbc:	88 24       	Null = rMAC - 2;
84201cbe:	9b 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201cc0 <Lc_aanc_proc_create_19>:
84201cc0:	55 f1 02 f0 	r0 = Null + 357564857;
84201cc4:	b9 41 
84201cc6:	ef fd f8 ff 	call (m) 0xccc;
84201cca:	27 e0 
84201ccc:	94 6f       	jump (m) Lc_aanc_proc_create_4;

84201cce <Lc_aanc_proc_create_20>:
        return FALSE;
    }

    /* Register and reserve scratch memory */
    if (!scratch_register())
84201cce:	ef fd fd ff 	call (m) 0x17fe;
84201cd2:	31 e9 
84201cd4:	10 04       	Null = r0 - Null;
84201cd6:	0f 62       	if NE jump (m) Lc_aanc_proc_create_23;

84201cd8 <Lc_aanc_proc_create_21>:
    {
        aanc_proc_destroy(pp_ag);
84201cd8:	5a 08       	r0 = r9 + Null;
84201cda:	01 f0 27 e4 	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to register scratch memory");
84201cde:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201ce2:	88 24       	Null = rMAC - 2;
84201ce4:	88 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201ce6 <Lc_aanc_proc_create_22>:
84201ce6:	55 f1 02 f0 	r0 = Null + 357564903;
84201cea:	e7 41 
84201cec:	ef fd f7 ff 	call (m) 0xccc;
84201cf0:	21 ef 
84201cf2:	81 6f       	jump (m) Lc_aanc_proc_create_4;

84201cf4 <Lc_aanc_proc_create_23>:
        return FALSE;
    }
    p_ag->scratch_registered = TRUE;
84201cf4:	41 20       	rMAC = Null + 1;
84201cf6:	61 f0 25 8e 	M[r4 + 148] = rMAC;

    if (!scratch_reserve(FXLMS100_SCRATCH_MEMORY, MALLOC_PREFERENCE_NONE) ||
        !scratch_reserve(FXLMS100_SCRATCH_MEMORY, MALLOC_PREFERENCE_NONE))
84201cfa:	c3 20       	r1 = Null + 3;
84201cfc:	02 f0 00 41 	r0 = Null + 256;
84201d00:	ef fd fe ff 	call (m) 0x190a;
84201d04:	2b e0 
84201d06:	10 04       	Null = r0 - Null;
84201d08:	09 60       	if EQ jump (m) Lc_aanc_proc_create_25;

84201d0a <Lc_aanc_proc_create_24>:
84201d0a:	c3 20       	r1 = Null + 3;
84201d0c:	02 f0 00 41 	r0 = Null + 256;
84201d10:	ef fd fd ff 	call (m) 0x190a;
84201d14:	3b ef 
84201d16:	10 04       	Null = r0 - Null;
84201d18:	0f 62       	if NE jump (m) Lc_aanc_proc_create_27;

84201d1a <Lc_aanc_proc_create_25>:
    {
        aanc_proc_destroy(pp_ag);
84201d1a:	5a 08       	r0 = r9 + Null;
84201d1c:	01 f0 25 e2 	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate fxlms scratch memory");
84201d20:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201d24:	88 24       	Null = rMAC - 2;
84201d26:	67 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201d28 <Lc_aanc_proc_create_26>:
84201d28:	55 f1 02 f0 	r0 = Null + 357564947;
84201d2c:	13 42 
84201d2e:	ef fd f7 ff 	call (m) 0xccc;
84201d32:	3f ec 
84201d34:	60 6f       	jump (m) Lc_aanc_proc_create_4;

84201d36 <Lc_aanc_proc_create_27>:
        return FALSE;
    }

    /* Allocate FxLMS and ED100 memory using the mem_table API */
    fxlms_dmx_words = (uint16)(aanc_fxlms100_dmx_bytes()/sizeof(unsigned));
84201d36:	05 f0 21 e2 	call (m) $_aanc_fxlms100_dmx_bytes;
84201d3a:	57 50       	r5 = r0 LSHIFT -2;
    fxlms_dm_words = (uint16)(AANC_PROC_FXLMS_DM_BYTES/sizeof(unsigned));
    ed_dmx_words = (uint16)(aanc_ed100_dmx_bytes()/sizeof(unsigned));
84201d3c:	06 f0 39 e5 	call (m) $_aanc_ed100_dmx_bytes;
84201d40:	7f f2 da c8 	r8 = r0 LSHIFT -2;
    ed_dm1_words = (uint16)(aanc_ed100_dm1_bytes()/sizeof(unsigned));
84201d44:	06 f0 37 e5 	call (m) $_aanc_ed100_dm1_bytes;
84201d48:	52 50       	r0 = r0 LSHIFT -2;
84201d4a:	4a de       	M[FP + 36] = r0;

    p_ag->p_table = xzpnewn(AANC_PROC_MEM_TABLE_SIZE, malloc_t_entry);
84201d4c:	c3 20       	r1 = Null + 3;
84201d4e:	82 39       	r0 = Null + 54;
84201d50:	ff fd 25 f0 	call (m) 0x68a6;
84201d54:	37 ea 
84201d56:	72 8e       	M[r4 + 4] = r0;
84201d58:	18 71       	r6 = Null + 3;
84201d5a:	01 3a       	rMAC = Null + 56;
84201d5c:	a7 dc       	MH[FP + 40] = r5;
84201d5e:	e8 f0 15 8c 	MH[FP + 42] = r6;
84201d62:	b1 dc       	MH[FP + 44] = rMAC;
    p_ag->p_table[0] = (malloc_t_entry){
        fxlms_dmx_words, MALLOC_PREFERENCE_NONE,
        offsetof(ADAPTIVE_GAIN, p_fxlms)};
84201d64:	83 12       	r1 = FP + 40;
84201d66:	84 21       	r2 = Null + 6;
84201d68:	ff fd c2 f0 	call (m) 0x1a2ca;
84201d6c:	23 eb 
84201d6e:	09 f0 44 40 	r7 = Null + 68;
84201d72:	47 20       	r5 = Null + 1;
84201d74:	01 3b       	rMAC = Null + 60;
84201d76:	e9 f0 18 8c 	MH[FP + 48] = r7;
84201d7a:	cf dc       	MH[FP + 50] = r5;
84201d7c:	d1 dc       	MH[FP + 52] = rMAC;
    p_ag->p_table[1] = (malloc_t_entry){
        fxlms_dm_words, MALLOC_PREFERENCE_DM1,
        offsetof(ADAPTIVE_GAIN, p_fxlms_dm1)};
84201d7e:	03 13       	r1 = FP + 48;
84201d80:	71 88       	rMAC = M[r4 + 4];
84201d82:	84 21       	r2 = Null + 6;
84201d84:	8a 21       	r0 = rMAC + 6;
84201d86:	ff fd c2 f0 	call (m) 0x1a2ca;
84201d8a:	25 ea 
84201d8c:	e9 f0 1c 8c 	MH[FP + 56] = r7;
84201d90:	81 20       	rMAC = Null + 2;
84201d92:	e9 dc       	MH[FP + 58] = rMAC;
84201d94:	01 f0 40 40 	rMAC = Null + 64;
84201d98:	f1 dc       	MH[FP + 60] = rMAC;
    p_ag->p_table[2] = (malloc_t_entry){
        fxlms_dm_words, MALLOC_PREFERENCE_DM2,
        offsetof(ADAPTIVE_GAIN, p_fxlms_dm2)};
84201d9a:	83 13       	r1 = FP + 56;
84201d9c:	71 88       	rMAC = M[r4 + 4];
84201d9e:	84 21       	r2 = Null + 6;
84201da0:	0a 23       	r0 = rMAC + 12;
84201da2:	ff fd c2 f0 	call (m) 0x1a2ca;
84201da6:	29 e9 
84201da8:	ea f0 20 8c 	MH[FP + 64] = r8;
84201dac:	01 29       	rMAC = Null + 20;
84201dae:	e8 f0 21 8c 	MH[FP + 66] = r6;
84201db2:	11 dd       	MH[FP + 68] = rMAC;
    p_ag->p_table[3] = (malloc_t_entry){
        ed_dmx_words, MALLOC_PREFERENCE_NONE,
        offsetof(ADAPTIVE_GAIN, p_ed_int)};
84201db4:	03 14       	r1 = FP + 64;
84201db6:	71 88       	rMAC = M[r4 + 4];
84201db8:	84 21       	r2 = Null + 6;
84201dba:	8a 28       	r0 = rMAC + 18;
84201dbc:	ff fd c2 f0 	call (m) 0x1a2ca;
84201dc0:	2f e8 
84201dc2:	49 d8       	rMAC = M[FP + 36];
84201dc4:	21 dd       	MH[FP + 72] = rMAC;
84201dc6:	2f dd       	MH[FP + 74] = r5;
84201dc8:	01 2a       	rMAC = Null + 24;
84201dca:	31 dd       	MH[FP + 76] = rMAC;
    p_ag->p_table[4] = (malloc_t_entry){
        ed_dm1_words, MALLOC_PREFERENCE_DM1,
        offsetof(ADAPTIVE_GAIN, p_ed_int_dm1)};
84201dcc:	83 14       	r1 = FP + 72;
84201dce:	71 88       	rMAC = M[r4 + 4];
84201dd0:	84 21       	r2 = Null + 6;
84201dd2:	0a 2a       	r0 = rMAC + 24;
84201dd4:	ff fd c2 f0 	call (m) 0x1a2ca;
84201dd8:	37 e7 
84201dda:	ea f0 28 8c 	MH[FP + 80] = r8;
84201dde:	01 31       	rMAC = Null + 36;
84201de0:	e8 f0 29 8c 	MH[FP + 82] = r6;
84201de4:	51 dd       	MH[FP + 84] = rMAC;
    p_ag->p_table[5] = (malloc_t_entry){
        ed_dmx_words, MALLOC_PREFERENCE_NONE,
        offsetof(ADAPTIVE_GAIN, p_ed_ext)};
84201de6:	03 15       	r1 = FP + 80;
84201de8:	71 88       	rMAC = M[r4 + 4];
84201dea:	84 21       	r2 = Null + 6;
84201dec:	8a 2b       	r0 = rMAC + 30;
84201dee:	ff fd c2 f0 	call (m) 0x1a2ca;
84201df2:	3d e6 
84201df4:	49 d8       	rMAC = M[FP + 36];
84201df6:	61 dd       	MH[FP + 88] = rMAC;
84201df8:	6f dd       	MH[FP + 90] = r5;
84201dfa:	01 32       	rMAC = Null + 40;
84201dfc:	71 dd       	MH[FP + 92] = rMAC;
    p_ag->p_table[6] = (malloc_t_entry){
        ed_dm1_words, MALLOC_PREFERENCE_DM1,
        offsetof(ADAPTIVE_GAIN, p_ed_ext_dm1)};
84201dfe:	83 15       	r1 = FP + 88;
84201e00:	71 88       	rMAC = M[r4 + 4];
84201e02:	84 21       	r2 = Null + 6;
84201e04:	0a 31       	r0 = rMAC + 36;
84201e06:	ff fd c2 f0 	call (m) 0x1a2ca;
84201e0a:	25 e6 
84201e0c:	ea f0 30 8c 	MH[FP + 96] = r8;
84201e10:	01 38       	rMAC = Null + 48;
84201e12:	e8 f0 31 8c 	MH[FP + 98] = r6;
84201e16:	91 dd       	MH[FP + 100] = rMAC;
    p_ag->p_table[7] = (malloc_t_entry){
        ed_dmx_words, MALLOC_PREFERENCE_NONE,
        offsetof(ADAPTIVE_GAIN, p_ed_pb)};
84201e18:	03 16       	r1 = FP + 96;
84201e1a:	71 88       	rMAC = M[r4 + 4];
84201e1c:	84 21       	r2 = Null + 6;
84201e1e:	8a 32       	r0 = rMAC + 42;
84201e20:	ff fd c2 f0 	call (m) 0x1a2ca;
84201e24:	2b e5 
84201e26:	49 d8       	rMAC = M[FP + 36];
84201e28:	a1 dd       	MH[FP + 104] = rMAC;
84201e2a:	af dd       	MH[FP + 106] = r5;
84201e2c:	01 39       	rMAC = Null + 52;
84201e2e:	b1 dd       	MH[FP + 108] = rMAC;
    p_ag->p_table[8] = (malloc_t_entry){
        ed_dm1_words, MALLOC_PREFERENCE_DM1,
        offsetof(ADAPTIVE_GAIN, p_ed_pb_dm1)};
84201e30:	83 16       	r1 = FP + 104;
84201e32:	71 88       	rMAC = M[r4 + 4];
84201e34:	84 21       	r2 = Null + 6;
84201e36:	0a 38       	r0 = rMAC + 48;
84201e38:	ff fd c2 f0 	call (m) 0x1a2ca;
84201e3c:	33 e4 

    if (!mem_table_zalloc((void *)p_ag, p_ag->p_table, AANC_PROC_MEM_TABLE_SIZE))
84201e3e:	44 22       	r2 = Null + 9;
84201e40:	73 88       	r1 = M[r4 + 4];
84201e42:	32 00       	r0 = r4 + Null;
84201e44:	ef fd fe ff 	call (m) 0x1bfe;
84201e48:	3b ed 
84201e4a:	10 04       	Null = r0 - Null;
84201e4c:	10 62       	if NE jump (m) Lc_aanc_proc_create_30;

84201e4e <Lc_aanc_proc_create_28>:
    {
        aanc_proc_destroy(pp_ag);
84201e4e:	5a 08       	r0 = r9 + Null;
84201e50:	88 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate memory");
84201e52:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201e56:	88 24       	Null = rMAC - 2;
84201e58:	fb ff 9d eb 	if LT jump (m) Lc_aanc_proc_create_4;

84201e5c <Lc_aanc_proc_create_29>:
84201e5c:	55 f1 02 f0 	r0 = Null + 357564997;
84201e60:	45 42 
84201e62:	ef fd f7 ff 	call (m) 0xccc;
84201e66:	2b e3 
84201e68:	ff ff 8d eb 	jump (m) Lc_aanc_proc_create_4;

84201e6c <Lc_aanc_proc_create_30>:
        return FALSE;
    }

    /* Create shared ED cbuffer without specific bank allocation */
    p_ag->p_tmp_ed = cbuffer_create_with_malloc(ED100_DEFAULT_BUFFER_SIZE,
                                                BUF_DESC_SW_BUFFER);
84201e6c:	02 f0 41 40 	r0 = Null + 65;
84201e70:	03 00       	r1 = Null + Null;
84201e72:	ff fd 92 f0 	call (m) 0x142c6;
84201e76:	35 e2 
84201e78:	b2 8e       	M[r4 + 8] = r0;
    if (p_ag->p_tmp_ed == NULL)
84201e7a:	b1 88       	rMAC = M[r4 + 8];
84201e7c:	10 62       	if NE jump (m) Lc_aanc_proc_create_33;

84201e7e <Lc_aanc_proc_create_31>:
    {
        aanc_proc_destroy(pp_ag);
84201e7e:	5a 08       	r0 = r9 + Null;
84201e80:	70 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate ED cbuffer");
84201e82:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201e86:	88 24       	Null = rMAC - 2;
84201e88:	fb ff ed ea 	if LT jump (m) Lc_aanc_proc_create_4;

84201e8c <Lc_aanc_proc_create_32>:
84201e8c:	55 f1 02 f0 	r0 = Null + 357565033;
84201e90:	69 42 
84201e92:	ef fd f7 ff 	call (m) 0xccc;
84201e96:	3b e1 
84201e98:	ff ff dd ea 	jump (m) Lc_aanc_proc_create_4;

84201e9c <Lc_aanc_proc_create_33>:
        return FALSE;
    }

    aanc_ed100_create(p_ag->p_ed_int, p_ag->p_ed_int_dm1, sample_rate);
84201e9c:	b3 89       	r1 = M[r4 + 24];
84201e9e:	72 89       	r0 = M[r4 + 20];
84201ea0:	44 d8       	r2 = M[FP + 32];
84201ea2:	05 f0 3f ea 	call (m) $_aanc_ed100_create;
    aanc_ed100_create(p_ag->p_ed_ext, p_ag->p_ed_ext_dm1, sample_rate);
84201ea6:	b3 98       	r1 = M[r4 + 40];
84201ea8:	72 98       	r0 = M[r4 + 36];
84201eaa:	44 d8       	r2 = M[FP + 32];
84201eac:	05 f0 35 ea 	call (m) $_aanc_ed100_create;
    aanc_ed100_create(p_ag->p_ed_pb, p_ag->p_ed_pb_dm1, sample_rate);
84201eb0:	73 99       	r1 = M[r4 + 52];
84201eb2:	32 99       	r0 = M[r4 + 48];
84201eb4:	44 d8       	r2 = M[FP + 32];
84201eb6:	05 f0 2b ea 	call (m) $_aanc_ed100_create;

    /* Initialize number of taps to allow correct buffer alignment in create */
    p_ag->p_fxlms->p_plant.num_coeffs = AANC_PROC_NUM_TAPS_PLANT;
84201eba:	01 22       	rMAC = Null + 8;
84201ebc:	b2 99       	r0 = M[r4 + 56];
84201ebe:	21 f0 34 8c 	MH[r0 + 104] = rMAC;
    p_ag->p_fxlms->p_plant.full_num_coeffs = AANC_PROC_NUM_TAPS_PLANT;
84201ec2:	b2 99       	r0 = M[r4 + 56];
84201ec4:	21 f0 35 8c 	MH[r0 + 106] = rMAC;
    p_ag->p_fxlms->p_control_0.num_coeffs = AANC_PROC_NUM_TAPS_CONTROL;
84201ec8:	b2 99       	r0 = M[r4 + 56];
84201eca:	21 f0 42 8c 	MH[r0 + 132] = rMAC;
    p_ag->p_fxlms->p_control_0.full_num_coeffs = AANC_PROC_NUM_TAPS_CONTROL;
84201ece:	b2 99       	r0 = M[r4 + 56];
84201ed0:	21 f0 43 8c 	MH[r0 + 134] = rMAC;
    p_ag->p_fxlms->p_control_1.num_coeffs = AANC_PROC_NUM_TAPS_CONTROL;
84201ed4:	b2 99       	r0 = M[r4 + 56];
84201ed6:	21 f0 50 8c 	MH[r0 + 160] = rMAC;
    p_ag->p_fxlms->p_control_1.full_num_coeffs = AANC_PROC_NUM_TAPS_CONTROL;
84201eda:	b2 99       	r0 = M[r4 + 56];
84201edc:	21 f0 51 8c 	MH[r0 + 162] = rMAC;
    p_ag->p_fxlms->p_bp_int.num_coeffs = AANC_PROC_NUM_TAPS_BP;
84201ee0:	41 21       	rMAC = Null + 5;
84201ee2:	b2 99       	r0 = M[r4 + 56];
84201ee4:	21 f0 5e 8c 	MH[r0 + 188] = rMAC;
    p_ag->p_fxlms->p_bp_int.full_num_coeffs = AANC_PROC_NUM_TAPS_BP;
84201ee8:	b2 99       	r0 = M[r4 + 56];
84201eea:	21 f0 5f 8c 	MH[r0 + 190] = rMAC;
    p_ag->p_fxlms->p_bp_ext.num_coeffs = AANC_PROC_NUM_TAPS_BP;
84201eee:	b2 99       	r0 = M[r4 + 56];
84201ef0:	21 f0 6c 8c 	MH[r0 + 216] = rMAC;
    p_ag->p_fxlms->p_bp_ext.full_num_coeffs = AANC_PROC_NUM_TAPS_BP;
84201ef4:	b2 99       	r0 = M[r4 + 56];
84201ef6:	21 f0 6d 8c 	MH[r0 + 218] = rMAC;

    aanc_fxlms100_create(p_ag->p_fxlms, p_ag->p_fxlms_dm1, p_ag->p_fxlms_dm2);
84201efa:	34 a8       	r2 = M[r4 + 64];
84201efc:	f3 99       	r1 = M[r4 + 60];
84201efe:	b2 99       	r0 = M[r4 + 56];
84201f00:	04 f0 3d e3 	call (m) $_aanc_fxlms100_create;

    /* Initialize plant model as pass-through */
    coeffs = &p_ag->p_fxlms->p_plant.coeffs;
84201f04:	b1 99       	rMAC = M[r4 + 56];
84201f06:	01 f0 50 44 	rMAC = rMAC + 80;
    coeffs->p_num[0] = FXLMS100_MODEL_COEFF0;
84201f0a:	00 f2 02 f0 	r0 = Null + 536870912;
84201f0e:	00 40 
84201f10:	0b e8       	r1 = M[rMAC + Null];
84201f12:	1a ee       	M[r1 + Null] = r0;
    coeffs->p_den[0] = FXLMS100_MODEL_COEFF0;
84201f14:	49 88       	rMAC = M[rMAC + 4];
84201f16:	0a ee       	M[rMAC + Null] = r0;

    /* Initialize control 0 model as pass-through */
    coeffs = &p_ag->p_fxlms->p_control_0.coeffs;
84201f18:	b1 99       	rMAC = M[r4 + 56];
84201f1a:	01 f0 6c 44 	rMAC = rMAC + 108;
    coeffs->p_num[0] = FXLMS100_MODEL_COEFF0;
84201f1e:	0b e8       	r1 = M[rMAC + Null];
84201f20:	1a ee       	M[r1 + Null] = r0;
    coeffs->p_den[0] = FXLMS100_MODEL_COEFF0;
84201f22:	49 88       	rMAC = M[rMAC + 4];
84201f24:	0a ee       	M[rMAC + Null] = r0;

    p_ag->clip_threshold = AANC_PROC_CLIPPING_THRESHOLD;
84201f26:	ff f3 f1 f7 	rMAC = Null + 1073741823;
84201f2a:	ff 7b 
84201f2c:	b1 be       	M[r4 + 104] = rMAC;

    if (!load_aanc_handle(&p_ag->f_handle))
84201f2e:	62 f0 98 20 	r0 = r4 + 152;
84201f32:	06 f0 2d e0 	call (m) $_load_aanc_handle;
84201f36:	10 04       	Null = r0 - Null;
84201f38:	10 62       	if NE jump (m) Lc_aanc_proc_create_36;

84201f3a <Lc_aanc_proc_create_34>:
    {
        aanc_proc_destroy(pp_ag);
84201f3a:	5a 08       	r0 = r9 + Null;
84201f3c:	12 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to load feature handle");
84201f3e:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201f42:	88 24       	Null = rMAC - 2;
84201f44:	fb ff b1 e9 	if LT jump (m) Lc_aanc_proc_create_4;

84201f48 <Lc_aanc_proc_create_35>:
84201f48:	55 f1 02 f0 	r0 = Null + 357565073;
84201f4c:	91 42 
84201f4e:	ef fd f6 ff 	call (m) 0xccc;
84201f52:	3f eb 
84201f54:	ff ff a1 e9 	jump (m) Lc_aanc_proc_create_4;

84201f58 <Lc_aanc_proc_create_36>:
        return FALSE;
    }

    return TRUE;
84201f58:	3a 00       	r0 = r5 + Null;

84201f5a <Lc_aanc_proc_create_37>:
}
84201f5a:	6c 4c       	SP = SP + -80;
84201f5c:	f6 48       	popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84201f5e:	d8 4c       	rts;

84201f60 <$_aanc_proc_destroy>:

bool aanc_proc_destroy(ADAPTIVE_GAIN **pp_ag)
{
84201f60:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84201f62:	17 00       	r5 = r0 + Null;
    ADAPTIVE_GAIN *p_ag = *pp_ag;

    if (p_ag == NULL)
84201f64:	3e e8       	r4 = M[r5 + Null];
84201f66:	3e 60       	if EQ jump (m) Lc_aanc_proc_destroy_7;

84201f68 <Lc_aanc_proc_destroy_2>:
    {
        return TRUE;
    }

    if (p_ag->scratch_registered)
84201f68:	60 f0 25 88 	Null = M[r4 + 148];
84201f6c:	06 60       	if EQ jump (m) Lc_aanc_proc_destroy_4;

84201f6e <Lc_aanc_proc_destroy_3>:
    {
        scratch_deregister();
84201f6e:	ef fd fc ff 	call (m) 0x1872;
84201f72:	25 e8 
        p_ag->scratch_registered = FALSE;
84201f74:	60 f0 25 8e 	M[r4 + 148] = Null;

84201f78 <Lc_aanc_proc_destroy_4>:
    }

    aanc_ed100_destroy(p_ag->p_ed_int);
84201f78:	72 89       	r0 = M[r4 + 20];
84201f7a:	05 f0 3d ec 	call (m) $_aanc_ed100_destroy;
    aanc_ed100_destroy(p_ag->p_ed_ext);
84201f7e:	72 98       	r0 = M[r4 + 36];
84201f80:	05 f0 37 ec 	call (m) $_aanc_ed100_destroy;
    aanc_ed100_destroy(p_ag->p_ed_pb);
84201f84:	32 99       	r0 = M[r4 + 48];
84201f86:	05 f0 31 ec 	call (m) $_aanc_ed100_destroy;

    if (p_ag->p_table != NULL)
84201f8a:	73 88       	r1 = M[r4 + 4];
84201f8c:	0a 60       	if EQ jump (m) Lc_aanc_proc_destroy_6;

84201f8e <Lc_aanc_proc_destroy_5>:
    {
        mem_table_free((void *)p_ag, p_ag->p_table, AANC_PROC_MEM_TABLE_SIZE);
84201f8e:	44 22       	r2 = Null + 9;
84201f90:	32 00       	r0 = r4 + Null;
84201f92:	ef fd fe ff 	call (m) 0x1c0c;
84201f96:	3b e3 
        pdelete(p_ag->p_table);
84201f98:	72 88       	r0 = M[r4 + 4];
84201f9a:	ff fd 24 f0 	call (m) 0x68d8;
84201f9e:	3f e9 

84201fa0 <Lc_aanc_proc_destroy_6>:
    }

    cbuffer_destroy(p_ag->p_tmp_ed);
84201fa0:	b2 88       	r0 = M[r4 + 8];
84201fa2:	ff fd 91 f0 	call (m) 0x1439a;
84201fa6:	39 ef 

    cbuffer_destroy(p_ag->p_tmp_int_ip);
84201fa8:	f2 88       	r0 = M[r4 + 12];
84201faa:	ff fd 91 f0 	call (m) 0x1439a;
84201fae:	31 ef 
    cbuffer_destroy(p_ag->p_tmp_ext_ip);
84201fb0:	f2 89       	r0 = M[r4 + 28];
84201fb2:	ff fd 91 f0 	call (m) 0x1439a;
84201fb6:	29 ef 
    cbuffer_destroy(p_ag->p_tmp_pb_ip);
84201fb8:	f2 98       	r0 = M[r4 + 44];
84201fba:	ff fd 91 f0 	call (m) 0x1439a;
84201fbe:	21 ef 

    cbuffer_destroy(p_ag->p_tmp_int_op);
84201fc0:	32 89       	r0 = M[r4 + 16];
84201fc2:	ff fd 91 f0 	call (m) 0x1439a;
84201fc6:	39 ee 
    cbuffer_destroy(p_ag->p_tmp_ext_op);
84201fc8:	32 98       	r0 = M[r4 + 32];
84201fca:	ff fd 91 f0 	call (m) 0x1439a;
84201fce:	31 ee 

    unload_aanc_handle(p_ag->f_handle);
84201fd0:	62 f0 26 88 	r0 = M[r4 + 152];
84201fd4:	05 f0 39 ed 	call (m) $_unload_aanc_handle;

    pdelete(p_ag);
84201fd8:	32 00       	r0 = r4 + Null;
84201fda:	ff fd 24 f0 	call (m) 0x68d8;
84201fde:	3f e7 
    *pp_ag = NULL;
84201fe0:	38 ee       	M[r5 + Null] = Null;

84201fe2 <Lc_aanc_proc_destroy_7>:
{
    ADAPTIVE_GAIN *p_ag = *pp_ag;

    if (p_ag == NULL)
    {
        return TRUE;
84201fe2:	42 20       	r0 = Null + 1;

84201fe4 <Lc_aanc_proc_destroy_8>:

    pdelete(p_ag);
    *pp_ag = NULL;

    return TRUE;
}
84201fe4:	f2 48       	popm <FP, r4, r5, rLink>;
84201fe6:	d8 4c       	rts;

84201fe8 <$_aanc_proc_initialize>:

bool aanc_proc_initialize(AANC_PARAMETERS *p_params, ADAPTIVE_GAIN *p_ag,
                          unsigned ag_start, unsigned *p_flags,
                          bool hard_initialize)
{
84201fe8:	f6 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>;
84201fea:	50 f3 10 cf 	SP = SP + 160;
84201fee:	1f 00       	r5 = r1 + Null;
84201ff0:	20 09       	r6 = r2 + Null;
84201ff2:	e9 f3 ff b9 	r7 = M[FP + -4];
    bool ext_ed_disable_e_filter_check;
    bool int_ed_disable_e_filter_check;
    bool pb_ed_disable_e_filter_check;

    /* Initialize pointers to parameters and flags */
    p_ag->p_aanc_params = p_params;
84201ff6:	fa be       	M[r5 + 108] = r0;
    p_ag->p_aanc_flags = p_flags;
84201ff8:	3d bf       	M[r5 + 112] = r3;

    /**************************************************
     * Initialize the FXLMS                           *
     **************************************************/
    p_dmx = p_ag->p_fxlms;
84201ffa:	be 99       	r4 = M[r5 + 56];

    /* Initialize buffer pointers */
    p_dmx->p_int_ip = p_ag->p_tmp_int_ip;
84201ffc:	f9 88       	rMAC = M[r5 + 12];
84201ffe:	b1 8e       	M[r4 + 8] = rMAC;
    p_dmx->p_int_op = p_ag->p_tmp_int_op;
84202000:	39 89       	rMAC = M[r5 + 16];
84202002:	31 8f       	M[r4 + 16] = rMAC;
    p_dmx->p_ext_ip = p_ag->p_tmp_ext_ip;
84202004:	f9 89       	rMAC = M[r5 + 28];
84202006:	f1 8e       	M[r4 + 12] = rMAC;
    p_dmx->p_ext_op = p_ag->p_tmp_ext_op;
84202008:	39 98       	rMAC = M[r5 + 32];
8420200a:	71 8f       	M[r4 + 20] = rMAC;

    /* Set FxLMS parameters */
    p_dmx->target_nr = p_params->OFFSET_TARGET_NOISE_REDUCTION;
8420200c:	21 f0 50 88 	rMAC = M[r0 + 320];
84202010:	b1 8f       	M[r4 + 24] = rMAC;
    p_dmx->mu = p_params->OFFSET_MU;
84202012:	91 88       	rMAC = M[r0 + 8];
84202014:	f1 8f       	M[r4 + 28] = rMAC;
    p_dmx->gamma = p_params->OFFSET_GAMMA;
84202016:	d1 88       	rMAC = M[r0 + 12];
84202018:	31 9e       	M[r4 + 32] = rMAC;
    p_dmx->lambda = p_params->OFFSET_LAMBDA;
8420201a:	21 f0 4f 88 	rMAC = M[r0 + 316];
8420201e:	b1 9e       	M[r4 + 40] = rMAC;
    p_dmx->frame_size = AANC_DEFAULT_FRAME_SIZE;
84202020:	01 f0 40 40 	rMAC = Null + 64;
84202024:	71 9e       	M[r4 + 36] = rMAC;
    p_dmx->min_bound = p_params->OFFSET_FXLMS_MIN_BOUND;
84202026:	21 f0 43 88 	rMAC = M[r0 + 268];
8420202a:	71 9f       	M[r4 + 52] = rMAC;
    p_dmx->max_bound = p_params->OFFSET_FXLMS_MAX_BOUND;
8420202c:	21 f0 44 88 	rMAC = M[r0 + 272];
84202030:	b1 9f       	M[r4 + 56] = rMAC;
    p_dmx->max_delta = p_params->OFFSET_FXLMS_MAX_DELTA;
84202032:	21 f0 45 88 	rMAC = M[r0 + 276];
84202036:	f1 9f       	M[r4 + 60] = rMAC;

    /* Optimization to reduce the effective number of taps in plant and control
     * filters if there are both trailing numerator and denominator coefficients
     */
    p_params_tmp = p_ag->p_aanc_params;
84202038:	f9 b8       	rMAC = M[r5 + 108];
    if ((p_params_tmp->OFFSET_AANC_DEBUG &
         AANC_CONFIG_AANC_DEBUG_DISABLE_FILTER_OPTIM) > 0)
8420203a:	49 89       	rMAC = M[rMAC + 20];
8420203c:	49 c4       	rMAC = rMAC AND 0x200;
8420203e:	09 60       	if EQ jump (m) Lc_aanc_proc_initialize_3;

84202040 <Lc_aanc_proc_initialize_2>:
    {
        p_dmx->p_plant.num_coeffs = AANC_PROC_NUM_TAPS_PLANT;
84202040:	01 22       	rMAC = Null + 8;
84202042:	61 f0 34 8c 	MH[r4 + 104] = rMAC;
        p_dmx->p_control_0.num_coeffs = AANC_PROC_NUM_TAPS_CONTROL;
84202046:	61 f0 42 8c 	MH[r4 + 132] = rMAC;
        p_dmx->p_control_1.num_coeffs = AANC_PROC_NUM_TAPS_CONTROL;
8420204a:	61 f0 50 8c 	MH[r4 + 160] = rMAC;
8420204e:	16 6e       	jump (m) Lc_aanc_proc_initialize_4;

84202050 <Lc_aanc_proc_initialize_3>:
        L4_DBG_MSG("AANC_PROC filters set to default number of coefficients");
    }
    else
    {
        p_dmx->p_plant.num_coeffs = aanc_fxlms100_calculate_num_coeffs(
            &p_dmx->p_plant, AANC_PROC_NUM_TAPS_PLANT);
84202050:	03 22       	r1 = Null + 8;
84202052:	62 f0 50 20 	r0 = r4 + 80;
84202056:	04 f0 31 eb 	call (m) $_aanc_fxlms100_calculate_num_coeffs;
8420205a:	62 f0 34 8c 	MH[r4 + 104] = r0;
        p_dmx->p_control_0.num_coeffs = aanc_fxlms100_calculate_num_coeffs(
            &p_dmx->p_control_0, AANC_PROC_NUM_TAPS_CONTROL);
8420205e:	03 22       	r1 = Null + 8;
84202060:	62 f0 6c 20 	r0 = r4 + 108;
84202064:	04 f0 23 eb 	call (m) $_aanc_fxlms100_calculate_num_coeffs;
84202068:	62 f0 42 8c 	MH[r4 + 132] = r0;
        p_dmx->p_control_1.num_coeffs = aanc_fxlms100_calculate_num_coeffs(
            &p_dmx->p_control_1, AANC_PROC_NUM_TAPS_CONTROL);
8420206c:	03 22       	r1 = Null + 8;
8420206e:	62 f0 88 20 	r0 = r4 + 136;
84202072:	04 f0 35 ea 	call (m) $_aanc_fxlms100_calculate_num_coeffs;
84202076:	62 f0 50 8c 	MH[r4 + 160] = r0;

8420207a <Lc_aanc_proc_initialize_4>:
            "AANC_PROC filter coeffs: Plant=%hu, Control 0=%hu, Control 1=%hu",
            p_dmx->p_plant.num_coeffs, p_dmx->p_control_0.num_coeffs,
            p_dmx->p_control_1.num_coeffs);
    }

    if (hard_initialize)
8420207a:	0f f9 00 c2 	Null = r7 - Null;
8420207e:	03 60       	if EQ jump (m) Lc_aanc_proc_initialize_6;

84202080 <Lc_aanc_proc_initialize_5>:
    {
        p_dmx->initial_gain = ag_start;
84202080:	68 f0 0b 8e 	M[r4 + 44] = r6;

84202084 <Lc_aanc_proc_initialize_6>:
    }

    /* Initialize FxLMS bandpass model */
    p_params_tmp = p_ag->p_aanc_params;
84202084:	78 f0 1b 88 	r6 = M[r5 + 108];
84202088:	81 f0 3b 88 	rMAC = M[r6 + 236];
8420208c:	e1 de       	M[FP + 112] = rMAC;
8420208e:	81 f0 3c 88 	rMAC = M[r6 + 240];
84202092:	e9 de       	M[FP + 116] = rMAC;
84202094:	81 f0 3d 88 	rMAC = M[r6 + 244];
84202098:	f1 de       	M[FP + 120] = rMAC;
8420209a:	81 f0 3e 88 	rMAC = M[r6 + 248];
8420209e:	f9 de       	M[FP + 124] = rMAC;
842020a0:	81 f0 3f 88 	rMAC = M[r6 + 252];
842020a4:	01 df       	M[FP + 128] = rMAC;
        p_params_tmp->OFFSET_BPF_NUMERATOR_COEFF_INT_0,
        p_params_tmp->OFFSET_BPF_NUMERATOR_COEFF_INT_1,
        p_params_tmp->OFFSET_BPF_NUMERATOR_COEFF_INT_2,
        p_params_tmp->OFFSET_BPF_NUMERATOR_COEFF_INT_3,
        p_params_tmp->OFFSET_BPF_NUMERATOR_COEFF_INT_4
    };
842020a6:	03 17       	r1 = FP + 112;
842020a8:	02 12       	r0 = FP + 32;
842020aa:	44 21       	r2 = Null + 5;
842020ac:	ff fd c0 f0 	call (m) 0x1a1ee;
842020b0:	23 ea 
842020b2:	81 f0 36 88 	rMAC = M[r6 + 216];
842020b6:	09 df       	M[FP + 132] = rMAC;
842020b8:	81 f0 37 88 	rMAC = M[r6 + 220];
842020bc:	11 df       	M[FP + 136] = rMAC;
842020be:	81 f0 38 88 	rMAC = M[r6 + 224];
842020c2:	19 df       	M[FP + 140] = rMAC;
842020c4:	81 f0 39 88 	rMAC = M[r6 + 228];
842020c8:	21 df       	M[FP + 144] = rMAC;
842020ca:	81 f0 3a 88 	rMAC = M[r6 + 232];
842020ce:	29 df       	M[FP + 148] = rMAC;
        p_params_tmp->OFFSET_BPF_DENOMINATOR_COEFF_INT_0,
        p_params_tmp->OFFSET_BPF_DENOMINATOR_COEFF_INT_1,
        p_params_tmp->OFFSET_BPF_DENOMINATOR_COEFF_INT_2,
        p_params_tmp->OFFSET_BPF_DENOMINATOR_COEFF_INT_3,
        p_params_tmp->OFFSET_BPF_DENOMINATOR_COEFF_INT_4
    };
842020d0:	43 18       	r1 = FP + 132;
842020d2:	42 13       	r0 = FP + 52;
842020d4:	44 21       	r2 = Null + 5;
842020d6:	ff fd c0 f0 	call (m) 0x1a1ee;
842020da:	39 e8 
842020dc:	81 f0 31 88 	rMAC = M[r6 + 196];
842020e0:	31 df       	M[FP + 152] = rMAC;
842020e2:	81 f0 32 88 	rMAC = M[r6 + 200];
842020e6:	39 df       	M[FP + 156] = rMAC;
842020e8:	81 f0 33 88 	rMAC = M[r6 + 204];
842020ec:	41 df       	M[FP + 160] = rMAC;
842020ee:	81 f0 34 88 	rMAC = M[r6 + 208];
842020f2:	49 df       	M[FP + 164] = rMAC;
842020f4:	81 f0 35 88 	rMAC = M[r6 + 212];
842020f8:	51 df       	M[FP + 168] = rMAC;
        p_params_tmp->OFFSET_BPF_NUMERATOR_COEFF_EXT_0,
        p_params_tmp->OFFSET_BPF_NUMERATOR_COEFF_EXT_1,
        p_params_tmp->OFFSET_BPF_NUMERATOR_COEFF_EXT_2,
        p_params_tmp->OFFSET_BPF_NUMERATOR_COEFF_EXT_3,
        p_params_tmp->OFFSET_BPF_NUMERATOR_COEFF_EXT_4
    };
842020fa:	83 19       	r1 = FP + 152;
842020fc:	82 14       	r0 = FP + 72;
842020fe:	44 21       	r2 = Null + 5;
84202100:	ff fd c0 f0 	call (m) 0x1a1ee;
84202104:	2f e7 
84202106:	81 f0 2c 88 	rMAC = M[r6 + 176];
8420210a:	59 df       	M[FP + 172] = rMAC;
8420210c:	81 f0 2d 88 	rMAC = M[r6 + 180];
84202110:	61 df       	M[FP + 176] = rMAC;
84202112:	81 f0 2e 88 	rMAC = M[r6 + 184];
84202116:	69 df       	M[FP + 180] = rMAC;
84202118:	81 f0 2f 88 	rMAC = M[r6 + 188];
8420211c:	71 df       	M[FP + 184] = rMAC;
8420211e:	81 f0 30 88 	rMAC = M[r6 + 192];
84202122:	79 df       	M[FP + 188] = rMAC;
        p_params_tmp->OFFSET_BPF_DENOMINATOR_COEFF_EXT_0,
        p_params_tmp->OFFSET_BPF_DENOMINATOR_COEFF_EXT_1,
        p_params_tmp->OFFSET_BPF_DENOMINATOR_COEFF_EXT_2,
        p_params_tmp->OFFSET_BPF_DENOMINATOR_COEFF_EXT_3,
        p_params_tmp->OFFSET_BPF_DENOMINATOR_COEFF_EXT_4
    };
84202124:	c3 1a       	r1 = FP + 172;
84202126:	c2 15       	r0 = FP + 92;
84202128:	44 21       	r2 = Null + 5;
8420212a:	ff fd c0 f0 	call (m) 0x1a1ee;
8420212e:	25 e6 

    for (i = 0; i < p_dmx->p_bp_ext.num_coeffs; i++)
84202130:	02 00       	r0 = Null + Null;
84202132:	81 14       	rMAC = FP + 72;
84202134:	c3 15       	r1 = FP + 92;
84202136:	04 12       	r2 = FP + 32;
84202138:	45 13       	r3 = FP + 52;

8420213a <Lc_aanc_proc_initialize_7>:
8420213a:	68 f0 6c 86 	r6 = MHU[r4 + 216];
8420213e:	8f f2 00 c2 	Null = r0 - r6;
84202142:	21 66       	if GE jump (m) Lc_aanc_proc_initialize_9;

84202144 <Lc_aanc_proc_initialize_8>:
    {
        p_dmx->p_bp_ext.coeffs.p_num[i] = bp_num_coeffs_ext[i];
84202144:	01 f2 d8 c8 	r6 = r0 LSHIFT 2;
84202148:	1a f0 00 e8 	r8 = M[rMAC + Null];
8420214c:	6b f0 30 88 	r9 = M[r4 + 192];
84202150:	ba f0 08 ee 	M[r9 + r6] = r8;
        p_dmx->p_bp_ext.coeffs.p_den[i] = bp_den_coeffs_ext[i];
84202154:	3a f0 00 e8 	r8 = M[r1 + Null];
84202158:	6b f0 31 88 	r9 = M[r4 + 196];
8420215c:	ba f0 08 ee 	M[r9 + r6] = r8;
        p_dmx->p_bp_int.coeffs.p_num[i] = bp_num_coeffs_int[i];
84202160:	4a f0 00 e8 	r8 = M[r2 + Null];
84202164:	6b f0 29 88 	r9 = M[r4 + 164];
84202168:	ba f0 08 ee 	M[r9 + r6] = r8;
        p_dmx->p_bp_int.coeffs.p_den[i] = bp_den_coeffs_int[i];
8420216c:	5a f0 00 e8 	r8 = M[r3 + Null];
84202170:	6b f0 2a 88 	r9 = M[r4 + 168];
84202174:	ba f0 08 ee 	M[r9 + r6] = r8;
        p_params_tmp->OFFSET_BPF_DENOMINATOR_COEFF_EXT_2,
        p_params_tmp->OFFSET_BPF_DENOMINATOR_COEFF_EXT_3,
        p_params_tmp->OFFSET_BPF_DENOMINATOR_COEFF_EXT_4
    };

    for (i = 0; i < p_dmx->p_bp_ext.num_coeffs; i++)
84202178:	52 20       	r0 = r0 + 1;
8420217a:	09 21       	rMAC = rMAC + 4;
8420217c:	1b 21       	r1 = r1 + 4;
8420217e:	24 21       	r2 = r2 + 4;
84202180:	2d 21       	r3 = r3 + 4;
84202182:	dc 6f       	jump (m) Lc_aanc_proc_initialize_7;

84202184 <Lc_aanc_proc_initialize_9>:
        p_dmx->p_bp_ext.coeffs.p_den[i] = bp_den_coeffs_ext[i];
        p_dmx->p_bp_int.coeffs.p_num[i] = bp_num_coeffs_int[i];
        p_dmx->p_bp_int.coeffs.p_den[i] = bp_den_coeffs_int[i];
    }

    aanc_fxlms100_initialize(p_ag->f_handle, p_ag->p_fxlms, hard_initialize);
84202184:	bb 99       	r1 = M[r5 + 56];
84202186:	72 f0 26 88 	r0 = M[r5 + 152];
8420218a:	4c 08       	r2 = r7 + Null;
8420218c:	03 f0 29 e3 	call (m) $_aanc_fxlms100_initialize;

    /**************************************************
     * Initialize the EDs                             *
     **************************************************/
    ext_ed_disable_e_filter_check = FALSE;
84202190:	01 09       	r7 = Null + Null;
    p_params_tmp = p_ag->p_aanc_params;
84202192:	fe b8       	r4 = M[r5 + 108];
    if (p_params_tmp->OFFSET_AANC_DEBUG & \
        AANC_CONFIG_AANC_DEBUG_DISABLE_ED_EXT_E_FILTER_CHECK)
84202194:	72 89       	r0 = M[r4 + 20];
84202196:	51 c2       	rMAC = r0 AND 0x20;
84202198:	02 60       	if EQ jump (m) Lc_aanc_proc_initialize_11;

8420219a <Lc_aanc_proc_initialize_10>:
    {
        ext_ed_disable_e_filter_check = TRUE;
8420219a:	09 71       	r7 = Null + 1;

8420219c <Lc_aanc_proc_initialize_11>:
    }
    int_ed_disable_e_filter_check = FALSE;
8420219c:	01 00       	rMAC = Null + Null;
    if (p_params_tmp->OFFSET_AANC_DEBUG & \
        AANC_CONFIG_AANC_DEBUG_DISABLE_ED_INT_E_FILTER_CHECK)
8420219e:	d3 c1       	r1 = r0 AND 0x10;
842021a0:	02 60       	if EQ jump (m) Lc_aanc_proc_initialize_13;

842021a2 <Lc_aanc_proc_initialize_12>:
    {
        int_ed_disable_e_filter_check = TRUE;
842021a2:	41 20       	rMAC = Null + 1;

842021a4 <Lc_aanc_proc_initialize_13>:
    }
    pb_ed_disable_e_filter_check = FALSE;
842021a4:	02 09       	r8 = Null + Null;
    if (p_params_tmp->OFFSET_AANC_DEBUG & \
        AANC_CONFIG_AANC_DEBUG_DISABLE_ED_PB_E_FILTER_CHECK)
842021a6:	d2 c2       	r0 = r0 AND 0x40;
842021a8:	02 60       	if EQ jump (m) Lc_aanc_proc_initialize_15;

842021aa <Lc_aanc_proc_initialize_14>:
    {
        pb_ed_disable_e_filter_check = TRUE;
842021aa:	0a 71       	r8 = Null + 1;

842021ac <Lc_aanc_proc_initialize_15>:
    }

    p_ag->p_ed_int->p_input = p_ag->p_tmp_int_ip;
842021ac:	fa 88       	r0 = M[r5 + 12];
842021ae:	7b 89       	r1 = M[r5 + 20];
842021b0:	1a ee       	M[r1 + Null] = r0;
    p_ag->p_ed_int->p_tmp = p_ag->p_tmp_ed;
842021b2:	ba 88       	r0 = M[r5 + 8];
842021b4:	7b 89       	r1 = M[r5 + 20];
842021b6:	5a 8e       	M[r1 + 4] = r0;
    p_ag->p_ed_int->frame_size = AANC_DEFAULT_FRAME_SIZE;
842021b8:	08 f0 40 40 	r6 = Null + 64;
842021bc:	7a 89       	r0 = M[r5 + 20];
842021be:	28 f0 02 8e 	M[r0 + 8] = r6;
    p_ag->p_ed_int->attack_time = p_params_tmp->OFFSET_ED_INT_ATTACK;
842021c2:	32 a9       	r0 = M[r4 + 80];
842021c4:	7b 89       	r1 = M[r5 + 20];
842021c6:	da 8e       	M[r1 + 12] = r0;
    p_ag->p_ed_int->decay_time = p_params_tmp->OFFSET_ED_INT_DECAY;
842021c8:	72 a9       	r0 = M[r4 + 84];
842021ca:	7b 89       	r1 = M[r5 + 20];
842021cc:	1a 8f       	M[r1 + 16] = r0;
    p_ag->p_ed_int->envelope_time = p_params_tmp->OFFSET_ED_INT_ENVELOPE;
842021ce:	b2 a9       	r0 = M[r4 + 88];
842021d0:	7b 89       	r1 = M[r5 + 20];
842021d2:	5a 8f       	M[r1 + 20] = r0;
    p_ag->p_ed_int->init_frame_time = p_params_tmp->OFFSET_ED_INT_INIT_FRAME;
842021d4:	f2 a9       	r0 = M[r4 + 92];
842021d6:	7b 89       	r1 = M[r5 + 20];
842021d8:	9a 8f       	M[r1 + 24] = r0;
    p_ag->p_ed_int->ratio = p_params_tmp->OFFSET_ED_INT_RATIO;
842021da:	32 b8       	r0 = M[r4 + 96];
842021dc:	7b 89       	r1 = M[r5 + 20];
842021de:	da 8f       	M[r1 + 28] = r0;
    p_ag->p_ed_int->min_signal = p_params_tmp->OFFSET_ED_INT_MIN_SIGNAL;
842021e0:	72 b8       	r0 = M[r4 + 100];
842021e2:	7b 89       	r1 = M[r5 + 20];
842021e4:	1a 9e       	M[r1 + 32] = r0;
    p_ag->p_ed_int->min_max_envelope = p_params_tmp->OFFSET_ED_INT_MIN_MAX_ENVELOPE;
842021e6:	b2 b8       	r0 = M[r4 + 104];
842021e8:	7b 89       	r1 = M[r5 + 20];
842021ea:	5a 9e       	M[r1 + 36] = r0;
    p_ag->p_ed_int->delta_th = p_params_tmp->OFFSET_ED_INT_DELTA_TH;
842021ec:	f2 b8       	r0 = M[r4 + 108];
842021ee:	7b 89       	r1 = M[r5 + 20];
842021f0:	9a 9e       	M[r1 + 40] = r0;
    p_ag->p_ed_int->count_th = p_params_tmp->OFFSET_ED_INT_COUNT_TH;
842021f2:	32 b9       	r0 = M[r4 + 112];
842021f4:	7b 89       	r1 = M[r5 + 20];
842021f6:	da 9e       	M[r1 + 44] = r0;
    p_ag->p_ed_int->hold_frames = p_params_tmp->OFFSET_ED_INT_HOLD_FRAMES;
842021f8:	72 b9       	r0 = M[r4 + 116];
842021fa:	7b 89       	r1 = M[r5 + 20];
842021fc:	1a 9f       	M[r1 + 48] = r0;
    p_ag->p_ed_int->e_min_threshold = p_params_tmp->OFFSET_ED_INT_E_FILTER_MIN_THRESHOLD;
842021fe:	b2 b9       	r0 = M[r4 + 120];
84202200:	7b 89       	r1 = M[r5 + 20];
84202202:	5a 9f       	M[r1 + 52] = r0;
    p_ag->p_ed_int->e_min_counter_threshold = p_params_tmp->OFFSET_ED_INT_E_FILTER_MIN_COUNTER_THRESHOLD;
84202204:	f2 b9       	r0 = M[r4 + 124];
84202206:	7b 89       	r1 = M[r5 + 20];
84202208:	9a 9f       	M[r1 + 56] = r0;
    p_ag->p_ed_int->e_min_check_disabled = int_ed_disable_e_filter_check;
8420220a:	7a 89       	r0 = M[r5 + 20];
8420220c:	d1 9f       	M[r0 + 60] = rMAC;
    aanc_ed100_initialize(p_ag->f_handle, p_ag->p_ed_int);
8420220e:	7b 89       	r1 = M[r5 + 20];
84202210:	72 f0 26 88 	r0 = M[r5 + 152];
84202214:	04 f0 33 e2 	call (m) $_aanc_ed100_initialize;

    p_ag->p_ed_ext->p_input = p_ag->p_tmp_ext_ip;
84202218:	f9 89       	rMAC = M[r5 + 28];
8420221a:	7a 98       	r0 = M[r5 + 36];
8420221c:	11 ee       	M[r0 + Null] = rMAC;
    p_ag->p_ed_ext->p_tmp = p_ag->p_tmp_ed;
8420221e:	b9 88       	rMAC = M[r5 + 8];
84202220:	7a 98       	r0 = M[r5 + 36];
84202222:	51 8e       	M[r0 + 4] = rMAC;
    p_ag->p_ed_ext->frame_size = AANC_DEFAULT_FRAME_SIZE;
84202224:	79 98       	rMAC = M[r5 + 36];
84202226:	18 f0 02 8e 	M[rMAC + 8] = r6;
    p_ag->p_ed_ext->attack_time = p_params_tmp->OFFSET_ED_EXT_ATTACK;
8420222a:	31 98       	rMAC = M[r4 + 32];
8420222c:	7a 98       	r0 = M[r5 + 36];
8420222e:	d1 8e       	M[r0 + 12] = rMAC;
    p_ag->p_ed_ext->decay_time = p_params_tmp->OFFSET_ED_EXT_DECAY;
84202230:	71 98       	rMAC = M[r4 + 36];
84202232:	7a 98       	r0 = M[r5 + 36];
84202234:	11 8f       	M[r0 + 16] = rMAC;
    p_ag->p_ed_ext->envelope_time = p_params_tmp->OFFSET_ED_EXT_ENVELOPE;
84202236:	b1 98       	rMAC = M[r4 + 40];
84202238:	7a 98       	r0 = M[r5 + 36];
8420223a:	51 8f       	M[r0 + 20] = rMAC;
    p_ag->p_ed_ext->init_frame_time = p_params_tmp->OFFSET_ED_EXT_INIT_FRAME;
8420223c:	f1 98       	rMAC = M[r4 + 44];
8420223e:	7a 98       	r0 = M[r5 + 36];
84202240:	91 8f       	M[r0 + 24] = rMAC;
    p_ag->p_ed_ext->ratio = p_params_tmp->OFFSET_ED_EXT_RATIO;
84202242:	31 99       	rMAC = M[r4 + 48];
84202244:	7a 98       	r0 = M[r5 + 36];
84202246:	d1 8f       	M[r0 + 28] = rMAC;
    p_ag->p_ed_ext->min_signal = p_params_tmp->OFFSET_ED_EXT_MIN_SIGNAL;
84202248:	71 99       	rMAC = M[r4 + 52];
8420224a:	7a 98       	r0 = M[r5 + 36];
8420224c:	11 9e       	M[r0 + 32] = rMAC;
    p_ag->p_ed_ext->min_max_envelope = p_params_tmp->OFFSET_ED_EXT_MIN_MAX_ENVELOPE;
8420224e:	b1 99       	rMAC = M[r4 + 56];
84202250:	7a 98       	r0 = M[r5 + 36];
84202252:	51 9e       	M[r0 + 36] = rMAC;
    p_ag->p_ed_ext->delta_th = p_params_tmp->OFFSET_ED_EXT_DELTA_TH;
84202254:	f1 99       	rMAC = M[r4 + 60];
84202256:	7a 98       	r0 = M[r5 + 36];
84202258:	91 9e       	M[r0 + 40] = rMAC;
    p_ag->p_ed_ext->count_th = p_params_tmp->OFFSET_ED_EXT_COUNT_TH;
8420225a:	31 a8       	rMAC = M[r4 + 64];
8420225c:	7a 98       	r0 = M[r5 + 36];
8420225e:	d1 9e       	M[r0 + 44] = rMAC;
    p_ag->p_ed_ext->hold_frames = p_params_tmp->OFFSET_ED_EXT_HOLD_FRAMES;
84202260:	71 a8       	rMAC = M[r4 + 68];
84202262:	7a 98       	r0 = M[r5 + 36];
84202264:	11 9f       	M[r0 + 48] = rMAC;
    p_ag->p_ed_ext->e_min_threshold = p_params_tmp->OFFSET_ED_EXT_E_FILTER_MIN_THRESHOLD;
84202266:	b1 a8       	rMAC = M[r4 + 72];
84202268:	7a 98       	r0 = M[r5 + 36];
8420226a:	51 9f       	M[r0 + 52] = rMAC;
    p_ag->p_ed_ext->e_min_counter_threshold = p_params_tmp->OFFSET_ED_EXT_E_FILTER_MIN_COUNTER_THRESHOLD;
8420226c:	f1 a8       	rMAC = M[r4 + 76];
8420226e:	7a 98       	r0 = M[r5 + 36];
84202270:	91 9f       	M[r0 + 56] = rMAC;
    p_ag->p_ed_ext->e_min_check_disabled = ext_ed_disable_e_filter_check;
84202272:	79 98       	rMAC = M[r5 + 36];
84202274:	19 f0 0f 8e 	M[rMAC + 60] = r7;
    aanc_ed100_initialize(p_ag->f_handle, p_ag->p_ed_ext);
84202278:	7b 98       	r1 = M[r5 + 36];
8420227a:	72 f0 26 88 	r0 = M[r5 + 152];
8420227e:	03 f0 29 ef 	call (m) $_aanc_ed100_initialize;

    p_ag->p_ed_pb->p_input = p_ag->p_tmp_pb_ip;
84202282:	f9 98       	rMAC = M[r5 + 44];
84202284:	3a 99       	r0 = M[r5 + 48];
84202286:	11 ee       	M[r0 + Null] = rMAC;
    p_ag->p_ed_pb->p_tmp = p_ag->p_tmp_ed;
84202288:	b9 88       	rMAC = M[r5 + 8];
8420228a:	3a 99       	r0 = M[r5 + 48];
8420228c:	51 8e       	M[r0 + 4] = rMAC;
    p_ag->p_ed_pb->frame_size = AANC_DEFAULT_FRAME_SIZE;
8420228e:	39 99       	rMAC = M[r5 + 48];
84202290:	18 f0 02 8e 	M[rMAC + 8] = r6;
    p_ag->p_ed_pb->attack_time = p_params_tmp->OFFSET_ED_PB_ATTACK;
84202294:	61 f0 20 88 	rMAC = M[r4 + 128];
84202298:	3a 99       	r0 = M[r5 + 48];
8420229a:	d1 8e       	M[r0 + 12] = rMAC;
    p_ag->p_ed_pb->decay_time = p_params_tmp->OFFSET_ED_PB_DECAY;
8420229c:	61 f0 21 88 	rMAC = M[r4 + 132];
842022a0:	3a 99       	r0 = M[r5 + 48];
842022a2:	11 8f       	M[r0 + 16] = rMAC;
    p_ag->p_ed_pb->envelope_time = p_params_tmp->OFFSET_ED_PB_ENVELOPE;
842022a4:	61 f0 22 88 	rMAC = M[r4 + 136];
842022a8:	3a 99       	r0 = M[r5 + 48];
842022aa:	51 8f       	M[r0 + 20] = rMAC;
    p_ag->p_ed_pb->init_frame_time = p_params_tmp->OFFSET_ED_PB_INIT_FRAME;
842022ac:	61 f0 23 88 	rMAC = M[r4 + 140];
842022b0:	3a 99       	r0 = M[r5 + 48];
842022b2:	91 8f       	M[r0 + 24] = rMAC;
    p_ag->p_ed_pb->ratio = p_params_tmp->OFFSET_ED_PB_RATIO;
842022b4:	61 f0 24 88 	rMAC = M[r4 + 144];
842022b8:	3a 99       	r0 = M[r5 + 48];
842022ba:	d1 8f       	M[r0 + 28] = rMAC;
    p_ag->p_ed_pb->min_signal = p_params_tmp->OFFSET_ED_PB_MIN_SIGNAL;
842022bc:	61 f0 25 88 	rMAC = M[r4 + 148];
842022c0:	3a 99       	r0 = M[r5 + 48];
842022c2:	11 9e       	M[r0 + 32] = rMAC;
    p_ag->p_ed_pb->min_max_envelope = p_params_tmp->OFFSET_ED_PB_MIN_MAX_ENVELOPE;
842022c4:	61 f0 26 88 	rMAC = M[r4 + 152];
842022c8:	3a 99       	r0 = M[r5 + 48];
842022ca:	51 9e       	M[r0 + 36] = rMAC;
    p_ag->p_ed_pb->delta_th = p_params_tmp->OFFSET_ED_PB_DELTA_TH;
842022cc:	61 f0 27 88 	rMAC = M[r4 + 156];
842022d0:	3a 99       	r0 = M[r5 + 48];
842022d2:	91 9e       	M[r0 + 40] = rMAC;
    p_ag->p_ed_pb->count_th = p_params_tmp->OFFSET_ED_PB_COUNT_TH;
842022d4:	61 f0 28 88 	rMAC = M[r4 + 160];
842022d8:	3a 99       	r0 = M[r5 + 48];
842022da:	d1 9e       	M[r0 + 44] = rMAC;
    p_ag->p_ed_pb->hold_frames = p_params_tmp->OFFSET_ED_PB_HOLD_FRAMES;
842022dc:	61 f0 29 88 	rMAC = M[r4 + 164];
842022e0:	3a 99       	r0 = M[r5 + 48];
842022e2:	11 9f       	M[r0 + 48] = rMAC;
    p_ag->p_ed_pb->e_min_threshold = p_params_tmp->OFFSET_ED_PB_E_FILTER_MIN_THRESHOLD;
842022e4:	61 f0 2a 88 	rMAC = M[r4 + 168];
842022e8:	3a 99       	r0 = M[r5 + 48];
842022ea:	51 9f       	M[r0 + 52] = rMAC;
    p_ag->p_ed_pb->e_min_counter_threshold = p_params_tmp->OFFSET_ED_PB_E_FILTER_MIN_COUNTER_THRESHOLD;
842022ec:	61 f0 2b 88 	rMAC = M[r4 + 172];
842022f0:	3a 99       	r0 = M[r5 + 48];
842022f2:	91 9f       	M[r0 + 56] = rMAC;
    p_ag->p_ed_pb->e_min_check_disabled = pb_ed_disable_e_filter_check;
842022f4:	39 99       	rMAC = M[r5 + 48];
842022f6:	1a f0 0f 8e 	M[rMAC + 60] = r8;
    aanc_ed100_initialize(p_ag->f_handle, p_ag->p_ed_pb);
842022fa:	3b 99       	r1 = M[r5 + 48];
842022fc:	72 f0 26 88 	r0 = M[r5 + 152];
84202300:	03 f0 27 eb 	call (m) $_aanc_ed100_initialize;
    /**************************************************
     * Initialize Clipping                            *
     **************************************************/
    /* TODO: set to a function */
    aanc_proc_initialize_clip_detect(
        &p_ag->clip_ext, p_params_tmp->OFFSET_CLIPPING_DURATION_EXT);
84202304:	63 f0 40 88 	r1 = M[r4 + 256];
84202308:	72 f0 44 20 	r0 = r5 + 68;
8420230c:	01 f0 2f e9 	call (m) Lc_aanc_proc_initialize_clip_detect_1;
    aanc_proc_initialize_clip_detect(
        &p_ag->clip_int, p_params_tmp->OFFSET_CLIPPING_DURATION_INT);
84202310:	63 f0 41 88 	r1 = M[r4 + 260];
84202314:	72 f0 50 20 	r0 = r5 + 80;
84202318:	01 f0 23 e9 	call (m) Lc_aanc_proc_initialize_clip_detect_1;
    aanc_proc_initialize_clip_detect(
        &p_ag->clip_pb, p_params_tmp->OFFSET_CLIPPING_DURATION_PB);
8420231c:	63 f0 42 88 	r1 = M[r4 + 264];
84202320:	72 f0 5c 20 	r0 = r5 + 92;
84202324:	01 f0 37 e8 	call (m) Lc_aanc_proc_initialize_clip_detect_1;

    return TRUE;
84202328:	42 20       	r0 = Null + 1;

8420232a <Lc_aanc_proc_initialize_16>:
}
8420232a:	b0 f3 10 cf 	SP = SP + -160;
8420232e:	f6 48       	popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84202330:	d8 4c       	rts;

84202332 <$_aanc_proc_process_data>:

bool aanc_proc_process_data(ADAPTIVE_GAIN *p_ag, bool calculate_gain)
{
84202332:	f6 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>;
84202334:	16 00       	r4 = r0 + Null;
84202336:	1b 09       	r9 = r1 + Null;
    AANC_PARAMETERS *p_params;
    int quiet_mode_lo_threshold, quiet_mode_hi_threshold;
    bool clip_int_disable, clip_ext_disable, clip_pb_disable, clip_disable;

    /* Copy input data to internal data buffers */
    cbuffer_copy(p_ag->p_tmp_int_ip, p_ag->p_mic_int_ip, AANC_DEFAULT_FRAME_SIZE);
84202338:	04 f0 40 40 	r2 = Null + 64;
8420233c:	f3 b9       	r1 = M[r4 + 124];
8420233e:	f2 88       	r0 = M[r4 + 12];
84202340:	ff fd be f1 	call (m) 0x3a08c;
84202344:	2d ea 
    cbuffer_copy(p_ag->p_tmp_ext_ip, p_ag->p_mic_ext_ip, AANC_DEFAULT_FRAME_SIZE);
84202346:	04 f0 40 40 	r2 = Null + 64;
8420234a:	63 f0 20 88 	r1 = M[r4 + 128];
8420234e:	f2 89       	r0 = M[r4 + 28];
84202350:	ff fd be f1 	call (m) 0x3a08c;
84202354:	3d e9 

    /* Copy playback data to internal data buffers if connected */
    if (p_ag->p_playback_ip != NULL)
84202356:	63 f0 21 88 	r1 = M[r4 + 132];
8420235a:	07 60       	if EQ jump (m) Lc_aanc_proc_process_data_3;

8420235c <Lc_aanc_proc_process_data_2>:
    {
        cbuffer_copy(p_ag->p_tmp_pb_ip, p_ag->p_playback_ip,
                     AANC_DEFAULT_FRAME_SIZE);
8420235c:	04 f0 40 40 	r2 = Null + 64;
84202360:	f2 98       	r0 = M[r4 + 44];
84202362:	ff fd be f1 	call (m) 0x3a08c;
84202366:	2b e9 

84202368 <Lc_aanc_proc_process_data_3>:
    }

    /* Copy fbmon data through if connected */
    if (p_ag->p_fbmon_ip != NULL)
84202368:	b2 b9       	r0 = M[r4 + 120];
8420236a:	11 60       	if EQ jump (m) Lc_aanc_proc_process_data_7;

8420236c <Lc_aanc_proc_process_data_4>:
    {
        if (p_ag->p_fbmon_op != NULL)
8420236c:	61 f0 22 88 	rMAC = M[r4 + 136];
84202370:	09 60       	if EQ jump (m) Lc_aanc_proc_process_data_6;

84202372 <Lc_aanc_proc_process_data_5>:
        {
            cbuffer_copy(p_ag->p_fbmon_op, p_ag->p_fbmon_ip,
                         AANC_DEFAULT_FRAME_SIZE);
84202372:	04 f0 40 40 	r2 = Null + 64;
84202376:	13 00       	r1 = r0 + Null;
84202378:	0a 00       	r0 = rMAC + Null;
8420237a:	ff fd be f1 	call (m) 0x3a08c;
8420237e:	33 e8 
84202380:	06 6e       	jump (m) Lc_aanc_proc_process_data_7;

84202382 <Lc_aanc_proc_process_data_6>:
        }
        else
        {
            cbuffer_discard_data(p_ag->p_fbmon_ip, AANC_DEFAULT_FRAME_SIZE);
84202382:	03 f0 40 40 	r1 = Null + 64;
84202386:	ff fd bd f1 	call (m) 0x39f54;
8420238a:	2f ee 

8420238c <Lc_aanc_proc_process_data_7>:
        }
    }

    /* Clear all flags connected with processing data but persist quiet mode    */
    flags_pre_proc = *p_ag->p_aanc_flags & (AANC_MODEL_MASK | AANC_FLAGS_QUIET_MODE);
8420238c:	31 b9       	rMAC = M[r4 + 112];
8420238e:	09 e8       	rMAC = M[rMAC + Null];
84202390:	0f f0 17 f8 	r5 = rMAC AND 0x1f0000;
84202394:	00 00 

    /* Determine clip detection enable/disable  */
    debug_config = p_ag->p_aanc_params->OFFSET_AANC_DEBUG;
84202396:	f1 b8       	rMAC = M[r4 + 108];
84202398:	1a f0 05 88 	r8 = M[rMAC + 20];
    clip_int_disable = debug_config & AANC_CONFIG_AANC_DEBUG_DISABLE_CLIPPING_DETECT_INT;
    clip_ext_disable = debug_config & AANC_CONFIG_AANC_DEBUG_DISABLE_CLIPPING_DETECT_EXT;
8420239c:	a2 f1 00 00 	r0 = r8 AND 0x2000;
    clip_pb_disable = debug_config & AANC_CONFIG_AANC_DEBUG_DISABLE_CLIPPING_DETECT_PB;
842023a0:	a3 f2 00 00 	r1 = r8 AND 0x4000;
    clip_disable = clip_int_disable && clip_ext_disable && clip_pb_disable;
842023a4:	a1 f0 00 10 	rMAC = r8 AND 0x1000;
842023a8:	05 60       	if EQ jump (m) Lc_aanc_proc_process_data_10;

842023aa <Lc_aanc_proc_process_data_8>:
842023aa:	10 04       	Null = r0 - Null;
842023ac:	03 60       	if EQ jump (m) Lc_aanc_proc_process_data_10;

842023ae <Lc_aanc_proc_process_data_9>:
842023ae:	18 04       	Null = r1 - Null;
842023b0:	58 62       	if NE jump (m) Lc_aanc_proc_process_data_22;

842023b2 <Lc_aanc_proc_process_data_10>:

    /* Clipping detection on the input mics */
    if (!(clip_disable))
    {
        aanc_proc_clipping_peak_detect(p_ag);
842023b2:	32 00       	r0 = r4 + Null;
842023b4:	01 f0 3f e4 	call (m) $_aanc_proc_clipping_peak_detect;
        aanc_proc_process_clip_detect(&p_ag->clip_ext);
842023b8:	62 f0 44 20 	r0 = r4 + 68;
842023bc:	01 f0 3d e2 	call (m) Lc_aanc_proc_process_clip_detect_1;
        aanc_proc_process_clip_detect(&p_ag->clip_int);
842023c0:	62 f0 50 20 	r0 = r4 + 80;
842023c4:	01 f0 35 e2 	call (m) Lc_aanc_proc_process_clip_detect_1;
        aanc_proc_process_clip_detect(&p_ag->clip_pb);
842023c8:	62 f0 5c 20 	r0 = r4 + 92;
842023cc:	01 f0 2d e2 	call (m) Lc_aanc_proc_process_clip_detect_1;

        clip_det = p_ag->clip_ext.detected * AANC_FLAGS_CLIPPING_EXT;
842023d0:	62 f0 4e 82 	r0 = MBU[r4 + 78];
842023d4:	04 f2 d8 d8 	r6 = r0 LSHIFT 9;
        clip_det |= p_ag->clip_int.detected * AANC_FLAGS_CLIPPING_INT;
842023d8:	62 f0 5a 82 	r0 = MBU[r4 + 90];
842023dc:	d2 55       	r0 = r0 LSHIFT 8;
842023de:	00 f2 78 c8 	r6 = r6 OR r0;
        clip_det |= p_ag->clip_pb.detected * AANC_FLAGS_CLIPPING_PLAYBACK;
842023e2:	62 f0 66 82 	r0 = MBU[r4 + 102];
842023e6:	05 f2 d2 c8 	r0 = r0 LSHIFT 10;

        if (clip_det > 0)
842023ea:	00 f2 78 c8 	r6 = r6 OR r0;
842023ee:	39 60       	if EQ jump (m) Lc_aanc_proc_process_data_22;

842023f0 <Lc_aanc_proc_process_data_11>:
        {
            /* Copy input data to output if terminals are connected otherwise
             * discard data.
             */
            if (p_ag->p_mic_int_op != NULL)
842023f0:	62 f0 23 88 	r0 = M[r4 + 140];
842023f4:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_13;

842023f6 <Lc_aanc_proc_process_data_12>:
            {
                cbuffer_copy(p_ag->p_mic_int_op, p_ag->p_tmp_int_ip,
                             AANC_DEFAULT_FRAME_SIZE);
842023f6:	04 f0 40 40 	r2 = Null + 64;
842023fa:	f3 88       	r1 = M[r4 + 12];
842023fc:	ff fd be f1 	call (m) 0x3a08c;
84202400:	31 e4 
84202402:	07 6e       	jump (m) Lc_aanc_proc_process_data_14;

84202404 <Lc_aanc_proc_process_data_13>:
            }
            else
            {
                cbuffer_discard_data(p_ag->p_tmp_int_ip,
                                     AANC_DEFAULT_FRAME_SIZE);
84202404:	03 f0 40 40 	r1 = Null + 64;
84202408:	f2 88       	r0 = M[r4 + 12];
8420240a:	ff fd bd f1 	call (m) 0x39f54;
8420240e:	2b ea 

84202410 <Lc_aanc_proc_process_data_14>:
            }

            if (p_ag->p_mic_ext_op != NULL)
84202410:	62 f0 24 88 	r0 = M[r4 + 144];
84202414:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_16;

84202416 <Lc_aanc_proc_process_data_15>:
            {
                cbuffer_copy(p_ag->p_mic_ext_op, p_ag->p_tmp_ext_ip,
                             AANC_DEFAULT_FRAME_SIZE);
84202416:	04 f0 40 40 	r2 = Null + 64;
8420241a:	f3 89       	r1 = M[r4 + 28];
8420241c:	ff fd be f1 	call (m) 0x3a08c;
84202420:	31 e3 
84202422:	07 6e       	jump (m) Lc_aanc_proc_process_data_17;

84202424 <Lc_aanc_proc_process_data_16>:
            }
            else
            {
                cbuffer_discard_data(p_ag->p_tmp_ext_ip,
                                     AANC_DEFAULT_FRAME_SIZE);
84202424:	03 f0 40 40 	r1 = Null + 64;
84202428:	f2 89       	r0 = M[r4 + 28];
8420242a:	ff fd bd f1 	call (m) 0x39f54;
8420242e:	2b e9 

84202430 <Lc_aanc_proc_process_data_17>:
            }

            /* Copy or discard data on the playback stream */
            if (p_ag->p_playback_ip != NULL) {
84202430:	61 f0 21 88 	rMAC = M[r4 + 132];
84202434:	10 60       	if EQ jump (m) Lc_aanc_proc_process_data_21;

84202436 <Lc_aanc_proc_process_data_18>:
                if (p_ag->p_playback_op != NULL)
84202436:	72 b9       	r0 = M[r4 + 116];
84202438:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_20;

8420243a <Lc_aanc_proc_process_data_19>:
                {
                    cbuffer_copy(p_ag->p_playback_op, p_ag->p_tmp_pb_ip,
                                AANC_DEFAULT_FRAME_SIZE);
8420243a:	04 f0 40 40 	r2 = Null + 64;
8420243e:	f3 98       	r1 = M[r4 + 44];
84202440:	ff fd be f1 	call (m) 0x3a08c;
84202444:	2d e2 
84202446:	07 6e       	jump (m) Lc_aanc_proc_process_data_21;

84202448 <Lc_aanc_proc_process_data_20>:
                }
                else
                {
                    cbuffer_discard_data(p_ag->p_tmp_pb_ip,
                                        AANC_DEFAULT_FRAME_SIZE);
84202448:	03 f0 40 40 	r1 = Null + 64;
8420244c:	f2 98       	r0 = M[r4 + 44];
8420244e:	ff fd bd f1 	call (m) 0x39f54;
84202452:	27 e8 

84202454 <Lc_aanc_proc_process_data_21>:
                }
            }

            flags_pre_proc |= clip_det;
84202454:	00 f8 77 c8 	r5 = r5 OR r6;
            *p_ag->p_aanc_flags = flags_pre_proc;
84202458:	31 b9       	rMAC = M[r4 + 112];
8420245a:	0f ee       	M[rMAC + Null] = r5;
            return FALSE;
8420245c:	02 00       	r0 = Null + Null;
8420245e:	c0 6e       	jump (m) Lc_aanc_proc_process_data_59;

84202460 <Lc_aanc_proc_process_data_22>:
        }
    }

    /* ED process ext mic */
    config = p_ag->p_aanc_params->OFFSET_AANC_CONFIG;
84202460:	f1 b8       	rMAC = M[r4 + 108];
84202462:	19 f0 00 e8 	r7 = M[rMAC + Null];
    if (!(config & AANC_CONFIG_AANC_CONFIG_DISABLE_ED_EXT))
84202466:	91 f0 02 00 	rMAC = r7 AND 0x2;
8420246a:	1b 62       	if NE jump (m) Lc_aanc_proc_process_data_29;

8420246c <Lc_aanc_proc_process_data_23>:
    {
        aanc_ed100_process_data(p_ag->f_handle, p_ag->p_ed_ext);
8420246c:	73 98       	r1 = M[r4 + 36];
8420246e:	62 f0 26 88 	r0 = M[r4 + 152];
84202472:	03 f0 35 e1 	call (m) $_aanc_ed100_process_data;

        /* Catch external ED detection */
        if (p_ag->p_ed_ext->detection)
84202476:	71 98       	rMAC = M[r4 + 36];
84202478:	c8 a8       	Null = M[rMAC + 76];
8420247a:	02 60       	if EQ jump (m) Lc_aanc_proc_process_data_25;

8420247c <Lc_aanc_proc_process_data_24>:
        {
            flags_pre_proc |= AANC_FLAGS_ED_EXT;
8420247c:	7f ca       	r5 = r5 OR 0x20;

8420247e <Lc_aanc_proc_process_data_25>:
            L4_DBG_MSG("AANC_PROC ED Ext Detection");
        }

        p_params = p_ag->p_aanc_params;
8420247e:	f2 b8       	r0 = M[r4 + 108];
        quiet_mode_lo_threshold = p_params->OFFSET_QUIET_MODE_LO_THRESHOLD;
84202480:	d3 89       	r1 = M[r0 + 28];
        quiet_mode_hi_threshold = p_params->OFFSET_QUIET_MODE_HI_THRESHOLD;
84202482:	92 89       	r0 = M[r0 + 24];
        /* Threshold detect on external ED */
        if (p_ag->p_ed_ext->spl < quiet_mode_lo_threshold)
84202484:	09 a8       	rMAC = M[rMAC + 64];
84202486:	c8 04       	Null = rMAC - r1;
84202488:	06 66       	if GE jump (m) Lc_aanc_proc_process_data_27;

8420248a <Lc_aanc_proc_process_data_26>:
        {
            L4_DBG_MSG("AANC_PROC ED Ext below quiet mode low threshold");
            /* Set quiet mode flag */
            flags_pre_proc |= AANC_FLAGS_QUIET_MODE;
8420248a:	01 f0 00 f0 	r5 = r5 OR 0x100000;
8420248e:	00 f7 57 c8 
84202492:	07 6e       	jump (m) Lc_aanc_proc_process_data_29;

84202494 <Lc_aanc_proc_process_data_27>:
        }
        else if (p_ag->p_ed_ext->spl > quiet_mode_hi_threshold)
84202494:	88 04       	Null = rMAC - r0;
84202496:	05 6c       	if LE jump (m) Lc_aanc_proc_process_data_29;

84202498 <Lc_aanc_proc_process_data_28>:
        {
            /* Reset quiet mode flag */
            flags_pre_proc &= AANC_PROC_QUIET_MODE_RESET_FLAG;
84202498:	03 f0 f7 ff 	r5 = r5 AND 0x7fefffff;
8420249c:	77 ff ff 1f 

842024a0 <Lc_aanc_proc_process_data_29>:
        }
    }

    /* ED process int mic */
    if (!(config & AANC_CONFIG_AANC_CONFIG_DISABLE_ED_INT))
842024a0:	91 f0 01 00 	rMAC = r7 AND 0x1;
842024a4:	0a 62       	if NE jump (m) Lc_aanc_proc_process_data_32;

842024a6 <Lc_aanc_proc_process_data_30>:
    {
        aanc_ed100_process_data(p_ag->f_handle, p_ag->p_ed_int);
842024a6:	73 89       	r1 = M[r4 + 20];
842024a8:	62 f0 26 88 	r0 = M[r4 + 152];
842024ac:	02 f0 3b ef 	call (m) $_aanc_ed100_process_data;
        if (p_ag->p_ed_int->detection)
842024b0:	71 89       	rMAC = M[r4 + 20];
842024b2:	c8 a8       	Null = M[rMAC + 76];
842024b4:	02 60       	if EQ jump (m) Lc_aanc_proc_process_data_32;

842024b6 <Lc_aanc_proc_process_data_31>:
        {
            flags_pre_proc |= AANC_FLAGS_ED_INT;
842024b6:	ff c9       	r5 = r5 OR 0x10;

842024b8 <Lc_aanc_proc_process_data_32>:
            L4_DBG_MSG("AANC_PROC: ED Int Detection");
        }
    }

    self_speech = FALSE;
842024b8:	00 09       	r6 = Null + Null;
    if (!(config & AANC_CONFIG_AANC_CONFIG_DISABLE_SELF_SPEECH))
842024ba:	91 f0 08 00 	rMAC = r7 AND 0x8;
842024be:	0b 62       	if NE jump (m) Lc_aanc_proc_process_data_35;

842024c0 <Lc_aanc_proc_process_data_33>:
    {
        /* ED process self-speech */
        self_speech = aanc_ed100_self_speech_detect(
            p_ag->p_ed_int, p_ag->p_ed_ext,
            p_ag->p_aanc_params->OFFSET_SELF_SPEECH_THRESHOLD);
842024c0:	f1 b8       	rMAC = M[r4 + 108];
842024c2:	73 98       	r1 = M[r4 + 36];
842024c4:	14 f0 4e 88 	r2 = M[rMAC + 312];
842024c8:	72 89       	r0 = M[r4 + 20];
842024ca:	03 f0 21 e3 	call (m) $_aanc_ed100_self_speech_detect;
842024ce:	10 09       	r6 = r0 + Null;
        if (self_speech)
842024d0:	02 60       	if EQ jump (m) Lc_aanc_proc_process_data_35;

842024d2 <Lc_aanc_proc_process_data_34>:
        {
            flags_pre_proc |= AANC_FLAGS_SELF_SPEECH;
842024d2:	7f cb       	r5 = r5 OR 0x80;

842024d4 <Lc_aanc_proc_process_data_35>:
        }
    }

    /* ED process playback */
    if (p_ag->p_playback_ip != NULL &&
        !(config & AANC_CONFIG_AANC_CONFIG_DISABLE_ED_PB))
842024d4:	61 f0 21 88 	rMAC = M[r4 + 132];
842024d8:	0d 60       	if EQ jump (m) Lc_aanc_proc_process_data_39;

842024da <Lc_aanc_proc_process_data_36>:
842024da:	91 f0 04 00 	rMAC = r7 AND 0x4;
842024de:	0a 62       	if NE jump (m) Lc_aanc_proc_process_data_39;

842024e0 <Lc_aanc_proc_process_data_37>:
    {
        aanc_ed100_process_data(p_ag->f_handle, p_ag->p_ed_pb);
842024e0:	33 99       	r1 = M[r4 + 48];
842024e2:	62 f0 26 88 	r0 = M[r4 + 152];
842024e6:	02 f0 21 ee 	call (m) $_aanc_ed100_process_data;
        if (p_ag->p_ed_pb->detection)
842024ea:	31 99       	rMAC = M[r4 + 48];
842024ec:	c8 a8       	Null = M[rMAC + 76];
842024ee:	02 60       	if EQ jump (m) Lc_aanc_proc_process_data_39;

842024f0 <Lc_aanc_proc_process_data_38>:
        {
            flags_pre_proc |= AANC_FLAGS_ED_PLAYBACK;
842024f0:	ff ca       	r5 = r5 OR 0x40;

842024f2 <Lc_aanc_proc_process_data_39>:
            L4_DBG_MSG("AANC_PROC: ED Playback Detection");
        }
    }

    /* Update flags */
    *p_ag->p_aanc_flags = flags_pre_proc;
842024f2:	31 b9       	rMAC = M[r4 + 112];
842024f4:	0f ee       	M[rMAC + Null] = r5;

    /* Reference the working buffer used at the end to copy or discard data.
     * If adaptive gain calculation runs this is updated to the temporary output
     * buffers.
     */
    tCbuffer *p_int_working_buffer = p_ag->p_tmp_int_ip;
842024f6:	f7 88       	r5 = M[r4 + 12];
    tCbuffer *p_ext_working_buffer = p_ag->p_tmp_ext_ip;
842024f8:	69 f0 07 88 	r7 = M[r4 + 28];

    /* Call adaptive ANC function */
    if (!p_ag->p_ed_ext->detection && !p_ag->p_ed_int->detection &&
        !p_ag->p_ed_pb->detection  && !self_speech && calculate_gain)
842024fc:	71 98       	rMAC = M[r4 + 36];
842024fe:	c8 a8       	Null = M[rMAC + 76];
84202500:	3c 62       	if NE jump (m) Lc_aanc_proc_process_data_48;

84202502 <Lc_aanc_proc_process_data_40>:
84202502:	71 89       	rMAC = M[r4 + 20];
84202504:	c8 a8       	Null = M[rMAC + 76];
84202506:	39 62       	if NE jump (m) Lc_aanc_proc_process_data_48;

84202508 <Lc_aanc_proc_process_data_41>:
84202508:	31 99       	rMAC = M[r4 + 48];
8420250a:	c8 a8       	Null = M[rMAC + 76];
8420250c:	36 62       	if NE jump (m) Lc_aanc_proc_process_data_48;

8420250e <Lc_aanc_proc_process_data_42>:
8420250e:	0f f8 00 c2 	Null = r6 - Null;
84202512:	33 62       	if NE jump (m) Lc_aanc_proc_process_data_48;

84202514 <Lc_aanc_proc_process_data_43>:
84202514:	0f fb 00 c2 	Null = r9 - Null;
84202518:	30 60       	if EQ jump (m) Lc_aanc_proc_process_data_48;

8420251a <Lc_aanc_proc_process_data_44>:
    {
        L5_DBG_MSG("AANC_PROC: Calculate new gain");
        /* Commit scratch memory prior to processing */
        p_ag->p_fxlms->p_scratch_plant = \
            scratch_commit(FXLMS100_SCRATCH_MEMORY, MALLOC_PREFERENCE_NONE);
8420251a:	c3 20       	r1 = Null + 3;
8420251c:	02 f0 00 41 	r0 = Null + 256;
84202520:	ef fd fa ff 	call (m) 0x1a62;
84202524:	23 ea 
84202526:	b1 99       	rMAC = M[r4 + 56];
84202528:	0a ee       	M[rMAC + Null] = r0;
        p_ag->p_fxlms->p_scratch_control = \
            scratch_commit(FXLMS100_SCRATCH_MEMORY, MALLOC_PREFERENCE_NONE);
8420252a:	c3 20       	r1 = Null + 3;
8420252c:	02 f0 00 41 	r0 = Null + 256;
84202530:	ef fd fa ff 	call (m) 0x1a62;
84202534:	33 e9 
84202536:	b1 99       	rMAC = M[r4 + 56];
84202538:	4a 8e       	M[rMAC + 4] = r0;
        /* Get control for whether the read pointer is updated or not
           If MUX_SEL_ALGORITHM we update the read pointer because the input
           buffer is not copied later. If not we don't update it so that the
           input buffer is correctly copied to the output.  */
        mux_sel_algorithm = \
        debug_config & AANC_CONFIG_AANC_DEBUG_MUX_SEL_ALGORITHM;
8420253a:	a8 f0 00 01 	r6 = r8 AND 0x100;
        p_ag->p_fxlms->read_ptr_upd = mux_sel_algorithm;
8420253e:	b1 99       	rMAC = M[r4 + 56];
84202540:	18 f0 0c 8e 	M[rMAC + 48] = r6;

        if (aanc_fxlms100_process_data(p_ag->f_handle, p_ag->p_fxlms))
84202544:	b3 99       	r1 = M[r4 + 56];
84202546:	62 f0 26 88 	r0 = M[r4 + 152];
8420254a:	01 f0 33 e9 	call (m) $_aanc_fxlms100_process_data;
8420254e:	10 04       	Null = r0 - Null;
84202550:	0d 60       	if EQ jump (m) Lc_aanc_proc_process_data_47;

84202552 <Lc_aanc_proc_process_data_45>:
        {
            *p_ag->p_aanc_flags |= p_ag->p_fxlms->flags;
84202552:	31 b9       	rMAC = M[r4 + 112];
84202554:	b2 99       	r0 = M[r4 + 56];
84202556:	0b e8       	r1 = M[rMAC + Null];
84202558:	52 a8       	r0 = M[r0 + 68];
8420255a:	d2 12       	r0 = r0 OR r1;
8420255c:	0a ee       	M[rMAC + Null] = r0;
            if (mux_sel_algorithm)
8420255e:	0f f8 00 c2 	Null = r6 - Null;
84202562:	04 60       	if EQ jump (m) Lc_aanc_proc_process_data_47;

84202564 <Lc_aanc_proc_process_data_46>:
            {
                p_int_working_buffer = p_ag->p_tmp_int_op;
84202564:	37 89       	r5 = M[r4 + 16];
                p_ext_working_buffer = p_ag->p_tmp_ext_op;
84202566:	69 f0 08 88 	r7 = M[r4 + 32];

8420256a <Lc_aanc_proc_process_data_47>:
            }
        }

        p_ag->p_fxlms->p_scratch_plant = NULL;
8420256a:	b1 99       	rMAC = M[r4 + 56];
8420256c:	08 ee       	M[rMAC + Null] = Null;
        p_ag->p_fxlms->p_scratch_control = NULL;
8420256e:	b1 99       	rMAC = M[r4 + 56];
84202570:	48 8e       	M[rMAC + 4] = Null;
        scratch_free();
84202572:	ef fd fa ff 	call (m) 0x1ac8;
84202576:	37 ea 

84202578 <Lc_aanc_proc_process_data_48>:
    }

    /* Copy internal buffers to the output buffers if they are connected
    * otherwise discard the data.
    */
    if (p_ag->p_mic_int_op != NULL)
84202578:	62 f0 23 88 	r0 = M[r4 + 140];
8420257c:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_50;

8420257e <Lc_aanc_proc_process_data_49>:
    {
        cbuffer_copy(p_ag->p_mic_int_op, p_int_working_buffer,
                        AANC_DEFAULT_FRAME_SIZE);
8420257e:	04 f0 40 40 	r2 = Null + 64;
84202582:	3b 00       	r1 = r5 + Null;
84202584:	ff fd bd f1 	call (m) 0x3a08c;
84202588:	29 e8 
8420258a:	07 6e       	jump (m) Lc_aanc_proc_process_data_51;

8420258c <Lc_aanc_proc_process_data_50>:
    }
    else
    {
        cbuffer_discard_data(p_int_working_buffer, AANC_DEFAULT_FRAME_SIZE);
8420258c:	03 f0 40 40 	r1 = Null + 64;
84202590:	3a 00       	r0 = r5 + Null;
84202592:	ff fd bc f1 	call (m) 0x39f54;
84202596:	23 ee 

84202598 <Lc_aanc_proc_process_data_51>:
    }

    if (p_ag->p_mic_ext_op != NULL)
84202598:	62 f0 24 88 	r0 = M[r4 + 144];
8420259c:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_53;

8420259e <Lc_aanc_proc_process_data_52>:
    {
        cbuffer_copy(p_ag->p_mic_ext_op, p_ext_working_buffer,
                        AANC_DEFAULT_FRAME_SIZE);
8420259e:	04 f0 40 40 	r2 = Null + 64;
842025a2:	4b 08       	r1 = r7 + Null;
842025a4:	ff fd bd f1 	call (m) 0x3a08c;
842025a8:	29 e7 
842025aa:	07 6e       	jump (m) Lc_aanc_proc_process_data_54;

842025ac <Lc_aanc_proc_process_data_53>:
    }
    else
    {
        cbuffer_discard_data(p_ext_working_buffer, AANC_DEFAULT_FRAME_SIZE);
842025ac:	03 f0 40 40 	r1 = Null + 64;
842025b0:	4a 08       	r0 = r7 + Null;
842025b2:	ff fd bc f1 	call (m) 0x39f54;
842025b6:	23 ed 

842025b8 <Lc_aanc_proc_process_data_54>:
    }

    /* Copy or discard data on the internal playback stream buffer */
    if (p_ag->p_playback_ip != NULL) {
842025b8:	61 f0 21 88 	rMAC = M[r4 + 132];
842025bc:	10 60       	if EQ jump (m) Lc_aanc_proc_process_data_58;

842025be <Lc_aanc_proc_process_data_55>:
        if (p_ag->p_playback_op != NULL)
842025be:	72 b9       	r0 = M[r4 + 116];
842025c0:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_57;

842025c2 <Lc_aanc_proc_process_data_56>:
        {
            cbuffer_copy(p_ag->p_playback_op, p_ag->p_tmp_pb_ip,
                        AANC_DEFAULT_FRAME_SIZE);
842025c2:	04 f0 40 40 	r2 = Null + 64;
842025c6:	f3 98       	r1 = M[r4 + 44];
842025c8:	ff fd bd f1 	call (m) 0x3a08c;
842025cc:	25 e6 
842025ce:	07 6e       	jump (m) Lc_aanc_proc_process_data_58;

842025d0 <Lc_aanc_proc_process_data_57>:
        }
        else
        {
            cbuffer_discard_data(p_ag->p_tmp_pb_ip,
                                 AANC_DEFAULT_FRAME_SIZE);
842025d0:	03 f0 40 40 	r1 = Null + 64;
842025d4:	f2 98       	r0 = M[r4 + 44];
842025d6:	ff fd bc f1 	call (m) 0x39f54;
842025da:	3f eb 

842025dc <Lc_aanc_proc_process_data_58>:
        }
    }

    return TRUE;
842025dc:	42 20       	r0 = Null + 1;

842025de <Lc_aanc_proc_process_data_59>:
}
842025de:	f6 48       	popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
842025e0:	d8 4c       	rts;

842025e2 <Lc_aanc_proc_create_cbuffer_1>:
 * \param  malloc_pref  Malloc preference.
 *
 * \return  boolean indicating success or failure.
 */
static bool aanc_proc_create_cbuffer(tCbuffer **pp_buffer, unsigned malloc_pref)
{
842025e2:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
842025e4:	16 00       	r4 = r0 + Null;
    /* Allocate buffer memory explicitly */
    int *ptr = xzppnewn(AANC_INTERNAL_BUFFER_SIZE, int, malloc_pref);
842025e6:	02 f0 04 41 	r0 = Null + 260;
842025ea:	ff fd 21 f0 	call (m) 0x68a6;
842025ee:	3d e5 
842025f0:	17 00       	r5 = r0 + Null;

    if (ptr == NULL)
842025f2:	0e 60       	if EQ jump (m) Lc_aanc_proc_create_cbuffer_4;

842025f4 <Lc_aanc_proc_create_cbuffer_2>:
        return FALSE;
    }

    /* Wrap allocated memory in a cbuffer */
    *pp_buffer = cbuffer_create(ptr, AANC_INTERNAL_BUFFER_SIZE,
                               BUF_DESC_SW_BUFFER);
842025f4:	03 f0 41 40 	r1 = Null + 65;
842025f8:	04 00       	r2 = Null + Null;
842025fa:	ff fd 8e f0 	call (m) 0x1429c;
842025fe:	23 e5 
84202600:	32 ee       	M[r4 + Null] = r0;
    if (*pp_buffer == NULL)
84202602:	31 e8       	rMAC = M[r4 + Null];
84202604:	07 62       	if NE jump (m) Lc_aanc_proc_create_cbuffer_5;

84202606 <Lc_aanc_proc_create_cbuffer_3>:
    {
        pdelete(ptr);
84202606:	3a 00       	r0 = r5 + Null;
84202608:	ff fd 21 f0 	call (m) 0x68d8;
8420260c:	31 e6 

8420260e <Lc_aanc_proc_create_cbuffer_4>:
    /* Allocate buffer memory explicitly */
    int *ptr = xzppnewn(AANC_INTERNAL_BUFFER_SIZE, int, malloc_pref);

    if (ptr == NULL)
    {
        return FALSE;
8420260e:	02 00       	r0 = Null + Null;
84202610:	02 6e       	jump (m) Lc_aanc_proc_create_cbuffer_6;

84202612 <Lc_aanc_proc_create_cbuffer_5>:
        ptr = NULL;

        return FALSE;
    }

    return TRUE;
84202612:	42 20       	r0 = Null + 1;

84202614 <Lc_aanc_proc_create_cbuffer_6>:
}
84202614:	f2 48       	popm <FP, r4, r5, rLink>;
84202616:	d8 4c       	rts;

84202618 <Lc_aanc_proc_process_clip_detect_1>:
 * for a given duration (frames).
 */
static void aanc_proc_process_clip_detect(AANC_CLIP_DETECT *p_clip)
{
    /* Disabled resets the flag */
    if (p_clip->disabled)
84202618:	51 92       	rMAC = MBU[r0 + 9];
8420261a:	03 60       	if EQ jump (m) Lc_aanc_proc_process_clip_detect_3;

8420261c <Lc_aanc_proc_process_clip_detect_2>:
    {
        p_clip->detected = FALSE;
8420261c:	90 9a       	MB[r0 + 10] = Null;
8420261e:	0d 6e       	jump (m) Lc_aanc_proc_process_clip_detect_7;

84202620 <Lc_aanc_proc_process_clip_detect_3>:
    }
    else
    {
        /* Detection sets the flag and resets the counter */
        if (p_clip->frame_detect)
84202620:	11 92       	rMAC = MBU[r0 + 8];
84202622:	06 60       	if EQ jump (m) Lc_aanc_proc_process_clip_detect_5;

84202624 <Lc_aanc_proc_process_clip_detect_4>:
        {
            p_clip->counter = p_clip->duration;
84202624:	91 86       	rMAC = MHU[r0 + 4];
84202626:	d1 8c       	MH[r0 + 6] = rMAC;
            p_clip->detected = TRUE;
84202628:	41 20       	rMAC = Null + 1;
8420262a:	91 9a       	MB[r0 + 10] = rMAC;
8420262c:	06 6e       	jump (m) Lc_aanc_proc_process_clip_detect_7;

8420262e <Lc_aanc_proc_process_clip_detect_5>:
        }
        else
        {
            /* No detection decrements the counter until 0 */
            if (p_clip->counter > 0)
8420262e:	d1 86       	rMAC = MHU[r0 + 6];
84202630:	08 24       	Null = rMAC - 0;
84202632:	f5 6d       	if LE jump (m) Lc_aanc_proc_process_clip_detect_2;

84202634 <Lc_aanc_proc_process_clip_detect_6>:
            {
                p_clip->counter--;
84202634:	49 24       	rMAC = rMAC - 1;
84202636:	d1 8c       	MH[r0 + 6] = rMAC;

84202638 <Lc_aanc_proc_process_clip_detect_7>:
84202638:	d8 4c       	rts;

8420263a <Lc_aanc_proc_initialize_clip_detect_1>:
 */
static void aanc_proc_initialize_clip_detect(AANC_CLIP_DETECT *p_clip,
                                             unsigned duration)
{
    /* Convert duration in seconds to frames */
    p_clip->duration = (uint16)((duration * AANC_FRAME_RATE) >> 20);
8420263a:	7d f3 93 c9 	r1 = r1 * 250 (int);
8420263e:	db 52       	r1 = r1 LSHIFT -20;
84202640:	93 8c       	MH[r0 + 4] = r1;
    p_clip->counter = 0;
84202642:	d0 8c       	MH[r0 + 6] = Null;
    p_clip->detected = FALSE;
84202644:	90 9a       	MB[r0 + 10] = Null;

84202646 <Lc_aanc_proc_initialize_clip_detect_2>:
84202646:	d8 4c       	rts;

84202648 <$kdc_start>:
.MODULE $M.kdc_start;
.CODESEGMENT PM;
.DATASEGMENT DM;

$kdc_start:
r0 = $_aanc_mono_16k_cap_data;
84202648:	07 f0 02 f0 	r0 = Null + 7340032;
8420264c:	00 40 
    /* Force this symbol to be exported in ELF */
    Null = $___kymera_debug_map_addr;
8420264e:	20 f0 f8 42 	Null = Null + 17144;

84202652 <$_aanc_proc_clipping_peak_detect>:
.MODULE $M.aanc_proc.clipping_peak_detect;
    .CODESEGMENT PM;

$_aanc_proc_clipping_peak_detect:

    PUSH_ALL_C;
84202652:	fc fa 40 e0 	pushm <r4, r5, r6, r7, r8, r9, rLink, rMACB>;
84202656:	07 f0 47 e4 	pushm <I0, I1, I2, I4, I5, I6>;
8420265a:	70 ff 40 e4 	pushm <M0, M1, M2, L0, L1, L4, L5>;

    r9 = r0;
8420265e:	13 09       	r9 = r0 + Null;
    r4 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.CLIP_THRESHOLD_FIELD];
84202660:	b6 f0 1a 88 	r4 = M[r9 + 104];

    // Get cbuffer details for DM1 input
    r0 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.P_TMP_INT_IP_FIELD];
84202664:	b2 f0 03 88 	r0 = M[r9 + 12];
    call $cbuffer.get_read_address_and_size_and_start_address;
84202668:	ff fd be f1 	call (m) 0x3a27a;
8420266c:	33 e0 
    push r2;
8420266e:	00 f0 34 cf 	push r2;
    pop B0;
84202672:	00 f6 3a cf 	pop B0;
    I0 = r0;
84202676:	10 0a       	I0 = r0 + Null;
    L0 = r1;
84202678:	1c 0b       	L0 = r1 + Null;

    // Get cbuffer details for DM2 input
    r0 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.P_TMP_EXT_IP_FIELD];
8420267a:	b2 f0 07 88 	r0 = M[r9 + 28];
    call $cbuffer.get_read_address_and_size_and_start_address;
8420267e:	ff fd bd f1 	call (m) 0x3a27a;
84202682:	3d ef 
    push r2;
84202684:	00 f0 34 cf 	push r2;
    pop B4;
84202688:	00 f6 3c cf 	pop B4;
    I4 = r0;
8420268c:	14 0a       	I4 = r0 + Null;
    L4 = r1;
8420268e:	1e 0b       	L4 = r1 + Null;

    r10 = $aanc_proc.FRAME_SIZE;
84202690:	0c f0 40 40 	r10 = Null + 64;

    r3 = 0; // Internal mic clipping detection
84202694:	05 00       	r3 = Null + Null;
    r5 = 0; // Internal mic clipping detection
84202696:	07 00       	r5 = Null + Null;

    r7 = M[r9 + $aanc_proc.PEAK_INT_FIELD];
84202698:	b9 f0 14 88 	r7 = M[r9 + 80];
    r8 = M[r9 + $aanc_proc.PEAK_EXT_FIELD];
8420269c:	ba f0 11 88 	r8 = M[r9 + 68];

    do detect_mic_clipping;
842026a0:	11 4c       	do (m) $M.aanc_proc.clipping_peak_detect.detect_mic_clipping;
        r0 = M[I0, MK1], r2 = M[I4, MK1];
842026a2:	41 f1 32 d0 	Null = Null + Null, r0 = M[I0,4], r2 = M[I4,4];
        r0 = ABS r0; // r0 = Int Mic (I0)
842026a6:	4f f2 42 ce 	r0 = ABS r0;
        r7 = MAX r0; // Peak detect int mic
842026aa:	6f f2 49 ce 	r7 = MAX r0;
        r2 = ABS r2; // r2 = Ext Mic (I4)
842026ae:	4f f4 44 ce 	r2 = ABS r2;
        r8 = MAX r2; // Peak detect ext mic
842026b2:	6f f4 4a ce 	r8 = MAX r2;
        Null = r0 - r4;
842026b6:	90 05       	Null = r0 - r4;
        if GE r3 = 1;
842026b8:	2a f0 45 ce 	if GE r3 = Null + 1;
        Null = r2 - r4;
842026bc:	a0 05       	Null = r2 - r4;
        if GE r5 = 1;
842026be:	2a f0 47 ce 	if GE r5 = Null + 1;

842026c2 <$M.aanc_proc.clipping_peak_detect.detect_mic_clipping>:
    detect_mic_clipping:

    MB[r9 + $aanc_proc.CLIP_INT_FIELD] = r3;
842026c2:	b5 f0 58 8a 	MB[r9 + 88] = r3;
    MB[r9 + $aanc_proc.CLIP_EXT_FIELD] = r5;
842026c6:	b7 f0 4c 8a 	MB[r9 + 76] = r5;
    M[r9 + $aanc_proc.PEAK_INT_FIELD] = r7;
842026ca:	b9 f0 14 8e 	M[r9 + 80] = r7;
    M[r9 + $aanc_proc.PEAK_EXT_FIELD] = r8;
842026ce:	ba f0 11 8e 	M[r9 + 68] = r8;

    // Do clipping and peak detect on the playback channel
    r0 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.P_PLAYBACK_IP_FIELD];
842026d2:	b2 f0 21 88 	r0 = M[r9 + 132];
    if Z jump done_detection;
842026d6:	21 60       	if EQ jump (m) $M.aanc_proc.clipping_peak_detect.done_detection;

    r0 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.P_TMP_PB_IP_FIELD];
842026d8:	b2 f0 0b 88 	r0 = M[r9 + 44];
    call $cbuffer.get_read_address_and_size_and_start_address;
842026dc:	ff fd bd f1 	call (m) 0x3a27a;
842026e0:	3f ec 
    push r2;
842026e2:	00 f0 34 cf 	push r2;
    pop B0;
842026e6:	00 f6 3a cf 	pop B0;
    I0 = r0;
842026ea:	10 0a       	I0 = r0 + Null;
    L0 = r1;
842026ec:	1c 0b       	L0 = r1 + Null;

    r3 = 0;
842026ee:	05 00       	r3 = Null + Null;
    r10 = $aanc_proc.FRAME_SIZE;
842026f0:	0c f0 40 40 	r10 = Null + 64;
    r5 = $M.AANC.FLAGS.CLIPPING_PLAYBACK;
842026f4:	07 f0 00 48 	r5 = Null + 1024;
    r7 = M[r9 + $aanc_proc.PEAK_PB_FIELD];
842026f8:	b9 f0 17 88 	r7 = M[r9 + 92];
    do detect_pb_clipping;
842026fc:	0a 4c       	do (m) $M.aanc_proc.clipping_peak_detect.detect_pb_clipping;
        r0 = M[I0, MK1];
842026fe:	21 f0 30 c0 	Null = Null + Null, r0 = M[I0,4];
        r0 = ABS r0; // r0 = Playback (I0)
84202702:	4f f2 42 ce 	r0 = ABS r0;
        r7 = MAX r0; // Peak detect playback signal
84202706:	6f f2 49 ce 	r7 = MAX r0;
        Null = r0 - r4;
8420270a:	90 05       	Null = r0 - r4;
        if GE r3 = 1;
8420270c:	2a f0 45 ce 	if GE r3 = Null + 1;

84202710 <$M.aanc_proc.clipping_peak_detect.detect_pb_clipping>:
    detect_pb_clipping:

    MB[r9 + $aanc_proc.CLIP_PB_FIELD] = r3;
84202710:	b5 f0 64 8a 	MB[r9 + 100] = r3;
    M[r9 + $aanc_proc.PEAK_PB_FIELD] = r7;
84202714:	b9 f0 17 8e 	M[r9 + 92] = r7;

84202718 <$M.aanc_proc.clipping_peak_detect.done_detection>:

done_detection:
    POP_ALL_C; // POP_ALL_C won't touch r0-r3
84202718:	70 ff 60 e4 	popm <M0, M1, M2, L0, L1, L4, L5>;
8420271c:	07 f0 67 e4 	popm <I0, I1, I2, I4, I5, I6>;
84202720:	fc fa 60 e0 	popm <r4, r5, r6, r7, r8, r9, rLink, rMACB>;
    r0 = 1;
84202724:	42 20       	r0 = Null + 1;

    rts;
84202726:	d8 4c       	rts;

84202728 <$_aanc_proc_calc_gain_db>:
.MODULE $M.aanc_proc.calc_gain_db;
    .CODESEGMENT PM;

$_aanc_proc_calc_gain_db:

    pushm <r6, rLink>;
84202728:	90 1c       	pushm <r6, rLink>;

    Null = r0;
8420272a:	10 00       	Null = r0 + Null;
    if Z jump return_early;
8420272c:	0e 60       	if EQ jump (m) $M.aanc_proc.calc_gain_db.return_early;

8420272e <$M.aanc_proc.calc_gain_db.calc_fine_gain_db>:

calc_fine_gain_db:
    rMAC = r0; // Copy fine gain to rMAC, in Q40.32
8420272e:	11 00       	rMAC = r0 + Null;
    r3 = r1 * $aanc_proc.COARSE_GAIN_TO_DB (int); // Store coarse gain dB value in r3
84202730:	9d 41       	r3 = r1 * 6 (int);

    // Fine gain measured relative to 128, so needs to be scaled by 2^-7
    // log2_table takes input (rMAC) in Q9.63, so shift rMAC by 63-32-7=24
    rMAC = rMAC ASHIFT $aanc_proc.FINE_GAIN_LOG2_SHIFT_AMT (72bit);
84202732:	49 5f       	rMAC = rMAC ASHIFT 24 (56bit);
    r3 = r3 ASHIFT $aanc_proc.COARSE_GAIN_DB_SHIFT_AMT; // Coarse gain (dB) in Q12.20
84202734:	ed 5e       	r3 = r3 ASHIFT 20;

    call $math.log2_table;
84202736:	ff fd 8f f3 	call 0x745ac;
8420273a:	36 e3 

    // Convert to dB by using multiplying factor of 20/log2(10)
    rMAC = r0 * $aanc_proc.LOG2_TO_DB_CONV_FACTOR;
8420273c:	02 f3 30 fa 	rMAC = r0 * 0.376287494786083698272705078125 (SS);
84202740:	4a f2 d1 cc 
    r0 = rMAC + r3; // Add coarse gain (dB) and fine gain (dB)
84202744:	4a 01       	r0 = rMAC + r3;
    jump return_db_gain;
84202746:	04 6e       	jump (m) $M.aanc_proc.calc_gain_db.return_db_gain;

84202748 <$M.aanc_proc.calc_gain_db.return_early>:

return_early:
    r0 = MININT;
84202748:	00 f8 02 f0 	r0 = Null + -2147483648;
8420274c:	00 40 

8420274e <$M.aanc_proc.calc_gain_db.return_db_gain>:

return_db_gain:
    popm <r6, rLink>;
8420274e:	90 48       	popm <r6, rLink>;

    rts;
84202750:	d8 4c       	rts;
